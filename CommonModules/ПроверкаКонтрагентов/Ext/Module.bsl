////////////////////////////////////////////////////////////////////////////////
// Проверка одного или нескольких контрагентов при помощи веб-сервиса ФНС.
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область Проверка

#Область ПроверкаОдногоКонтрагента

// Процедура - Проверка одного контрагента по ИНН, КПП и Дате.
//
// Параметры:
//  Параметры	 - Структура - Параметры запуска фонового задания. Ключи структуры:
//		"Контрагент" - СправочникСсылка.<Контрагенты> - Проверяемый контрагент.
//		"ИНН"		 - Строка - ИНН Контрагента.
//		"КПП"		 - Строка - КПП Контрагента.
//		"Дата"		 - Дата - Дата, на которую выполняется проверка контрагента. Может быть не указана,
//		                  тогда берется текущая дата.
//		"СохранятьРезультатСразуПослеПроверки" - Булево - Признак, указывающий нужно ли результат
//		                  проверки контрагента сразу сохранять в регистр.
//		"АдресХранилища" - Строка - Адрес, в который будет помещен результат проверки контрагента.
//  АдресХранилища	 - Строка - Адрес временного хранилища, в который будет помещен результат проверки контрагента.
Процедура ПроверитьКонтрагента(Параметры, АдресХранилища) Экспорт 
	
	// Готовим данные в нужном формате для передачи на проверку.
	ДанныеКонтрагентов = ШаблонТаблицыДанныеКонтрагента();
	
	НоваяСтрока = ДанныеКонтрагентов.Добавить();
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
		НоваяСтрока.ОбластьДанныхВспомогательныеДанные = ОбщегоНазначения.ЗначениеРазделителяСеанса();
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(НоваяСтрока, Параметры);
	
	ПроверитьКонтрагентов(ДанныеКонтрагентов, АдресХранилища, Истина, Параметры.СохранятьРезультатСразуПослеПроверки);
	
КонецПроцедуры

// Функция - Состояние контрагента
//
// Параметры:
//		"ИНН"		 - Строка - ИНН Контрагента.
//		"КПП"		 - Строка - КПП Контрагента.
//		"Дата"		 - Дата - Дата, на которую выполняется проверка контрагента. Может быть не указана,
//		                  тогда берется текущая дата.
// 
// Возвращаемое значение:
//  Перечисление.СостоянияСуществованияКонтрагента - Состояния контрагента согласно данным ФНС
//
Функция СостояниеКонтрагента(ИНН, КПП, Дата = Неопределено) Экспорт
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ИНН",        ИНН);
	ДополнительныеПараметры.Вставить("КПП",        КПП);
	ДополнительныеПараметры.Вставить("Дата",       Дата);
	ДополнительныеПараметры.Вставить("Контрагент", Неопределено);
	ДополнительныеПараметры.Вставить("СохранятьРезультатСразуПослеПроверки", Ложь);
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор);
	ПроверитьКонтрагента(ДополнительныеПараметры, АдресХранилища);
	
	Состояние = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	Возврат Состояние;
	
КонецФункции

#КонецОбласти

#Область ПроверкаНесколькихКонтрагентов

// Процедура - Проверка нескольких контрагентов.
//
// Параметры:
//  ДанныеКонтрагентов					 - ТаблицаЗначений - Содержит данные проверяемых контрагентов. 
//		Структуру колонок таблицы см в функции ШаблонТаблицыДанныеКонтрагента.
//  АдресХранилища						 - Строка - Адрес, в который будет помещен результат проверки контрагента.
//  ЭтоПроверкаСправочника				 - Булево - Указывает, выполняется ли проверка справочника. 
//		Для справочника результат проверки сохраняется во временное хранилище, либо записывается в регистр.
//		Для остальных объектов результат проверки заполняется в колонке Состояние таблицы ДанныеКонтрагентов.
//  СохранятьРезультатСразуПослеПроверки - Булево - Признак, указывающий нужно ли результат проверки контрагента.
Процедура ПроверитьКонтрагентов(ДанныеКонтрагентов, АдресХранилища = Неопределено, ЭтоПроверкаСправочника = Истина, СохранятьРезультатСразуПослеПроверки = Ложь) Экспорт
	
	// Если нет доступа к веб-сервису, то проверку не выполняем.
	Если НЕ ЕстьДоступКВебСервисуФНС() Тогда
		Возврат;
	КонецЕсли;
	
	ИспользоватьКэш = Истина;
	Если ДанныеКонтрагентов.Количество() = 1 И ДанныеКонтрагентов.Колонки.Найти("ДополнительныеПараметры") <> Неопределено Тогда
		Если ТипЗнч(ДанныеКонтрагентов) = Тип("Структура") И ДанныеКонтрагентов[0].ДополнительныеПараметры.Свойство("НеИспользоватьКэш") Тогда
			ИспользоватьКэш = НЕ ДанныеКонтрагентов[0].ДополнительныеПараметры.Свойство("НеИспользоватьКэш");
		КонецЕсли;
	КонецЕсли;
	
	//	
	// Если по некоторым контрагентам можно определить, что они не существуют, не обращаясь к сервису, то к сервису по ним
	// обращаться не будем.
	Если ЭтоПроверкаСправочника И ИспользоватьКэш Тогда
		ПолучитьСостоянияКонтрагентовИзКэша(ДанныеКонтрагентов);
	КонецЕсли;
	
	// Приведение данных к нужному формату, выявление записей с ошибками.
	ПодготовитьДанныеКПроверке(ДанныеКонтрагентов);
	
	// Получение результатов проверки от веб-сервиса.
	// Проверяем только тех контрагентов, у которых неопределено состояние существования и у которых нет ошибок.
	Отбор = Новый Структура();
	Отбор.Вставить("Состояние", Перечисления.СостоянияСуществованияКонтрагента.ПустаяСсылка());
	ПолучитьРезультатПроверкиВебСервисом(ДанныеКонтрагентов, Отбор);
	
	// Сохраняем результаты проверки, если это справочник.
	Если ЭтоПроверкаСправочника Тогда
		УстановитьПривилегированныйРежим(Истина);
		СохранитьРезультатыПроверкиСправочника(ДанныеКонтрагентов, АдресХранилища, СохранятьРезультатСразуПослеПроверки);
	КонецЕсли;
		
КонецПроцедуры

// Процедура - Метод фонового задания по проверки контрагентов в документе.
//
// Параметры:
//  Параметры	 - Структура - Параметры фонового задания. Ключи:
//		"ДанныеКонтрагентов" - ТаблицаЗначений - - Содержит данные проверяемых контрагентов. 
//			Структуру колонок таблицы см в функции ШаблонТаблицыДанныеКонтрагентаДляДокумента.
//		"АдресХранилища" - Строка - Адрес, в который будет помещен результат проверки контрагента
//		"СохранятьРезультатСразуПослеПроверки" - Булево - Признак, указывающий нужно ли результат проверки контрагента
// 			сразу сохранять в регистр.
Процедура ПроверитьКонтрагентовВДокументе(Параметры) Экспорт
	
	ПроверяемыеКонтрагенты 	= Параметры.ДанныеКонтрагентов;
	АдресХранилища 			= Параметры.АдресХранилища;
	
	// Если нет доступа к веб-сервису, то проверку не выполняем.
	Если ЕстьДоступКВебСервисуФНС() Тогда
		
		ДанныеКонтрагентов = ПроверяемыеКонтрагенты.Скопировать();
		ПроверитьКонтрагентов(ДанныеКонтрагентов, , Ложь);
		
		ЗаполнитьСостояния(ПроверяемыеКонтрагенты, ДанныеКонтрагентов);
		
		Результат = Новый Структура;
		Результат.Вставить("ДанныеКонтрагентов", ПроверяемыеКонтрагенты);
	Иначе
		Результат = Новый Структура;
		Результат.Вставить("НетДоступаКВебСервисуФНС", Истина);
	КонецЕсли;
	
	Результат.Вставить("СохранятьРезультатСразуПослеПроверки", 	Параметры.СохранятьРезультатСразуПослеПроверки);
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

// Процедура - метод регламентного задания по проверке контрагентов в справочнике.
// 		В модели сервиса обновляет состояния контрагентов по каждой записи регистра.
// 		В локальном режима записывает недостающих контрагентов в регистр и обновляет состояния по каждой записи регистра.
Процедура ПроверитьКонтрагентовРегламентноеЗадание() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ПроверкаКонтрагентов);
	
	// Проверяем, включен ли механизм.
	Если НЕ ПроверкаКонтрагентовВключена() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	СостоянияКонтрагентов.Контрагент,
	|	СостоянияКонтрагентов.ИНН,
	|	СостоянияКонтрагентов.КПП,
	|	СостоянияКонтрагентов.ОбластьДанныхВспомогательныеДанные КАК ОбластьДанныхВспомогательныеДанные,
	|	&Дата КАК Дата
	|ИЗ
	|	РегистрСведений.СостоянияКонтрагентов КАК СостоянияКонтрагентов
	|ГДЕ
	|	СостоянияКонтрагентов.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияСуществованияКонтрагента.КонтрагентНеПодлежитПроверке)";

	Если НЕ ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
		
		Запрос.Текст = СтрЗаменить(
			Запрос.Текст,
			"СостоянияКонтрагентов.ОбластьДанныхВспомогательныеДанные КАК ОбластьДанныхВспомогательныеДанные,",
			"");
			
	КонецЕсли;

	// Указываем дату, на которую будет выполняться проверка.
	Запрос.УстановитьПараметр("Дата", НачалоДня(ТекущаяДатаСеанса()));
	ДанныеКонтрагентов = Запрос.Выполнить().Выгрузить();
	
	ДанныеКонтрагентов.Колонки.Добавить("ДополнительныеПараметры", Новый ОписаниеТипов("Структура"));
	
	// Выполняется проверка только тех ИНН и КПП, которые записаны в регистр.
	ПроверитьКонтрагентов(ДанныеКонтрагентов);
	
	// Дозаписываем недостающие ИНН и КПП в регистр в локальном режиме.
	Если НЕ ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		ПроверитьНепроверенныхКонтрагентов(Ложь);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - Выполняет первоначальное заполнение регистра на основе справочника контрагентов.
// 		Заполнение выполняется:
// 		1. После ручного включения проверки фоновым заданием.
// 		2. В режиме сервисов - обновлением ИБ в каждой области отдельно.
//
// Параметры:
//  Параметры	 - Структура или Неопределено - Параметры очереди заданий в модели сервиса.
//		В локальной версии - Неопределено.
Процедура ПроверитьКонтрагентовПослеВключенияПроверки(Параметры = Неопределено) Экспорт
	
	ЭтоОбновлениеИБВМоделиСервиса = Ложь;
	РазмерПорции = 1000;
	
	Если Параметры = Неопределено Тогда
		// Это заполнение регистра после включения проверки.
	Иначе
		// Это обновление ИБ.
		// Обновление должно выполняться только в модели сервиса.
		Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
			ЭтоОбновлениеИБВМоделиСервиса = Истина;
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// Дозаписываем недостающие ИНН и КПП в регистр в локальном режиме,
	// либо в модели сервисов в отложенном обновлении из областей данных. 
	Если НЕ ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		ПроверитьНепроверенныхКонтрагентов(ЭтоОбновлениеИБВМоделиСервиса, Параметры);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - Запуск фонового задания по проверке контрагентов после 
//		включения проверки в предложении на подключение или из настроек.
Процедура ПроверитьКонтрагентовПослеВключенияПроверкиФоновоеЗадание() Экспорт
	
	Попытка
	
		ФоновыеЗадания.Выполнить("ПроверкаКонтрагентов.ПроверитьКонтрагентовПослеВключенияПроверки", 
		, "ПроверкаПослеВключенияМеханизма", НСтр("ru = 'Проверка контрагентов'"));

	Исключение
		
		// Исключение возникнет при попытке запуска фонового задания, пока не отработало предыдущее фоновое задание.
		// Специальной обработки не требуется.
		
		КодОсновногоЯзыка = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка(); // Для записи события в журнал регистрации.
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Проверка контрагентов.Фоновое задание по обработке непроверенных контрагентов после включения'", КодОсновногоЯзыка),
			УровеньЖурналаРегистрации.Ошибка,,,ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
			
	КонецПопытки;
	
КонецПроцедуры

// Процедура - Контрагенты проверяются по данным ФНС.
// 	По завершению проверки в переданную таблицу добавляется колонка c состоянием контрагента.
//
// Параметры:
//  ДанныеКонтрагентов	 - ТаблицаЗначений - Таблица, содержащая контрагентов на проверку.
//		Колонки таблицы: Контрагент, ИНН, КПП, Дата.
//  ВидПроверки			 - Строка - Может принимать одно следующих значений: 
//		- ИзКэша 			- результат проверки выбирается только из кэша.
//		- АктуальныеДанные 	- результат проверки получается только на основе данных, возвращенных веб-сервисом проверки.
//		- Смешанный 		- сначала выбираются данные из кэша, затем идет обращение к веб-сервису проверки.
Процедура ВыполнитьПроверкуКонтрагентов(ПроверяемыеКонтрагенты, Знач ВидПроверки = "Смешанный") Экспорт
	
	ВидПроверки = ВРег(ВидПроверки);
	
	// Проверка корректности переданного параметра.
	Если ВидПроверки <> "ИЗКЭША" И ВидПроверки <> "АКТУАЛЬНЫЕДАННЫЕ" И ВидПроверки <> "СМЕШАННЫЙ" Тогда
		ВызватьИсключение(НСтр("ru = 'Недопустимое значение параметра (параметр номер ''2'')'"));
	КонецЕсли;
	
	// Добавляем колонку с результатом проверки.
	ПроверяемыеКонтрагенты.Колонки.Добавить("Состояние",Новый ОписаниеТипов("ПеречислениеСсылка.СостоянияСуществованияКонтрагента"));
	ДанныеКонтрагентов = ПроверяемыеКонтрагенты.Скопировать();
	
	// Приведение данных к нужному формату, выявление записей с ошибками.
	ПодготовитьДанныеКПроверке(ДанныеКонтрагентов);
	
	Если ВидПроверки = "ИЗКЭША" ИЛИ ВидПроверки = "СМЕШАННЫЙ" Тогда
		ПолучитьСостоянияКонтрагентовИзКэша(ДанныеКонтрагентов, Истина);
	КонецЕсли;
	
	// Получение результатов проверки от веб-сервиса.
	// Проверяем только тех контрагентов, у которых неопределено состояние существования и у которых нет ошибок.
	Если ВидПроверки = "АКТУАЛЬНЫЕДАННЫЕ" ИЛИ ВидПроверки = "СМЕШАННЫЙ" Тогда
		Отбор = Новый Структура();
		Отбор.Вставить("Состояние", Перечисления.СостоянияСуществованияКонтрагента.ПустаяСсылка());
		ПолучитьРезультатПроверкиВебСервисом(ДанныеКонтрагентов, Отбор);
	КонецЕсли;
	
	ЗаполнитьСостояния(ПроверяемыеКонтрагенты, ДанныеКонтрагентов);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ВспомогательныеПроцедурыИФункции

// Процедура - Добавление описания расположения контрагента в документе в таблицу описаний.
//
// Параметры:
//  Описание		 - ТаблицаЗначений - таблица, хранящая описание расположения контрагентов в документе.
//  Ссылка			 - ДокументСсылка - Документ, в котором выполняется проверка контрагента.
//  Элемент			 - Элемент коллекции ЭлементыФормы - Элемент, в котором находится проверяемый контрагент или счет-фактура.
//  Контрагент		 - СправочникСсылка.<Контрагенты> - Проверяемый контрагент.
//  ЭлементРодитель	 - Элемент коллекции ЭлементыФормы - Группа, которая содержит элемент с контрагентом или
//                     счетом-фактурой.
//		Данный элемент будет подкрашен по результату проверки контрагентов. Может не указываться.
Процедура ДополнитьОписание(
		Описание,  
		Ссылка, 
		Элемент, 
		Контрагент,
		ЭлементРодитель = Неопределено) Экспорт
	
	СтрокаОписания = Описание.Добавить();
	СтрокаОписания.Ссылка				= Ссылка;
	СтрокаОписания.Элемент				= Элемент;
	СтрокаОписания.ЭлементРодитель		= ЭлементРодитель;
	СтрокаОписания.Контрагент 			= Контрагент;
	
КонецПроцедуры

// Процедура - Добавление записи к таблице описания расположения контрагентов в табличных частях документа.
//
// Параметры:
//  Форма	 			 - УправляемаяФорма - Форма документа, в котором выполняется проверка контрагентов.
//  Описание 			 - ТаблицаЗначений - Таблица с описанием расположения контрагентов в табличной части документа.
//  ИмяТаблицыФормы		 - Строка - Имя таблицы формы, в которой расположен контрагент.
//  ИмяПоляСКонтрагентом - Строка - Имя колонки с контрагентом в таблице формы, в которой расположен контрагент.
//  ИмяПоляСДатой		 - Строка - Имя колонки с датой в таблице формы, на которую выполняется проверка контрагента.
//		Если в таблице формы нет такой колонки, то не заполняется.
//
Процедура ДополнитьОписаниеТабличныхЧастей(Форма, Описание, ИмяТаблицыФормы, ИмяПоляСКонтрагентом, ИмяПоляСДатой) Экспорт
	
	Если КолонкаТаблицыСкрытаФункциональнойОпцией(Форма, ИмяТаблицыФормы, ИмяПоляСКонтрагентом) Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаОписания = Описание.Добавить();
	
	// ТЧ
	СтрокаОписания.ИмяТаблицыФормы 			= ИмяТаблицыФормы;
	СтрокаОписания.ИмяТабличнойЧасти 		= ИмяРеквизита(Форма, ИмяТаблицыФормы);
	
	// Контрагент
	СтрокаОписания.ИмяПоляСКонтрагентом		= ИмяПоляСКонтрагентом;
	СтрокаОписания.ИмяКолонкиСКонтрагентом	= ИмяРеквизита(Форма, ИмяПоляСКонтрагентом);
	
	// Дата
	СтрокаОписания.ИмяПоляСДатой			= ИмяПоляСДатой;
	СтрокаОписания.ИмяКолонкиСДатой			= ИмяРеквизита(Форма, ИмяПоляСДатой);
	
КонецПроцедуры

// Процедура - Устанавливает текст и видимость предупреждения про тестовый режим работы сервиса.
Процедура УстановитьВидимостьИЗаголовокПредупрежденияПроТестовыйРежим(Элемент) Экспорт
	
	Если ТестовыйРежимРаботыСервисаЗавершился() Тогда
		Элемент.Видимость = Ложь;
	Иначе
		Элемент.Видимость = Истина;
		Элемент.Заголовок = 
			НСтр("ru = 'В настоящее время веб-сервис ФНС работает в тестовом режиме'");
	КонецЕсли;
	
КонецПроцедуры

// Функция - Тестовый режим работы сервиса завершился.
// Возвращаемое значение:
// Булево - Истина, если тестовый режим работы сервиса завершился.
Функция ТестовыйРежимРаботыСервисаЗавершился() Экспорт
	
	Возврат Ложь;
	
КонецФункции

// Процедура - Установка надписей в панели проверки контрагентов в отчета при создании на сервере.
//
// Параметры:
//  Форма	- УправляемаяФорма - Форма отчета, в котором выводится результат проверки контрагентов.
Процедура УстановитьНадписиВПанелиОтчетаПриСозданииНаСервере(Форма) Экспорт
	
	СсылкаНаИнструкцию = Новый ФорматированнаяСтрока(" ", ПроверкаКонтрагентовКлиентСерверПовтИсп.СсылкаНаИнструкцию());
	
	// Все контрагенты корректны
	ЭлементФормы = Форма.Элементы.Найти("ТекстПриКорректныхКонтрагентах");
	Если ЭлементФормы <> Неопределено Тогда
		ЭлементФормы.Заголовок = Новый ФорматированнаяСтрока(НСтр("ru = 'Проверка контрагентов по данным ФНС выполнена успешно'"), СсылкаНаИнструкцию);
	КонецЕсли;
	
	// Есть некорректные контрагенты.
	ЭлементФормы = Форма.Элементы.Найти("ТекстПриНекорректныхКонтрагентах");
	Если ЭлементФормы <> Неопределено Тогда
		ЭлементФормы.Заголовок = Новый ФорматированнаяСтрока(НСтр("ru = 'Обнаружены недействующие контрагенты по данным ФНС'"), СсылкаНаИнструкцию);
	КонецЕсли;
	
	// Выполняется проверка
	ЭлементФормы = Форма.Элементы.Найти("ТекстПриПроверкеВПроцессеВыполнения");
	Если ЭлементФормы <> Неопределено Тогда
		ЭлементФормы.Заголовок = Новый ФорматированнаяСтрока(НСтр("ru = 'Выполняется проверка контрагентов согласно данным ФНС'"), СсылкаНаИнструкцию);
	КонецЕсли;
	
	// Нет доступа к сервису
	ЭлементФормы = Форма.Элементы.Найти("ТекстНетДоступаКСервису");
	Если ЭлементФормы <> Неопределено Тогда
		ЭлементФормы.Заголовок = Новый ФорматированнаяСтрока(НСтр("ru = 'Не удалось произвести проверку контрагентов: сервис ФНС временно недоступен'"), СсылкаНаИнструкцию);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаКонтрагентовВДокументах

// Процедура - Запуск фонового задания по проверке контрагента.
//
// Параметры:
//  Форма						 - УправляемаяФорма - Форма документа, в котором выполняется проверка контрагентов.
//  ДополнительныеПараметры		 - ТаблицаФормы - Если изменения контрагента или даты произошли в табличной части.
//								 - ПолеФормы - Элемент управления, содержащий контрагента или счет-фактуру, в случае, 
//		если произошло изменение в контрагенте, находящегося в шапке или в счете-фактуре, находящегося в подвале.
//								 - Дата - Дата документа, в случае если произошло изменение даты
//								 - Неопределено - если требуется проверка всех контрагентов в документе.
//								 - Булево - если это запуск проверки контрагента при создании на сервере.
Процедура ПроверитьКонтрагентовВДокументеФоновоеЗадание(Форма, ПараметрыФоновогоЗадания) Экспорт
	
	ОчиститьРезультатыПредыдущихПроверок(Форма, ПараметрыФоновогоЗадания);
	ПоказатьПредварительныйРезультатПроверкиКонтрагентовИзКэша(Форма, ПараметрыФоновогоЗадания);
	
	// Заполняем данные проверяемых контрагентов.
	ДанныеКонтрагентов = ДанныеКонтрагентовВДокументе(Форма);
	ДанныеКонтрагентов.ЗаполнитьЗначения(Перечисления.СостоянияСуществованияКонтрагента.ПустаяСсылка(), "Состояние");
	
	Если ДанныеКонтрагентов.Количество() > 0 Тогда
		
		// Инициализируем параметры фонового задания.
		Форма.РеквизитыПроверкиКонтрагентов.АдресХранилища 			= ПоместитьВоВременноеХранилище(Неопределено, Форма.УникальныйИдентификатор);
		Форма.РеквизитыПроверкиКонтрагентов.ИдентификаторЗадания 	= Неопределено;
		Форма.РеквизитыПроверкиКонтрагентов.ЗаданиеВыполнено 		= Ложь;
		
		СохранятьРезультатСразуПослеПроверки = ПараметрыФоновогоЗадания.Свойство("СохранятьРезультатСразуПослеПроверки") 
			И ПараметрыФоновогоЗадания.СохранятьРезультатСразуПослеПроверки;
		
		ПараметрыЗапуска = Новый Структура;
		ПараметрыЗапуска.Вставить("ДанныеКонтрагентов", 	ДанныеКонтрагентов);
		ПараметрыЗапуска.Вставить("АдресХранилища", 		Форма.РеквизитыПроверкиКонтрагентов.АдресХранилища);
		ПараметрыЗапуска.Вставить("СохранятьРезультатСразуПослеПроверки", СохранятьРезультатСразуПослеПроверки);
		
		Параметры = Новый Массив;
		Параметры.Добавить(ПараметрыЗапуска);
		
		Попытка
		 	ФоновоеЗадание = ФоновыеЗадания.Выполнить("ПроверкаКонтрагентов.ПроверитьКонтрагентовВДокументе", 
				Параметры, , НСтр("ru = 'Проверка контрагентов в документе'"));
				
			Если ФоновоеЗадание <> Неопределено Тогда
					
				Форма.РеквизитыПроверкиКонтрагентов.ИдентификаторЗадания = ФоновоеЗадание.УникальныйИдентификатор;
				Форма.РеквизитыПроверкиКонтрагентов.ЗаданиеВыполнено 
					= ПроверкаКонтрагентовВызовСервера.ЗаданиеВыполнено(ФоновоеЗадание.УникальныйИдентификатор);
					
			КонецЕсли;
		Исключение
			
			// Исключение возникнет при попытке запуска фонового задания, пока не отработало предыдущее фоновое задание.
			// Специальной обработки не требуется.
			КодОсновногоЯзыка = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка(); // Для записи события в журнал регистрации.
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Проверка контрагентов.Фоновое задание в документе'", КодОсновногоЯзыка),
				УровеньЖурналаРегистрации.Ошибка,,,ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
				
		КонецПопытки;
			
	КонецЕсли;
	
КонецПроцедуры

Процедура ПоказатьПредварительныйРезультатПроверкиКонтрагентовИзКэша(Форма, ПараметрыФоновогоЗадания)
	
	ДанныеКонтрагентов 		= ДанныеКонтрагентовВДокументе(Форма);
	ПроверяемыеКонтрагенты 	= ДанныеКонтрагентов.Скопировать();
	
	СвернутьДанныеКонтрагентов(ДанныеКонтрагентов);
	ПолучитьСостоянияКонтрагентовИзКэша(ДанныеКонтрагентов, Истина);
	
	ЗаполнитьСостояния(ПроверяемыеКонтрагенты, ДанныеКонтрагентов);
	
	СохранятьРезультатСразуПослеПроверки = ПараметрыФоновогоЗадания.Свойство("СохранятьРезультатСразуПослеПроверки")
		И ПараметрыФоновогоЗадания.СохранятьРезультатСразуПослеПроверки;
		
	// Формируем результат в формате, необходимом для отображения в документе.
	Результат = Новый Структура;
	Результат.Вставить("ДанныеКонтрагентов", 					ПроверяемыеКонтрагенты);
	Результат.Вставить("СохранятьРезультатСразуПослеПроверки", 	СохранятьРезультатСразуПослеПроверки);
	
	Форма.РеквизитыПроверкиКонтрагентов.АдресХранилища = ПоместитьВоВременноеХранилище(Результат, Новый УникальныйИдентификатор);
	ОтобразитьРезультатПроверкиКонтрагентаВДокументе(Форма);
	
	Форма.РеквизитыПроверкиКонтрагентов.АдресДанныхКонтрагентовИзКэша = ПоместитьВоВременноеХранилище(ПроверяемыеКонтрагенты, Новый УникальныйИдентификатор);
	Форма.РеквизитыПроверкиКонтрагентов.АдресХранилища = Неопределено;

КонецПроцедуры

// Процедура - Отображение результата проверки контрагентов в документе.
//
// Параметры:
//  Форма	- УправляемаяФорма - Форма документа, в котором выполняется проверка контрагентов.
Процедура ОтобразитьРезультатПроверкиКонтрагентаВДокументе(Форма) Экспорт
	
	Если Форма.РеквизитыПроверкиКонтрагентов.ПроверкаИспользуется Тогда
		
		СтандартнаяОбработка = Истина;
		РаботаСКонтрагентамиПереопределяемый.ОтобразитьРезультатПроверкиКонтрагентаВДокументе(Форма, СтандартнаяОбработка);
		
		// Если действия по отображению результата проверки переопределили, то стандартную обработку не выполняем.
		Если НЕ СтандартнаяОбработка Тогда
			Возврат;
		КонецЕсли;
		
		ПредотвратитьСбросРедактируемогоЗначения(Форма);
		
		СостояниеПроверки = Перечисления.СостоянияПроверкиКонтрагентов.ПроверкаВыполнена;
		
		Если ЗначениеЗаполнено(Форма.РеквизитыПроверкиКонтрагентов.АдресХранилища) 
			И ЭтоАдресВременногоХранилища(Форма.РеквизитыПроверкиКонтрагентов.АдресХранилища) Тогда
			РезультатРаботыФоновогоЗадания = ПолучитьИзВременногоХранилища(Форма.РеквизитыПроверкиКонтрагентов.АдресХранилища);
			
			Если РезультатРаботыФоновогоЗадания <> Неопределено Тогда
				
				Если РезультатРаботыФоновогоЗадания.Свойство("НетДоступаКВебСервисуФНС") Тогда
					// Нет доступа к сервису
					СостояниеПроверки = Перечисления.СостоянияПроверкиКонтрагентов.НетДоступаКВебСервису;
				Иначе
					СостояниеПроверки = Перечисления.СостоянияПроверкиКонтрагентов.ПроверкаВыполнена;
					
					// Фоновое задание отработало
					ДанныеКонтрагентов = РезультатРаботыФоновогоЗадания.ДанныеКонтрагентов;
					ЗапомнитьРезультатПроверкиКонтрагентов(Форма, ДанныеКонтрагентов);
					
					Если РезультатРаботыФоновогоЗадания.СохранятьРезультатСразуПослеПроверки Тогда
						
						// Определение объекта и ссылки.
						ОбъектИСсылкаПоФорме 	= ПроверкаКонтрагентовКлиентСервер.ОбъектИСсылкаПоФорме(Форма);
						ДокументОбъект 			= ОбъектИСсылкаПоФорме.Объект;
						
						СохранитьРезультатПроверкиКонтрагентов(Форма, ДокументОбъект);
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Очищаем свойства фонового задания.
		Форма.РеквизитыПроверкиКонтрагентов.АдресХранилища 			= Неопределено;
		Форма.РеквизитыПроверкиКонтрагентов.ИдентификаторЗадания 	= Неопределено;
		Форма.РеквизитыПроверкиКонтрагентов.ЗаданиеВыполнено 		= Истина;
			
		ПрорисоватьСостоянияКонтрагентовВДокументе(Форма, СостояниеПроверки);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - Устанавливаются параметры динамического списка документов и применяется условное оформление.
//
// Параметры:
//  Список	 - ДинамическийСписок - Список документов.
Процедура ПриСозданииНаСервереСписокДокументов(Список) Экспорт
	
	УстановитьПараметрыДинамическогоСписка(Список);
	УстановитьУсловноеОформлениеСпискаДокументов(Список);
	
КонецПроцедуры

// Процедура - Запоминание результатов проверки контрагентов в дополнительные свойства для последующего сохранения
//	в регистр при помощи подписки на события.
//
// Параметры:
//  Форма			- УправляемаяФорма - Форма документа, в котором выполняется проверка контрагентов.
//  ТекущийОбъект	- ДокументОбъект - документ, запись которого выполняется.
Процедура ПередЗаписьюНаСервереДокумент(Форма, ТекущийОбъект) Экспорт
	
	Если Форма.РеквизитыПроверкиКонтрагентов.ПроверкаИспользуется Тогда
		
		// Для документов с табличными частями.
		Если ПроверкаКонтрагентовКлиентСервер.ЭтоДокументСКонтрагентомВТабличнойЧасти(Форма) Тогда
			
			ДанныеКонтрагентов = ДанныеКонтрагентовВДокументе(Форма);
			ТекущийОбъект.ДополнительныеСвойства.Вставить("ДанныеКонтрагентов", ДанныеКонтрагентов);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - Запуск проверки контрагента, установка условного оформления.
//
// Параметры:
//  Форма	 - УправляемаяФорма - Форма документа, в котором выполняется проверка контрагентов.
//  Параметры		 - Структура - Если изменения произошли в табличной части. 
//		В записи с ключем ИмяТаблицы указывается ИмяТаблицы, в записи с ключем Идентификатор указывается Идентификатор
//		строки,  в которой произошло изменение контрагента или даты.
//					- Строка - Имя элемента управления формы, в случае если произошло изменение в контрагенте, находящегося в шапке.
//					- Дата - Дата документа, в случае если произошло изменение даты
//					- Неопределено - если требуется проверка всех контрагентов в документе.
Процедура ПриСозданииНаСервереДокумент(Форма, Параметры) Экспорт
	
	ИнициализироватьРеквизитыФормыДокумент(Форма);
	
	Форма.РеквизитыПроверкиКонтрагентов.ПроверкаИспользуется = ПроверкаКонтрагентовВызовСервера.ИспользованиеПроверкиВозможно();
	Форма.РеквизитыПроверкиКонтрагентов.НужноПоказатьПредложениеВключитьПроверкуКонтрагентов =
		НужноПоказатьПредложениеВключитьПроверкуКонтрагентов();
	
	// Определение объекта и ссылки.
	ОбъектИСсылкаПоФорме 	= ПроверкаКонтрагентовКлиентСервер.ОбъектИСсылкаПоФорме(Форма);
	ДокументСсылка 			= ОбъектИСсылкаПоФорме.Ссылка;  

	Если Форма.РеквизитыПроверкиКонтрагентов.ПроверкаИспользуется Тогда 
		
		УправлениеФормойПриСозданииНаСервере(Форма);
		
		// Фоновое задание не запускаем, если это новый документ.
		Если ЗначениеЗаполнено(ДокументСсылка) ИЛИ ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			
			ДополнительныеПараметры = Истина;
			ПараметрыФоновогоЗадания = ПроверкаКонтрагентовКлиентСервер.ПараметрыФоновогоЗадания(ДополнительныеПараметры);
			Форма.ПроверитьКонтрагентовФоновоеЗадание(ПараметрыФоновогоЗадания);
			
		КонецЕсли;
		
	Иначе
		ПрорисоватьСостоянияКонтрагентовВДокументе(Форма, Перечисления.СостоянияПроверкиКонтрагентов.ПроверкаНеИспользуется);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - Восстановление результатов проверки контрагентов в табличной части после записи.
//
// Параметры:
//  Форма			- УправляемаяФорма - Форма документа, в котором выполняется проверка контрагентов.
//  ТекущийОбъект	- ДокументОбъект - документ, запись которого выполняется.
Процедура ПослеЗаписиНаСервере(Форма, ТекущийОбъект) Экспорт
	
	Если Форма.РеквизитыПроверкиКонтрагентов.ПроверкаИспользуется Тогда
		
		Если ПроверкаКонтрагентовКлиентСервер.ЭтоДокументСКонтрагентомВТабличнойЧасти(Форма) Тогда
			ВосстановитьРезультатПроверкиКонтрагентовВТабличныхЧастяхПослеЗаписи(Форма, ТекущийОбъект);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - Сохранение результатов проверки контрагентов в регистр при записи.
//
// Параметры:
//  Форма			- УправляемаяФорма - Форма документа, в котором выполняется проверка контрагентов.
//  ТекущийОбъект	- ДокументОбъект - документ, запись которого выполняется.
Процедура ПриЗаписиНаСервере(Форма, ТекущийОбъект) Экспорт
	
	Если Форма.РеквизитыПроверкиКонтрагентов.ПроверкаИспользуется Тогда
		СохранитьРезультатПроверкиКонтрагентов(Форма, ТекущийОбъект);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - Вспомогательный API. Инициализировать реквизиты проверки контрагента в форме документа.
//
// Параметры:
//  Форма	 - УправляемаяФорма - Форма документа, в котором выполняется проверка контрагентов.
Процедура ИнициализироватьРеквизитыФормыДокумент(Форма) Экспорт
	
	НовыеРеквизиты = Новый Структура;
	
	ЭтоДокументСКонтрагентомВШапке 			= ПроверкаКонтрагентовКлиентСервер.ЭтоДокументСКонтрагентомВШапке(Форма); 
	ЭтоДокументСКонтрагентомВТабличнойЧасти = ПроверкаКонтрагентовКлиентСервер.ЭтоДокументСКонтрагентомВТабличнойЧасти(Форма);
	ЭтоДокументСоСчетомФактуройВПодвале 	= ПроверкаКонтрагентовКлиентСервер.ЭтоДокументСоСчетомФактуройВПодвале(Форма);
	ЭтоСчетФактура							= ПроверкаКонтрагентовКлиентСервер.ЭтоСчетФактура(Форма);
	
	// Служебный реквизит для работы фонового задания.
	НовыеРеквизиты.Вставить("АдресХранилища");
	// Служебный реквизит для работы фонового задания.
	НовыеРеквизиты.Вставить("ИдентификаторЗадания", 	Новый УникальныйИдентификатор);
	// Служебный реквизит для работы фонового задания.
	НовыеРеквизиты.Вставить("ЗаданиеВыполнено", 		Истина);
	// Включена ли проверка и есть ли доступ на использование проверки.
	НовыеРеквизиты.Вставить("ПроверкаИспользуется", 	Ложь);
	// Результат проверки контрагентов в документе. Содержит ли документ некорректных контрагентов.
	НовыеРеквизиты.Вставить("ЭтоДокументСОшибкой", 		Ложь);
	// Результат проверки контрагентов в документе. Итоговое состояние контрагентов в документе.
	НовыеРеквизиты.Вставить("СостояниеКонтрагентов", 	Перечисления.СостоянияПроверкиКонтрагентов.ПустаяСсылка());
	// Служебный реквизит
	НовыеРеквизиты.Вставить("НужноПоказатьПредложениеВключитьПроверкуКонтрагентов");
	// Позволяет не прорисовывать результат проверки контрагентов, 
	// если начато редактирование табличной части документа.
	// Позволяет избежать ошибки сброса редактируемого значений при выводе результатов проверки.
	НовыеРеквизиты.Вставить("ОтложитьПрорисовкуРезультатаПроверкиКонтрагентов", Ложь);
	// Служебный реквизит
	НовыеРеквизиты.Вставить("АдресДанныхКонтрагентовИзКэша", Неопределено);
	
	Если ЭтоДокументСКонтрагентомВШапке Тогда
		// Результат проверки контрагента в шапке документа.
		НовыеРеквизиты.Вставить("СостояниеКонтрагента", Перечисления.СостоянияПроверкиКонтрагентов.ПустаяСсылка());
	КонецЕсли;
	
	// Результат проверки контрагентов в счете-фактуре.
	Если ЭтоДокументСоСчетомФактуройВПодвале ИЛИ ЭтоСчетФактура Тогда
		// Итоговое состояние контрагентов в счете-фактуре.
		НовыеРеквизиты.Вставить("СостояниеКонтрагентовВСчетеФактуре", 	Перечисления.СостоянияПроверкиКонтрагентов.ПустаяСсылка());
		// Итоговое состояние счета-фактуры.
		НовыеРеквизиты.Вставить("ЭтоСчетФактураСОшибкой", Ложь);
	КонецЕсли;
	
	Если ЭтоСчетФактура Тогда
		
		// Состояния проверки каждого контрагента в счете-фактуре.
		Описание = ОписаниеДокументов(Форма);
		Для Каждого СтрокаОписания Из Описание Цикл
			ИмяРеквизитаСчетаФактуры = ИмяРеквизита(Форма, СтрокаОписания.Элемент.Имя);
			НовыеРеквизиты.Вставить(ИмяРеквизитаСостоянияКонтрагентаВСчетеФактуре(ИмяРеквизитаСчетаФактуры),
				Перечисления.СостоянияПроверкиКонтрагентов.ПустаяСсылка());
		КонецЦикла;
		
	КонецЕсли;
	
	РаботаСКонтрагентамиПереопределяемый.ДополнитьРеквизитыФормыДокумент(Форма, НовыеРеквизиты);
	
	Форма.РеквизитыПроверкиКонтрагентов = НовыеРеквизиты;
	
КонецПроцедуры

// Функция - Формирует описание документа, согласно которому осуществляется проверка контрагентов и вывод 
//           информации о результатах проверки в форму документа.
//
// Параметры:
//  Форма	 - УправляемаяФорма - Форма документа, в котором выполняется проверка контрагентов.
Функция ОписаниеДокументов(Форма) Экспорт
	
	ОбщееОписание = ШаблонТаблицыОписания();
	
	Если ПроверкаКонтрагентовКлиентСервер.ЭтоДокументСКонтрагентомВШапке(Форма) Тогда
		
		Описание = ШаблонТаблицыОписания();
		РаботаСКонтрагентамиПереопределяемый.СформироватьОписаниеДокументовСКонтрагентомВШапке(Форма, Описание);
		
		// Дополняем описание состоянием.
		Для Каждого СтрокаОписания Из Описание Цикл
			СтрокаОписания.СостояниеКонтрагента = Форма.РеквизитыПроверкиКонтрагентов.СостояниеКонтрагента;
		КонецЦикла;
		
		ПрисоединитьОписание(ОбщееОписание, Описание);
		
	КонецЕсли;
	
	Если ПроверкаКонтрагентовКлиентСервер.ЭтоДокументСоСчетомФактуройВПодвале(Форма) Тогда
		
		Описание = ШаблонТаблицыОписания();
		РаботаСКонтрагентамиПереопределяемый.СформироватьОписаниеДокументовСоСчетомФактуройВПодвале(Форма, Описание);
		
		// Дополняем описание состоянием.
		Для Каждого СтрокаОписания Из Описание Цикл
			СтрокаОписания.СостояниеКонтрагента = Форма.РеквизитыПроверкиКонтрагентов.СостояниеКонтрагентовВСчетеФактуре;
		КонецЦикла;
		
		ПрисоединитьОписание(ОбщееОписание, Описание);
		
	КонецЕсли;
	
	Если ПроверкаКонтрагентовКлиентСервер.ЭтоСчетФактура(Форма) Тогда
		
		Описание = ШаблонТаблицыОписания();
		РаботаСКонтрагентамиПереопределяемый.СформироватьОписаниеСчетовФактур(Форма, Описание);

		// Дополняем описание состоянием.
		Если Форма.РеквизитыПроверкиКонтрагентов <> Неопределено Тогда
			Для Каждого СтрокаОписания Из Описание Цикл
				
				ИмяРеквизитаСчетаФактуры = ИмяРеквизита(Форма, СтрокаОписания.Элемент.Имя);
				СтрокаОписания.СостояниеКонтрагента = Форма.РеквизитыПроверкиКонтрагентов[ИмяРеквизитаСостоянияКонтрагентаВСчетеФактуре(ИмяРеквизитаСчетаФактуры)];
				
			КонецЦикла;
		КонецЕсли;
		
		ПрисоединитьОписание(ОбщееОписание, Описание);
		
	КонецЕсли;
		
	Возврат ОбщееОписание;
	
КонецФункции

// Процедура - Заполнение данных контрагента в документе.
//
// Параметры:
//  Ссылка				 - ДокументСсылка - Документ, в котором выполняется проверка контрагентов.
//  ДанныеКонтрагентов	 - ТаблицаЗначений - Содержит данные проверяемых контрагентов. 
//		Структуру колонок таблицы см в функции ШаблонТаблицыДанныеКонтрагента.
//  Контрагент			 - СправочникСсылка.<Контрагенты> - Контрагент, данными которого дополняются данные таблицы
//                                                   ДанныеКонтрагентов.
//  Дата				 - Дата - Дата, на которую выполняется проверка контрагента.
//  Состояние			 - Перечисления.СостоянияСуществованияКонтрагента - Результат проверки контрагента.
Процедура ДополнитьДанныеКонтрагентовВДокументе(
			Ссылка,
			ДанныеКонтрагентов, 
			Контрагент, 
			Дата,
			Состояние = Неопределено) Экспорт
		
	// Добавляем новую строку в таблицу, только если такой строки еще нет.
	Отбор = Новый Структура("Ссылка, Контрагент, Дата", Ссылка, Контрагент, Дата);
	НайденныеСтроки = ДанныеКонтрагентов.НайтиСтроки(Отбор);
	
	Если НайденныеСтроки.Количество() = 0 Тогда
		
		ДобавитьСтрокуВДанныеКонтрагентовВДокументе(Ссылка, ДанныеКонтрагентов, Контрагент, Дата, Состояние);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - Определяет итоговое состояние контрагентов в документе.
//
// Параметры:
//  ДанныеКонтрагентов	 - ТаблицаЗначений - Содержит данные проверяемых контрагентов. 
//    Структуру колонок таблицы см в функции ШаблонТаблицыДанныеКонтрагента.
//  Отбор                - Структура - отбор, накладываемый на таблицу данные контрагента.
// 
//
// Возвращаемое значение:
//   Структура
//
Функция ИтоговоеСостояниеКонтрагентаВДокументе(ДанныеКонтрагентов, Отбор = Неопределено) Экспорт
	
	// Инициализируем
	СостояниеКонтрагента 				= ПредопределенноеЗначение("Перечисление.СостоянияСуществованияКонтрагента.ПустаяСсылка");
	
	ЕстьНепустойКонтрагент		= Ложь;
	КонтрагентовНесколько 		= Ложь;
	
	Если Отбор = Неопределено Тогда
		ДанныеПоКонтрагентам = ДанныеКонтрагентов.Скопировать();
	Иначе
		ДанныеПоКонтрагентам = ДанныеКонтрагентов.Скопировать(Отбор);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
		ДанныеПоКонтрагентам.Свернуть("Ссылка, Контрагент, ИНН, КПП, Дата, ОбластьДанныхВспомогательныеДанные, Состояние");
	Иначе
		ДанныеПоКонтрагентам.Свернуть("Ссылка, Контрагент, ИНН, КПП, Дата, Состояние");
	КонецЕсли;
		
	Если ДанныеПоКонтрагентам.Количество() = 1 Тогда
		
		ДанныеПоКонтрагенту 	= ДанныеПоКонтрагентам[0];
		ЕстьНепустойКонтрагент 	= ЗначениеЗаполнено(ДанныеПоКонтрагенту.Контрагент); 
		СостояниеКонтрагента 	= ДанныеПоКонтрагенту.Состояние;
		КонтрагентовНесколько 	= Ложь;
		
	Иначе
		
		// Прорисовываем результат проверки в счет-фактуре.
		ЕстьНедействующиеКонтрагенты 		= Ложь;
		ЕстьДействующиеКонтрагенты 			= Ложь;
		ЕстьКонтрагентыСОшибками 			= Ложь;
		ЕстьКонтрагентыНеПодлежащиеПроверке = Ложь;
		ЕстьКонтрагентыСПустымИННКПП 		= Ложь;
		
		Для каждого ДанныеПоКонтрагенту Из ДанныеПоКонтрагентам Цикл
			
			// Заполненность контрагента
			Если ЗначениеЗаполнено(ДанныеПоКонтрагенту.Контрагент) Тогда
				ЕстьНепустойКонтрагент = Истина;
			КонецЕсли;
			
			// Состояние существования
			Если ПроверкаКонтрагентовКлиентСерверПовтИсп.ЭтоСостояниеНедействующегоКонтрагента(ДанныеПоКонтрагенту.Состояние) Тогда
				ЕстьНедействующиеКонтрагенты = Истина;
			КонецЕсли;
			
			Если ПроверкаКонтрагентовКлиентСерверПовтИсп.ЭтоСостояниеДействующегоКонтрагента(ДанныеПоКонтрагенту.Состояние) 
				И ДанныеПоКонтрагенту.Состояние <> ПредопределенноеЗначение("Перечисление.СостоянияСуществованияКонтрагента.КонтрагентСодержитОшибкиВДанных")
				И ДанныеПоКонтрагенту.Состояние <> ПредопределенноеЗначение("Перечисление.СостоянияСуществованияКонтрагента.ПустаяСсылка")
				И ДанныеПоКонтрагенту.Состояние <> ПредопределенноеЗначение("Перечисление.СостоянияСуществованияКонтрагента.КонтрагентНеПодлежитПроверке") Тогда
				ЕстьДействующиеКонтрагенты = Истина;
			КонецЕсли;
			
			Если ДанныеПоКонтрагенту.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияСуществованияКонтрагента.КонтрагентСодержитОшибкиВДанных") Тогда
				ЕстьКонтрагентыСОшибками = Истина;
			КонецЕсли;
			
			Если ДанныеПоКонтрагенту.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияСуществованияКонтрагента.КонтрагентНеПодлежитПроверке") Тогда
				ЕстьКонтрагентыНеПодлежащиеПроверке = Истина;
			КонецЕсли;
			
			Если ДанныеПоКонтрагенту.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияСуществованияКонтрагента.ПустойИННИлиКПП") Тогда
				ЕстьКонтрагентыСПустымИННКПП = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЕстьНепустойКонтрагент Тогда
			КонтрагентовНесколько = Истина;
		КонецЕсли;
		
		Если НЕ ЕстьНедействующиеКонтрагенты И НЕ ЕстьДействующиеКонтрагенты И НЕ ЕстьКонтрагентыСОшибками Тогда
			// Контрагент не проверен
		    СостояниеКонтрагента = ПредопределенноеЗначение("Перечисление.СостоянияСуществованияКонтрагента.ПустаяСсылка");
		ИначеЕсли ЕстьНедействующиеКонтрагенты Тогда
			СостояниеКонтрагента = ПредопределенноеЗначение("Перечисление.СостоянияСуществованияКонтрагента.КонтрагентОтсутствуетВБазеФНС");
		ИначеЕсли ЕстьКонтрагентыСОшибками Тогда
			СостояниеКонтрагента = ПредопределенноеЗначение("Перечисление.СостоянияСуществованияКонтрагента.КонтрагентСодержитОшибкиВДанных");
		ИначеЕсли ЕстьКонтрагентыНеПодлежащиеПроверке Тогда
			СостояниеКонтрагента = ПредопределенноеЗначение("Перечисление.СостоянияСуществованияКонтрагента.КонтрагентНеПодлежитПроверке");
		ИначеЕсли ЕстьКонтрагентыСПустымИННКПП Тогда
			СостояниеКонтрагента = ПредопределенноеЗначение("Перечисление.СостоянияСуществованияКонтрагента.ПустойИННИлиКПП");
		Иначе
			СостояниеКонтрагента = ПредопределенноеЗначение("Перечисление.СостоянияСуществованияКонтрагента.КонтрагентЕстьВБазеФНС");
		КонецЕсли;
		
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("КонтрагентЗаполнен", 	ЕстьНепустойКонтрагент);
	Результат.Вставить("СостояниеКонтрагента", 	СостояниеКонтрагента);
	Результат.Вставить("КонтрагентовНесколько", КонтрагентовНесколько);
	
	Возврат Результат;
	
КонецФункции


#КонецОбласти

#Область ПроверкаКонтрагентовВОтчетах

// Процедура - Инициализация данных для проверки.
//
// Параметры:
//  Форма	 - УправляемаяФорма - Форма отчета, в котором выполняется проверка контрагентов.
Процедура ПередФормированиемОтчета(Форма) Экспорт
	
	Если Форма.РеквизитыПроверкиКонтрагентов.ПроверкаИспользуется Тогда
		Форма.РеквизитыПроверкиКонтрагентов.ЕстьДоступКВебСервисуФНС = ЕстьДоступКВебСервисуФНС();
		Форма.РеквизитыПроверкиКонтрагентов.ВыведеныВсеСтроки = Истина;
		Форма.ПроверкаКонтрагентовПереключательРежимаОтображения = "Все";
		Форма.ПроверкаКонтрагентовНедействующиеКонтрагенты.Очистить();
	КонецЕсли;
	
КонецПроцедуры

// Процедура - Добавление контрагента на проверку.
//
// Параметры:
//  СтруктураПараметров				 - Структура - Параметры формирования отчета. 
//		Для проверки контрагентов в отчете важно наличие ключа "ДанныеДляПроверкиКонтрагентов".
//		Данный ключ формируется в процедуре ДобавитьПараметрыДляПроверкиКонтрагентов.
//  НомерСтрокиТабличногоДокумента	 - Число - Номер строки табличного документа, содержащей контрагент.
//  Контрагент						 - СправочникСсылка - Проверяемый контрагент в строке отчета.
//  ИНН								 - Строка - ИНН контрагента.
//  КПП								 - Строка - ИНН контрагента.
//  Дата							 - Дата - Дата, на которую необходимо выполнять проверку контрагента.
Процедура ДобавитьКонтрагентаНаПроверку(СтруктураПараметров, НомерСтрокиТабличногоДокумента, Контрагент, ИНН, КПП, Дата) Экспорт
	
	ДанныеДляПроверкиКонтрагентов = СтруктураПараметров.ДанныеДляПроверкиКонтрагентов;
	
	// Если проверка не включена, то не добавляем контрагентов на проверку.
	Если НЕ ДанныеДляПроверкиКонтрагентов.ПроверкаКонтрагентовИспользуется Тогда
		Возврат;
	КонецЕсли;
	
	НедействующиеКонтрагенты = ДанныеДляПроверкиКонтрагентов.НедействующиеКонтрагенты;
	
	// Проверяем условия, при которых добавлять контрагентов на проверку не нужно.
	Если НедействующиеКонтрагенты = Неопределено
		ИЛИ НЕ ЗначениеЗаполнено(Контрагент) 
		ИЛИ ДанныеДляПроверкиКонтрагентов.ВыводитьТолькоНекорректныхКонтрагентов Тогда
		Возврат;
	КонецЕсли;
	
	// Проверка заполненности даты события.
	Если НЕ ЗначениеЗаполнено(Дата) Тогда
		Возврат;
	КонецЕсли;
	
	НоваяСтрока = НедействующиеКонтрагенты.Добавить();
	НоваяСтрока.СтрокаТабличногоДокумента 	= НомерСтрокиТабличногоДокумента;
	НоваяСтрока.Контрагент 					= Контрагент;
	НоваяСтрока.Дата 						= НачалоДня(Дата);
	НоваяСтрока.ИНН 						= ИНН;
	НоваяСтрока.КПП 						= КПП;
	
КонецПроцедуры

// Функция - Определяет, нужно ли выводить данную строку в отчете по некорректным контрагентам.
//
// Параметры:
//  СтруктураПараметров	 - Структура - Параметры формирования отчета. 
//		Для проверки контрагентов в отчете важно наличие ключа "ДанныеДляПроверкиКонтрагентов".
//		Данный ключ формируется в процедуре ДобавитьПараметрыДляПроверкиКонтрагентов.
//  Контрагент						 - СправочникСсылка - Проверяемый контрагент в строке отчета.
//  ИНН								 - Строка - ИНН контрагента.
//  КПП								 - Строка - ИНН контрагента.
//  Дата							 - Дата - Дата, на которую необходимо выполнять проверку контрагента.
// Возвращаемое значение:
// Булево - Истина, если данную строку необходимо выводить в отчете по некорректным контрагентам.
Функция ВыводитьСтрокуОтчета(СтруктураПараметров, Контрагент, ИНН, КПП, Дата) Экспорт
	
	Если НЕ ЭтоОтчетПоНекорректнымКонтрагентам(СтруктураПараметров) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ВыводитьСтроку			= Истина;
	СтандартнаяОбработка 	= Истина;
	РаботаСКонтрагентамиПереопределяемый.ОпределитьНужноЛиВыводитьСтрокуОтчета(
		СтруктураПараметров, Контрагент, ИНН, КПП, Дата, ВыводитьСтроку, СтандартнаяОбработка);
	
	// Если действия переопределили, то стандартную обработку не выполняем.
	Если НЕ СтандартнаяОбработка Тогда
		Возврат ВыводитьСтроку;
	КонецЕсли;
	
	ДанныеДляПроверкиКонтрагентов = СтруктураПараметров.ДанныеДляПроверкиКонтрагентов;
	НедействующиеКонтрагенты = ДанныеДляПроверкиКонтрагентов.НедействующиеКонтрагенты;
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Контрагент", Контрагент);
	СтруктураОтбора.Вставить("ИНН", ИНН);
	СтруктураОтбора.Вставить("КПП", КПП);
	СтруктураОтбора.Вставить("Дата", НачалоДня(Дата));
	
	ВыводитьСтроку = НедействующиеКонтрагенты.НайтиСтроки(СтруктураОтбора).Количество() > 0;
	
	Возврат ВыводитьСтроку;
	
КонецФункции

// Процедура - Запоминает данные отчета полученные при первоначальном формировании отчета
// 		и используемые в дальнейшем для проверки контрагентов в отчете.
//
// Параметры:
//  СтруктураПараметров	 - Структура - Параметры формирования отчета. 
//		Для проверки контрагентов в отчете важно наличие ключа "ДанныеДляПроверкиКонтрагентов".
//		Данный ключ формируется в процедуре ДобавитьПараметрыДляПроверкиКонтрагентов.
//  ДанныеОтчета		 - РезультатЗапроса - Данные отчета полученные при первоначальном формировании отчета
// 		и используемые в дальнейшем для проверки контрагентов.
Процедура ЗапомнитьДанныеОтчета(СтруктураПараметров, ДанныеОтчета) Экспорт
	
	Если СтруктураПараметров.Свойство("ДанныеДляПроверкиКонтрагентов") 
		И СтруктураПараметров.ДанныеДляПроверкиКонтрагентов.ПроверкаКонтрагентовИспользуется
		И НЕ СтруктураПараметров.ДанныеДляПроверкиКонтрагентов.ВыводитьТолькоНекорректныхКонтрагентов 
		И СтруктураПараметров.ДанныеДляПроверкиКонтрагентов.Свойство("ПроверкаКонтрагентовАдресДанныхОтчета") Тогда
		
		СтруктураПараметров.ДанныеДляПроверкиКонтрагентов.ПроверкаКонтрагентовАдресДанныхОтчета = 
			ПоместитьВоВременноеХранилище(ДанныеОтчета, СтруктураПараметров.ДанныеДляПроверкиКонтрагентов.ПроверкаКонтрагентовАдресДанныхОтчета);
	КонецЕсли; 
	
КонецПроцедуры

// Процедура - Сохранение таблицы с контрагентами, участвующими в отчете.
//
// Параметры:
//  Форма				 - УправляемаяФорма - Форма отчета, в котором выполняется проверка контрагентов.
//  РезультатВыполнения	 - Структура - Результат формирования отчета, содержащий свойство ДанныеДляПроверкиКонтрагентов.
Процедура ЗапомнитьРезультатФормированияОтчета(Форма, РезультатВыполнения) Экспорт
	
	Если Форма.РеквизитыПроверкиКонтрагентов.ПроверкаИспользуется И РезультатВыполнения.Свойство("ДанныеДляПроверкиКонтрагентов") Тогда
		
		ДанныеДляПроверкиКонтрагентов = РезультатВыполнения.ДанныеДляПроверкиКонтрагентов;
		
		Если ДанныеДляПроверкиКонтрагентов.Свойство("ПроверкаКонтрагентовАдресДанныхОтчета") Тогда
			Форма.РеквизитыПроверкиКонтрагентов.АдресДанныхОтчета = ДанныеДляПроверкиКонтрагентов.ПроверкаКонтрагентовАдресДанныхОтчета;
		КонецЕсли;
		
		Форма.ЗначениеВРеквизитФормы(ДанныеДляПроверкиКонтрагентов.НедействующиеКонтрагенты, "ПроверкаКонтрагентовНедействующиеКонтрагенты");
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - Добавление в параметры формирования отчета данных, необходимых для проверки контрагентов в отчете.
//
// Параметры:
//  Форма						 - УправляемаяФорма - Форма отчета, в котором выполняется проверка контрагентов.
//  ПараметрыОтчета				 - Структура - Параметры формирования отчета.
//  ЭтоПервоеФормированиеОтчета	 - Булево - Истина, если это формирование отчета перед проверкой контрагентов
//		Ложь, если это формирование отчета при проверке контрагентов.
//  ПолныйОтчет					 - ТабличныйДокумент - Табличный документ, содержащий в себе сформированный отчет 
// 		в исходном виде (до проверки контрагентов). Если ЭтоПервоеФормированиеОтчета = Истина, то ПолныйОтчет можно не
// 		передавать.
Процедура ДобавитьПараметрыДляПроверкиКонтрагентов(Форма, ПараметрыОтчета, ЭтоПервоеФормированиеОтчета, ПолныйОтчет = Неопределено) Экспорт
	
	ДанныеДляПроверкиКонтрагентов = Новый Структура;
	ДанныеДляПроверкиКонтрагентов.Вставить("ПроверкаКонтрагентовИспользуется", Форма.РеквизитыПроверкиКонтрагентов.ПроверкаИспользуется);
	
	Если ЭтоПервоеФормированиеОтчета Тогда
		ДанныеДляПроверкиКонтрагентов.Вставить("ПроверкаКонтрагентовАдресДанныхОтчета", ПоместитьВоВременноеХранилище(Неопределено, Форма.УникальныйИдентификатор));
	Иначе
		ДанныеДляПроверкиКонтрагентов.Вставить("ДанныеОтчета", 	ПолучитьИзВременногоХранилища(Форма.РеквизитыПроверкиКонтрагентов.АдресДанныхОтчета));
		ДанныеДляПроверкиКонтрагентов.Вставить("ПолныйОтчет",	ПолныйОтчет);
	КонецЕсли;
	
	ДанныеДляПроверкиКонтрагентов.Вставить("НедействующиеКонтрагенты",
		Форма.РеквизитФормыВЗначение("ПроверкаКонтрагентовНедействующиеКонтрагенты", Тип("ТаблицаЗначений")));
	ДанныеДляПроверкиКонтрагентов.Вставить("ВыводитьТолькоНекорректныхКонтрагентов",	НЕ ЭтоПервоеФормированиеОтчета);
	
	ПараметрыОтчета.Вставить("ДанныеДляПроверкиКонтрагентов", ДанныеДляПроверкиКонтрагентов);
	
КонецПроцедуры

// Функция - Определяем, формируется ли отчет стандартным способом.
//
// Параметры:
//  СтруктураПараметров	 - Структура - Параметры формирования отчета. 
//		Для проверки контрагентов в отчете важно наличие ключа "ДанныеДляПроверкиКонтрагентов".
//		Данный ключ формируется в процедуре ДобавитьПараметрыДляПроверкиКонтрагентов.
//  ДанныеОтчета		 - РезультатЗапроса - Данные отчета полученные при первоначальном формировании отчета
// 		и используемые в дальнейшем для проверки контрагентов.
// Возвращаемое значение:
//  Булево - Истина, если это формирование отчета до проверки контрагентов.
Функция ФормироватьОтчетСтандартнымСпособом(СтруктураПараметров, ДанныеОтчета) Экспорт
	
	ФормироватьОтчетСтандартнымСпособом = Истина;
	ДанныеДляПроверкиКонтрагентов = СтруктураПараметров.ДанныеДляПроверкиКонтрагентов;
	Если ДанныеДляПроверкиКонтрагентов.ПроверкаКонтрагентовИспользуется И ДанныеДляПроверкиКонтрагентов.ВыводитьТолькоНекорректныхКонтрагентов Тогда
		ДанныеОтчета = ДанныеДляПроверкиКонтрагентов.ДанныеОтчета;
		ФормироватьОтчетСтандартнымСпособом = Ложь;
	КонецЕсли;
	
	Возврат ФормироватьОтчетСтандартнымСпособом;
	
КонецФункции

// Процедура - Дополнение результата формирования отчета результатами проверки контрагентов.
//
// Параметры:
//  РезультатФормирования	 - Структура - Результат формирования отчета.
//  СтруктураПараметров		 - Структура - Результат проверки контрагентов.
//
Процедура ДополнитьРезультатФормированияОтчетаДаннымиПоПроверкеКонтрагентов(РезультатФормирования, СтруктураПараметров) Экспорт
	
	ДанныеДляПроверкиКонтрагентов = СтруктураПараметров.ДанныеДляПроверкиКонтрагентов;
	РезультатФормирования.Вставить("ДанныеДляПроверкиКонтрагентов", ДанныеДляПроверкиКонтрагентов);
	
КонецПроцедуры

// Процедура - Метод фонового задания по проверке контрагентов в отчете.
//
// Параметры:
//  СтруктураПараметров	 - Структура - Параметры формирования отчета. 
//		Для проверки контрагентов в отчете важно наличие ключа "ДанныеДляПроверкиКонтрагентов".
//		Данный ключ формируется в процедуре ДобавитьПараметрыДляПроверкиКонтрагентов.
//  АдресХранилища		 - Строка - Адрес временного хранилища, в который помещается результат
//		выполнения фонового задания по проверке контрагентов.
//
Процедура ОпределитьНедействующихКонтрагентовВОтчетеФоновоеЗадание(СтруктураПараметров, АдресХранилища) Экспорт
	
	ДанныеДляПроверкиКонтрагентов 	= СтруктураПараметров.ДанныеДляПроверкиКонтрагентов;
	ПолныйОтчет 					= ДанныеДляПроверкиКонтрагентов.ПолныйОтчет; 
	
	Если ЕстьДоступКВебСервисуФНС() Тогда
		
		// Проверяем контрагентов на корректность.
		ПроверяемыеКонтрагенты = ДанныеДляПроверкиКонтрагентов.НедействующиеКонтрагенты;
		
		Если НедействующиеКонтрагентыОпределены(ПроверяемыеКонтрагенты) Тогда
			
			Если ПроверяемыеКонтрагенты.Количество() > 0 Тогда
				
				ВыделитьКонтрагентовСОшибкамиВОтчете(ПроверяемыеКонтрагенты, ПолныйОтчет);
				
				ДанныеДляПроверкиКонтрагентов.НедействующиеКонтрагенты = ПроверяемыеКонтрагенты;
					
				// Формируем отчет, в котором оставляем только некорректных контрагентов.
				ПроверкаКонтрагентовОтчетПоНекорректнымКонтрагентам = Новый ТабличныйДокумент;
				РаботаСКонтрагентамиПереопределяемый.СформироватьОтчет(СтруктураПараметров, ПроверкаКонтрагентовОтчетПоНекорректнымКонтрагентам);
				
				Результат = Новый Структура;
				Результат.Вставить("НедействующиеКонтрагенты", 			ПроверяемыеКонтрагенты);
				// Отчет, содержащий только некорректных контрагентов.
				Результат.Вставить("ПроверкаКонтрагентовОтчетПоНекорректнымКонтрагентам", 	ПроверкаКонтрагентовОтчетПоНекорректнымКонтрагентам); 
				// Отчет, содержащий всех контрагентов; некорректные подсвечены красным.
				Результат.Вставить("РезультатФормированияОтчета", 		ПолныйОтчет);

			Иначе
				
				Результат = Новый Структура;
				Результат.Вставить("НедействующиеКонтрагенты", 			ПроверяемыеКонтрагенты);
				Результат.Вставить("ПроверкаКонтрагентовОтчетПоНекорректнымКонтрагентам", 	Новый ТабличныйДокумент);
				Результат.Вставить("РезультатФормированияОтчета", 		ПолныйОтчет);// Исходный отчет без изменений.
				
			КонецЕсли;
			
		Иначе
			
			Результат = Новый Структура;
			Результат.Вставить("НетДоступаКВебСервисуФНС", Истина);
			
		КонецЕсли;
		
	Иначе
		Результат = Новый Структура;
		Результат.Вставить("НетДоступаКВебСервисуФНС", Истина);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

// Процедура - Запуск фонового задания по проверке контрагентов в отчете.
//
// Параметры:
//  Форма				 - УправляемаяФорма - Форма отчета, в котором выполняется проверка контрагентов.
//  СтруктураПараметров	 - Структура - Параметры формирования отчета. 
//		Для проверки контрагентов в отчете важно наличие ключа "ДанныеДляПроверкиКонтрагентов".
//		Данный ключ формируется в процедуре ДобавитьПараметрыДляПроверкиКонтрагентов.
Процедура ПроверитьКонтрагентовВОтчете(Форма, СтруктураПараметров) Экспорт
	
	Форма.РеквизитыПроверкиКонтрагентов.ИдентификаторЗадания = Неопределено;
	
	Если Форма.РеквизитыПроверкиКонтрагентов.ОтчетПоНекорректнымКонтрагентам <> Неопределено Тогда
		Форма.РеквизитыПроверкиКонтрагентов.ОтчетПоНекорректнымКонтрагентам.Очистить();
	КонецЕсли;
	
	НаименованиеЗадания = НСтр("ru = 'Проверка контрагентов в отчете'");
	
	РезультатПроверки = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
		Форма.УникальныйИдентификатор,
		"ПроверкаКонтрагентов.ОпределитьНедействующихКонтрагентовВОтчетеФоновоеЗадание",
		СтруктураПараметров,
		НаименованиеЗадания);

	Форма.РеквизитыПроверкиКонтрагентов.АдресХранилища       = РезультатПроверки.АдресХранилища;
	Форма.РеквизитыПроверкиКонтрагентов.ИдентификаторЗадания = РезультатПроверки.ИдентификаторЗадания;
	Форма.РеквизитыПроверкиКонтрагентов.ЗаданиеВыполнено     = РезультатПроверки.ЗаданиеВыполнено;
	
КонецПроцедуры

// Процедура - Отображение результата проверки контрагента в отчете.
//
// Параметры:
//  Форма				 		 - УправляемаяФорма - Форма отчета, в котором выполняется проверка контрагентов.
//  ПолеТабличногоДокумента		 - ПолеФормы с видом ПолеТабличногоДокумента - поле, в которое необходимо выводить отчет.
//  РезультатФормированияОтчета	 - ТабличныйДокумент - Документ, предназначенный для вывода в поле формы.
Процедура ОтобразитьРезультатПроверкиКонтрагентаВОтчете(Форма, ПолеТабличногоДокумента, РезультатФормированияОтчета) Экспорт

	РезультатПроверки = ПолучитьИзВременногоХранилища(Форма.РеквизитыПроверкиКонтрагентов.АдресХранилища);
	
	Если РезультатПроверки.Свойство("НетДоступаКВебСервисуФНС") Тогда
		// Не удалось проверить контрагентов.
		Форма.РеквизитыПроверкиКонтрагентов.ЕстьДоступКВебСервисуФНС = Ложь;
	Иначе
		// Множество некорректных контрагентов.
		Форма.ЗначениеВРеквизитФормы(
			РезультатПроверки.НедействующиеКонтрагенты, "ПроверкаКонтрагентовНедействующиеКонтрагенты");
		// Отчет, содержащий только некорректных контрагентов.
		Форма.РеквизитыПроверкиКонтрагентов.ОтчетПоНекорректнымКонтрагентам = 
			РезультатПроверки.ПроверкаКонтрагентовОтчетПоНекорректнымКонтрагентам;
		// Отчет, содержащий всех контрагентов, некорректные подсвечены красным.
		РезультатФормированияОтчета = 
			РезультатПроверки.РезультатФормированияОтчета; 
	КонецЕсли;
	Форма.РеквизитыПроверкиКонтрагентов.ПроверкаВыполнялась = Истина;
	
	СтандартнаяОбработка = Истина;
	РаботаСКонтрагентамиПереопределяемый.ОтобразитьРезультатПроверкиКонтрагентаВОтчете(Форма, СтандартнаяОбработка);
	
	// Если действия по отображению результата проверки переопределили, то стандартную обработку не выполняем.
	Если НЕ СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКонтрагентовКлиентСервер.ВывестиНужнуюПанельПроверкиКонтрагентовВОтчете(Форма);
	ВывестиОтчет(Форма, ПолеТабличногоДокумента, РезультатФормированияОтчета);
	
КонецПроцедуры

// Процедура - Вывод результата проверки контрагента в поле табличного документа.
//
// Параметры:
//  Форма				 		 - УправляемаяФорма - Форма отчета, в котором выполняется проверка контрагентов.
//  ПолеТабличногоДокумента		 - ПолеФормы с видом ПолеТабличногоДокумента - поле, в которое необходимо выводить отчет.
//  РезультатФормированияОтчета	 - ТабличныйДокумент - Документ, предназначенный для вывода в поле формы.
Процедура ВывестиОтчет(Форма, ПолеТабличногоДокумента, РезультатФормированияОтчета) Экспорт
	
	СтандартнаяОбработка = Истина;
	
	РаботаСКонтрагентамиПереопределяемый.ВывестиОтчет(Форма, ПолеТабличногоДокумента, РезультатФормированияОтчета, СтандартнаяОбработка);
		
	// Если действия переопределили, то стандартную обработку не выполняем.
	Если НЕ СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	ПолеТабличногоДокумента.Очистить();
		
	Если Форма.РеквизитыПроверкиКонтрагентов.ПроверкаИспользуется
		// Пользователь выбрал режим просмотра - "Только контрагенты с ошибками".
		И НЕ Форма.РеквизитыПроверкиКонтрагентов.ВыведеныВсеСтроки Тогда
		
		// Выводим только контрагентов с ошибками.
		ПолеТабличногоДокумента.Вывести(Форма.РеквизитыПроверкиКонтрагентов.ОтчетПоНекорректнымКонтрагентам);
	Иначе
		ПолеТабличногоДокумента.Вывести(РезультатФормированияОтчета);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - Отображение результата проверки контрагента в отчете.
//
// Параметры:
//  Форма				 		 - УправляемаяФорма - Форма отчета, в котором выполняется проверка контрагентов.
//  ПолеТабличногоДокумента		 - ПолеФормы с видом ПолеТабличногоДокумента - поле, в которое необходимо выводить отчет.
//  РезультатФормированияОтчета	 - ТабличныйДокумент - Документ, предназначенный для вывода в поле формы.
Процедура ПереключитьРежимОтображенияОтчета(Форма, ПолеТабличногоДокумента, РезультатФормированияОтчета) Экспорт
	
	Форма.РеквизитыПроверкиКонтрагентов.ВыведеныВсеСтроки = НЕ Форма.РеквизитыПроверкиКонтрагентов.ВыведеныВсеСтроки;
	
	ПроверкаКонтрагентовКлиентСервер.УстановитьВидПанелиПроверкиКонтрагентовВОтчете(Форма, "НайденыНекорректныеКонтрагенты");
	
	ВывестиОтчет(Форма, ПолеТабличногоДокумента, РезультатФормированияОтчета);
	
КонецПроцедуры

// Процедура - Устанавливается вид панели с результатом проверки.
//
// Параметры:
//  Форма	 - УправляемаяФорма - Форма отчета, в котором выполняется проверка контрагентов.
Процедура ПриСозданииНаСервереОтчет(Форма) Экспорт
	
	ИнициализироватьРеквизитыФормыОтчета(Форма);
	
	Форма.РеквизитыПроверкиКонтрагентов.ПроверкаИспользуется = ПроверкаКонтрагентовВызовСервера.ИспользованиеПроверкиВозможно();
	Форма.РеквизитыПроверкиКонтрагентов.НужноПоказатьПредложениеВключитьПроверкуКонтрагентов =
		НужноПоказатьПредложениеВключитьПроверкуКонтрагентов();
		
	УстановитьНадписиВПанелиОтчетаПриСозданииНаСервере(Форма);
	ПроверкаКонтрагентовКлиентСервер.УстановитьВидПанелиПроверкиКонтрагентовВОтчете(Форма);
	
КонецПроцедуры

// Процедура - Вспомогательный API. Инициализировать реквизиты проверки контрагента в форме отчета.
//
// Параметры:
//  Форма	 - УправляемаяФорма - Форма отчета, в котором выполняется проверка контрагентов.
Процедура ИнициализироватьРеквизитыФормыОтчета(Форма) Экспорт
	
	НовыеРеквизиты = Новый Структура;
	
	// Служебный реквизит для работы фонового задания.
	НовыеРеквизиты.Вставить("АдресХранилища");
	// Служебный реквизит для работы фонового задания.
	НовыеРеквизиты.Вставить("ИдентификаторЗадания", 	Новый УникальныйИдентификатор);
	// Служебный реквизит для работы фонового задания.
	НовыеРеквизиты.Вставить("ЗаданиеВыполнено", 		Истина);
	// Служебный реквизит для отображения отчета.
	НовыеРеквизиты.Вставить("ВыведеныВсеСтроки", 		Истина);
	// Служебный реквизит для отображения отчета.
	НовыеРеквизиты.Вставить("ПроверкаВыполнялась", 		Ложь);
	// Служебный реквизит для отображения отчета.
	НовыеРеквизиты.Вставить("АдресДанныхОтчета");
	// Наличие доступа к сервису проверки.
	НовыеРеквизиты.Вставить("ЕстьДоступКВебСервисуФНС", Истина);
	// Включена ли проверка и есть ли доступ на использование проверки.
	НовыеРеквизиты.Вставить("ПроверкаИспользуется", 	Ложь);
	// Табличный документ, отчет, содержащий только некорректных контрагентов.
	НовыеРеквизиты.Вставить("ОтчетПоНекорректнымКонтрагентам", 	Новый ТабличныйДокумент);
	// Служебный реквизит
	НовыеРеквизиты.Вставить("НужноПоказатьПредложениеВключитьПроверкуКонтрагентов");

	Форма.РеквизитыПроверкиКонтрагентов = НовыеРеквизиты;
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаКонтрагентовВСправочнике

// Процедура - Проверка наличия доступа к проверке контрагентов, запуск проверки.
//
// Параметры:
//  Форма	 - УправляемаяФорма - Карточка контрагента.
Процедура ПриСозданииНаСервереКонтрагент(Форма, Параметры) Экспорт
	
	ИнициализироватьРеквизитыФормыКонтрагент(Форма);
	
	// Определение объекта и ссылки.
	ОбъектИСсылкаПоФорме 	= ПроверкаКонтрагентовКлиентСервер.ОбъектИСсылкаПоФорме(Форма);
	КонтрагентОбъект 		= ОбъектИСсылкаПоФорме.Объект;
	КонтрагентСсылка 		= ОбъектИСсылкаПоФорме.Ссылка;
	
	ПроверкаКонтрагентовИспользуется = ПроверкаКонтрагентовВызовСервера.ИспользованиеПроверкиВозможно();
	
	Форма.РеквизитыПроверкиКонтрагентов.ПроверкаИспользуется = ПроверкаКонтрагентовИспользуется;
	Форма.РеквизитыПроверкиКонтрагентов.НужноПоказатьПредложениеВключитьПроверкуКонтрагентов =
		НужноПоказатьПредложениеВключитьПроверкуКонтрагентов();
	
	Если ПроверкаКонтрагентовИспользуется Тогда
		
		СвойстваСправочникаКонтрагенты = ПроверкаКонтрагентовКлиентСервер.СвойстваСправочникаКонтрагенты();
			
		ИНН = КонтрагентОбъект[СвойстваСправочникаКонтрагенты.ИНН];
		КПП = КонтрагентОбъект[СвойстваСправочникаКонтрагенты.КПП];
	
		Форма.РеквизитыПроверкиКонтрагентов.СостояниеКонтрагента = 
			ПроверкаКонтрагентовВызовСервера.ТекущееСохраненноеСостояниеКонтрагента(КонтрагентСсылка, ИНН, КПП);
		
		Если ЗначениеЗаполнено(Форма.РеквизитыПроверкиКонтрагентов.СостояниеКонтрагента) Тогда
			ПроверкаКонтрагентовКлиентСервер.ОтобразитьРезультатПроверкиКонтрагентаВСправочнике(Форма);
		Иначе
			
			Если ЗначениеЗаполнено(КонтрагентСсылка) ИЛИ ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
				
				ПроверкаКонтрагентовКлиентСервер.ПроверитьКонтрагентаИзКарточки(Форма, Истина);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - Устанавливаются параметры динамического списка документов.
//
// Параметры:
//  Список	 - ДинамическийСписок - Список документов.
Процедура ПриСозданииНаСервереСписокКонтрагентов(Список) Экспорт
	
	УстановитьПараметрыДинамическогоСписка(Список);
	УстановитьУсловноеОформлениеСпискаКонтрагентов(Список);
	
	Состояния = Новый Массив;
	Состояния.Добавить(Перечисления.СостоянияСуществованияКонтрагента.КППНеСоответствуетДаннымБазыФНС);
	Состояния.Добавить(Перечисления.СостоянияСуществованияКонтрагента.КонтрагентОтсутствуетВБазеФНС);
	Состояния.Добавить(Перечисления.СостоянияСуществованияКонтрагента.НеДействуетИлиИзмененКПП);
	
	Список.Параметры.УстановитьЗначениеПараметра("Состояния", Состояния);
	
КонецПроцедуры

// Процедура - Добавляет в дополнительные свойства результат проверки контрагента
//	для последующей записи его в регистр в подписке на событие.
//
// Параметры:
//  Форма	 - УправляемаяФорма - Форма карточки контрагента.
//  Объект	 - ДанныеФормыСтруктура - Контрагент-объект
Процедура ПередЗаписьюНаСервереКонтрагент(Форма, Объект) Экспорт
	
	Если Форма.РеквизитыПроверкиКонтрагентов.ПроверкаИспользуется Тогда
		
		Объект.ДополнительныеСвойства.Вставить("ПроверкаКонтрагентовСостояниеКонтрагента", Форма.РеквизитыПроверкиКонтрагентов.СостояниеКонтрагента);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - Вспомогательный API. Инициализировать реквизиты проверки контрагента в карточке контрагента.
//
// Параметры:
//  Форма	 - УправляемаяФорма - Карточка контрагента, проверка которого выполняется.
Процедура ИнициализироватьРеквизитыФормыКонтрагент(Форма) Экспорт
	
	НовыеРеквизиты = Новый Структура;
	
	// Результат проверки контрагента.
	НовыеРеквизиты.Вставить("СостояниеКонтрагента");
	// Включена ли проверка и есть ли доступ на использование проверки.
	НовыеРеквизиты.Вставить("ПроверкаИспользуется", 		Ложь);
	// Служебный реквизит для работы фонового задания.
	НовыеРеквизиты.Вставить("ИнтервалПроверкиРезультата", 	1);
	// Служебный реквизит для работы фонового задания.
	НовыеРеквизиты.Вставить("ИдентификаторЗадания", 		Новый УникальныйИдентификатор);
	// Служебный реквизит для работы фонового задания.
	НовыеРеквизиты.Вставить("ФоновоеЗаданиеЗапущено", 		Ложь);
	// Служебный реквизит для работы фонового задания.
	НовыеРеквизиты.Вставить("АдресХранилища");
	// Служебный реквизит
	НовыеРеквизиты.Вставить("НужноПоказатьПредложениеВключитьПроверкуКонтрагентов");
	
	РаботаСКонтрагентамиПереопределяемый.ДополнитьРеквизитыФормыКонтрагент(Форма, НовыеРеквизиты);
	
	Форма.РеквизитыПроверкиКонтрагентов = НовыеРеквизиты;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСРегистромСостоянияКонтрагентов

// Процедура - Вспомогательный API. Позволяет очистить регистр СостоянияКонтрагентов.
//
// Параметры:
//  Контрагенты	 - Массив - Массив контрагентов. Если нужно очистить весь регистр, то параметр не указывается.
Процедура УдалитьРезультатПроверкиКонтрагентов(Контрагенты = Неопределено) Экспорт 
	
	НачатьТранзакцию();
	
	Попытка
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	СостоянияКонтрагентов.Контрагент,
			|	ЗНАЧЕНИЕ(Перечисление.СостоянияСуществованияКонтрагента.ПустаяСсылка) КАК Состояние,
			|	СостоянияКонтрагентов.ОбластьДанныхВспомогательныеДанные,
			|	СостоянияКонтрагентов.ИНН,
			|	СостоянияКонтрагентов.КПП
			|ИЗ
			|	РегистрСведений.СостоянияКонтрагентов КАК СостоянияКонтрагентов
			|ГДЕ
			|	(&ОчищатьПоВсемКонтрагентам
			|			ИЛИ СостоянияКонтрагентов.Контрагент В (&Контрагенты))";
			
		Если НЕ ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
		
			Запрос.Текст = СтрЗаменить(
				Запрос.Текст,
				"СостоянияКонтрагентов.ОбластьДанныхВспомогательныеДанные,",
				"");
			
		КонецЕсли;
			
		Если Контрагенты = Неопределено Тогда
			Запрос.УстановитьПараметр("ОчищатьПоВсемКонтрагентам", 	Истина);
			Запрос.УстановитьПараметр("Контрагенты", 				Новый Массив);
		Иначе
			Запрос.УстановитьПараметр("ОчищатьПоВсемКонтрагентам", 	Ложь);
			Запрос.УстановитьПараметр("Контрагенты", 				Контрагенты);
		КонецЕсли;

		УстановитьПривилегированныйРежим(Истина);
		ДанныеКонтрагентов = Запрос.Выполнить().Выгрузить();
		
	 	НаборЗаписей = РегистрыСведений.СостоянияКонтрагентов.СоздатьНаборЗаписей();
		НаборЗаписей.Загрузить(ДанныеКонтрагентов);
		НаборЗаписей.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		КодОсновногоЯзыка = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка(); // Для записи события в журнал регистрации.
		ЗаписьЖурналаРегистрации(
		НСтр("ru = 'Проверка контрагентов.Очистка состояний контрагентов'", КодОсновногоЯзыка), 
		УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСРегистромДокументыСОшибкамиПроверкиКонтрагентов

// Процедура - Вспомогательный API. Позволяет очистить регистр ДокументыСОшибкамиПроверкиКонтрагентов.
//
// Параметры:
//  Документы	 - Массив - Документы, по которым нужно очистить результат проверки.
//		Если нужно очистить весь регистр, то параметр не указывается.
Процедура УдалитьРезультатПроверкиКонтрагентовПоДокументам(Документы = Неопределено) Экспорт 
	
	НачатьТранзакцию();
	
	Попытка
		
		УстановитьПривилегированныйРежим(Истина);
		
		Если Документы = Неопределено Тогда
			
			НаборЗаписей = РегистрыСведений.ДокументыСОшибкамиПроверкиКонтрагентов.СоздатьНаборЗаписей();
			НаборЗаписей.Записать();
			
		Иначе
			
			Для каждого Документ Из Документы Цикл
				
				НаборЗаписей = РегистрыСведений.ДокументыСОшибкамиПроверкиКонтрагентов.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Документ.Установить(Документ);
				НаборЗаписей.Очистить();
				НаборЗаписей.Записать();
				
			КонецЦикла;
			
		КонецЕсли;
	
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		КодОсновногоЯзыка = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка(); // Для записи события в журнал регистрации.
		ЗаписьЖурналаРегистрации(
		НСтр("ru = 'Проверка контрагентов.Очистка состояний документов'", КодОсновногоЯзыка), 
		УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеИБИПодпискаНаПрограммныеСобытия

// См. описание этой же процедуры в модуле СтандартныеПодсистемыСервер.
//
Процедура ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики) Экспорт
	
	// СЕРВЕРНЫЕ ОБРАБОТЧИКИ.
	СерверныеОбработчики["СтандартныеПодсистемы.ОбновлениеВерсииИБ\ПриДобавленииОбработчиковОбновления"].Добавить(
	"ПроверкаКонтрагентов");
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса.ОчередьЗаданий") Тогда
		СерверныеОбработчики[
			"СтандартныеПодсистемы.РаботаВМоделиСервиса.ОчередьЗаданий\ПриОпределенииПсевдонимовОбработчиков"].Добавить(
				"ПроверкаКонтрагентов");
	КонецЕсли;
			
	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.ВыгрузкаЗагрузкаДанных") Тогда
		СерверныеОбработчики[
			"ТехнологияСервиса.ВыгрузкаЗагрузкаДанных\ПослеЗагрузкиДанных"].Добавить(
				"ПроверкаКонтрагентов");
	КонецЕсли;
	
КонецПроцедуры

// Добавляет процедуры-обработчики обновления, необходимые данной подсистеме.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                  общего модуля ОбновлениеИнформационнойБазы.
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "2.2.5.14";
	Обработчик.Процедура           = "ПроверкаКонтрагентов.ВключитьПроверкуКонтрагентовДляРежимаСервисов";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.ОбщиеДанные         = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "2.2.5.14";
	Обработчик.Процедура           = "ПроверкаКонтрагентов.ПроверитьКонтрагентовПослеВключенияПроверки";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("c4bcb537-61e2-4fbf-af66-a5854048948f");
	Обработчик.Комментарий = НСтр("ru = 'Проверяет существование контрагентов по базе ФНС.
		|До завершения выполнения существование контрагента может быть определено не для всех контрагентов'");
	
КонецПроцедуры

// Заполняет соответствие имен методов их псевдонимам для вызова из очереди заданий.
//
// Параметры:
//  СоответствиеИменПсевдонимам - Соответствие
//   Ключ - Псевдоним метода, например ОчиститьОбластьДанных.
//   Значение - Имя метода для вызова, например РаботаВМоделиСервиса.ОчиститьОбластьДанных.
//    В качестве значения можно указать Неопределено, в этом случае считается что имя 
//    совпадает с псевдонимом.
//
Процедура ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам) Экспорт
	
	СоответствиеИменПсевдонимам.Вставить("ПроверкаКонтрагентов.ПроверитьКонтрагентовПослеВключенияПроверки");
	
КонецПроцедуры

// Вызывается после загрузки данных.
//
// Параметры:
//  Контейнер - ОбработкаОбъект.ВыгрузкаЗагрузкаДанныхМенеджерКонтейнера - менеджер
//    контейнера, используемый в процессе загрузки данных. Подробнее см. комментарий
//    к программному интерфейсу обработки ВыгрузкаЗагрузкаДанныхМенеджерКонтейнера.
//
Процедура ПослеЗагрузкиДанных(Контейнер) Экспорт
	
	 Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		 
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса.ОчередьЗаданий") Тогда
			ПараметрыЗадания = Новый Структура;
			ПараметрыЗадания.Вставить("ИмяМетода", "ПроверкаКонтрагентов.ПроверитьКонтрагентовПослеВключенияПроверки");
			ПараметрыЗадания.Вставить("КоличествоПовторовПриАварийномЗавершении", 3);
			
			МодульОчередьЗаданий = ОбщегоНазначения.ОбщийМодуль("ОчередьЗаданий");
			МодульОчередьЗаданий.ДобавитьЗадание(ПараметрыЗадания);
		КонецЕсли;
		
	Иначе
		
		// Запуск фонового задания после включения проверки не требуется.
		ВключитьВыключитьПроверкуКонтрагентов(Истина);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область НастройкиПроверки

// Процедура - Включение или отключение использования сервиса путем установки значения константе
//             ИспользоватьПроверкуКонтрагентов.
//
// Параметры:
//  ИспользоватьСервис	 - Булево - Истина, чтобы включить использование сервиса. Ложь - чтобы отключить.
Процедура ВключитьВыключитьПроверкуКонтрагентов(ВключитьПроверку) Экспорт
	
	// Устанавливаем значение константы.
	Константы.ИспользоватьПроверкуКонтрагентов.Установить(ВключитьПроверку);

КонецПроцедуры

// Процедура - Запуск проверки контрагентов в фоне после включения проверки.
Процедура ЗапуститьФоновуюПроверкуКонтрагентовПослеИзмененияНастройкиПриНеобходимости() Экспорт
	
	ИспользоватьСервис = Константы.ИспользоватьПроверкуКонтрагентов.Получить();
	
	ЗапуститьФоновуюПроверку = ИспользоватьСервис
		И НЕ ОбновлениеИнформационнойБазы.ВыполняетсяОбновлениеИнформационнойБазы();
	
	Если ЗапуститьФоновуюПроверку Тогда
		ПроверитьКонтрагентовПослеВключенияПроверкиФоновоеЗадание();
	КонецЕсли;

КонецПроцедуры

// Процедура -  Метод обновления информационной базы для режима сервисов.
Процедура ВключитьПроверкуКонтрагентовДляРежимаСервисов() Экспорт
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		// Запуск фонового задания после включения проверки не требуется.
		ВключитьВыключитьПроверкуКонтрагентов(Истина);
	КонецЕсли;
	
КонецПроцедуры

// Функция - Показывает, включена ли проверка контрагентов.
// Возвращаемое значение:
// Булево - Значение константы ИспользоватьПроверкуКонтрагентов - включена ли проверка контрагентов в базе.
Функция ПроверкаКонтрагентовВключена() Экспорт
	
	// Проверка, что сервис включен.
	НастройкиСервиса = ПараметрыРаботыСервиса();
	ИспользоватьСервис = НастройкиСервиса.ИспользоватьСервис;

	Возврат ИспользоватьСервис;
	
КонецФункции

// Функция - Определяем наличие права на использование проверки контрагентов.
// Возвращаемое значение:
// Булево - наличие права на использование проверки контрагентов.
Функция ЕстьПравоНаИспользованиеПроверки() Экспорт
	
	Возврат ПравоДоступа("Чтение", Метаданные.Константы.ИспользоватьПроверкуКонтрагентов);
	
КонецФункции

// Функция - Определяем наличие права на включение проверки контрагентов.
// Возвращаемое значение:
// Булево - наличие права на включение проверки контрагентов.
Функция ЕстьПравоНаРедактированиеНастроек() Экспорт
	
	Возврат ПравоДоступа("Изменение", Метаданные.Константы.ИспользоватьПроверкуКонтрагентов);
	
КонецФункции

// Функция - Проверяет наличие доступа к веб-сервису ФНС.
// Возвращаемое значение:
// Булево - наличие доступа к веб-сервису ФНС.
Функция ЕстьДоступКВебСервисуФНС() Экспорт
	
	Прокси = ПроксиСервиса();

	Если Прокси = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Проверяем на конкретных данных
	ДанныеКонтрагента = Новый Структура();
	ДанныеКонтрагента.Вставить("ИНН", "7709860400");
	ДанныеКонтрагента.Вставить("КПП", "770901001");
	ДанныеКонтрагента.Вставить("Дата", ДатаСтрокой(ТекущаяДатаСеанса()));
	
	ПространствоИмен = ПространствоИменОтвета();
	WSЗапрос = Прокси.ФабрикаXDTO.Создать(Прокси.ФабрикаXDTO.Тип(ПространствоИмен, "NdsRequest2"));
	
	ДобавитьКонтрагентаВЗапросКСервису(WSЗапрос, Прокси, ПространствоИмен, ДанныеКонтрагента);
	
	NdsResponse = ОтветСервисаФНС(Прокси, WSЗапрос);
	
	Если NdsResponse = Неопределено Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Функция - Определяет, отказался ли пользователь от использования сервиса в предложении на подключение.
// Возвращаемое значение:
// Булево - пользователь отказался от использования сервиса в предложении на подключение.
Функция БольшеНеПоказыватьПредложениеПодключиться() Экспорт
	
	Возврат ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ПроверкаКонтрагентов", "ПроверкаКонтрагентов_БольшеНеПоказыватьПредложениеИспользоватьСервис") = Истина;
	
КонецФункции

// Процедура - Сохраняет дату последнего отображения предложения на использование сервиса.
Процедура СохранитьДатуПоследнегоОтображенияПредложенияПодключиться() Экспорт
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ПроверкаКонтрагентов", "ПроверкаКонтрагентов_ДатаПоследнегоОтображенияПредложенияНаВключениеСервиса", ТекущаяДатаСеанса());
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// См. описание процедуры СтандартныеПодсистемыСервер.СобратьСтатистикуКонфигурации.
Процедура СобратьСтатистикуКонфигурации() Экспорт
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЦентрМониторинга") Тогда
		Возврат;
	КонецЕсли;
	
	МодульЦентрМониторинга = ОбщегоНазначения.ОбщийМодуль("ЦентрМониторинга");
	МодульЦентрМониторинга.ЗаписатьСтатистикуОбъектаКонфигурации("ИспользуетсяПроверкаКонтрагентов", 
		Константы.ИспользоватьПроверкуКонтрагентов.Получить());
	
КонецПроцедуры

// Процедура - Метод фонового задания по проверке контрагента из формы контрагента.
//
// Параметры:
//  Параметры	 - Структура - Параметры запуска фонового задания. Ключи структуры:
//		"Контрагент" - СправочникСсылка.<Контрагенты> - Проверяемый контрагент.
//		"ИНН"		 - Строка - ИНН Контрагента
//		"КПП"		 - Строка - КПП Контрагента
//		"Дата"		 - Дата - Дата, на которую выполняется проверка контрагента. Может быть не указана, тогда берется текущая
//		                  дата "СохранятьРезультатСразуПослеПроверки" - Булево - Признак, указывающий нужно ли результат
//		                  проверки контрагента сразу сохранять в регистр
//		"АдресХранилища" - Строка - Адрес, в который будет помещен результат проверки контрагента.
Процедура ПроверитьКонтрагентаФоновоеЗадание(Параметры) Экспорт 
	
	// Присвоение даты находится здесь, так как ТекущаяДатаСеанса работает только на сервере.
	Если НЕ Параметры.Свойство("Дата") Тогда
		Параметры.Вставить("Дата", НачалоДня(ТекущаяДатаСеанса()));
	КонецЕсли;
	
	Попытка
		ПроверитьКонтрагента(Параметры, Параметры.АдресХранилища);
	Исключение
		
		КодОсновногоЯзыка = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка(); // Для записи события в журнал регистрации.
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Проверка контрагентов.Ошибка при проверке из карточки контрагента'", КодОсновногоЯзыка),
			УровеньЖурналаРегистрации.Ошибка,,,ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
			
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РаботаСВебСервисом

// Функция - Значения настроек
// Возвращаемое значение:
// Структура - Признак использования сервиса и адрес веб-сервиса ФНС. Ключи - "ИспользоватьСервис", "АдресСервиса".
Функция ПараметрыРаботыСервиса()
	
	// заполняем общие настройки
	ИспользоватьСервис 	= Константы.ИспользоватьПроверкуКонтрагентов.Получить();
	АдресСервиса 		= "http://npchk.nalog.ru/FNSNDSCAWS_2?wsdl";
	
	Возврат Новый Структура("ИспользоватьСервис, АдресСервиса", ИспользоватьСервис, АдресСервиса);
	
КонецФункции

Функция ПроксиСервиса()
	
	WSПрокси = Неопределено;
	Попытка
	
		НастройкиСервиса = ПараметрыРаботыСервиса();
		АдресСервиса = НастройкиСервиса.АдресСервиса;
		
		Если ЗначениеЗаполнено(АдресСервиса) Тогда
			WSПрокси = ПолучитьWSПрокси(АдресСервиса);
		КонецЕсли;
		
	Исключение
		
		КодОсновногоЯзыка = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка(); // Для записи события в журнал регистрации.
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Проверка контрагентов.Ошибка доступа к веб-сервису'", КодОсновногоЯзыка),
			УровеньЖурналаРегистрации.Ошибка,,,ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
			
	КонецПопытки; 
	
	Возврат WSПрокси;
	
КонецФункции

Процедура ПолучитьРезультатПроверкиВебСервисом(ДанныеКонтрагентов, Отбор)
	
	// Проверяем только тех контрагентов, которые соответствуют указанному отбору.
	ДанныеКонтрагентовДляПроверкиСервисом = ДанныеКонтрагентов.НайтиСтроки(Отбор);
	КоличествоКонтрагентов = ДанныеКонтрагентовДляПроверкиСервисом.Количество();

	Если КоличествоКонтрагентов = 0 Тогда
		// Нет данных для проверки
		Возврат;
	КонецЕсли;
	
	Если НЕ ЕстьДоступКВебСервисуФНС() Тогда
		// Нет доступа к веб-сервису
		Возврат;
	КонецЕсли;
	
	Прокси = ПроксиСервиса();
	
	ПространствоИмен = ПространствоИменОтвета();
	
	РазмерПорции = 10000;
	
	// Разбиваем всю таблицу на блоки запросов.
	КоличествоЗапросов = ?(КоличествоКонтрагентов % РазмерПорции = 0, КоличествоКонтрагентов / РазмерПорции, Цел(КоличествоКонтрагентов / РазмерПорции) + 1);
		
	// Выполняем несколько запросов. В каждом запросе не более 10000 строк.
	Для НомерПорции = 1 По КоличествоЗапросов Цикл 
		
		МинимальныйНомерКонтрагента 	= Мин(РазмерПорции * (НомерПорции - 1), КоличествоКонтрагентов);
		МаксимальныйНомерКонтрагента 	= Мин(РазмерПорции * НомерПорции, КоличествоКонтрагентов) - 1;

		WSЗапрос = Прокси.ФабрикаXDTO.Создать(Прокси.ФабрикаXDTO.Тип(ПространствоИмен, "NdsRequest2"));
		
		Для ИндексТекущегоКонтрагента = МинимальныйНомерКонтрагента По МаксимальныйНомерКонтрагента Цикл
			
			ДанныеКонтрагента = ДанныеКонтрагентовДляПроверкиСервисом[ИндексТекущегоКонтрагента];
			ДобавитьКонтрагентаВЗапросКСервису(WSЗапрос, Прокси, ПространствоИмен, ДанныеКонтрагента); 
			
		КонецЦикла;
		
		Если WSЗапрос.NP.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		NdsResponse = ОтветСервисаФНС(Прокси, WSЗапрос);

		Если NdsResponse <> Неопределено Тогда
			ОбработатьОтветСервиса(NdsResponse, ДанныеКонтрагентовДляПроверкиСервисом, МинимальныйНомерКонтрагента, МаксимальныйНомерКонтрагента);	
		КонецЕсли;
		
	КонецЦикла; 
	
КонецПроцедуры

Функция ОтветСервисаФНС(Прокси, WSЗапрос)
	
	// Получаем результат проверки от сервиса.
	Попытка
		NdsResponse = Прокси.NdsRequest2(WSЗапрос);
	Исключение
		
		// Страхуемся от ошибки "Timeout was reached".
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Проверка контрагентов.NdsRequest'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		NdsResponse = Неопределено;
		
	КонецПопытки;
	
	Возврат NdsResponse;
	
КонецФункции

Процедура ДобавитьКонтрагентаВЗапросКСервису(WSЗапрос, Прокси, ПространствоИмен, ДанныеКонтрагента)
	
	Попытка
	
		WSКонтрагент = Прокси.ФабрикаXDTO.Создать(Прокси.ФабрикаXDTO.Тип(ПространствоИмен, "NdsRequest2_NP"));
	
		// Указываем ИНН, КПП и Дату
		WSКонтрагент.INN = ДанныеКонтрагента.ИНН;
		Если ЗначениеЗаполнено(ДанныеКонтрагента.КПП) Тогда
			WSКонтрагент.KPP = ДанныеКонтрагента.КПП;
		КонецЕсли;
		Если ЗначениеЗаполнено(ДанныеКонтрагента.Дата)Тогда
			WSКонтрагент.DT = ДатаСтрокой(ДанныеКонтрагента.Дата);
		КонецЕсли;
		
		// Добавляем данные по контрагенту в список на проверку.
		WSЗапрос.NP.Добавить(WSКонтрагент);

	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		ДанныеКонтрагента.Состояние = Перечисления.СостоянияСуществованияКонтрагента.КонтрагентСодержитОшибкиВДанных;
		
		КодОсновногоЯзыка = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка(); // Для записи события в журнал регистрации.
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Проверка контрагентов.Формирование данных для обращения к сервису ФНС'", КодОсновногоЯзыка),
			УровеньЖурналаРегистрации.Ошибка,,,ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	КонецПопытки; 
				
КонецПроцедуры

Процедура ОбработатьОтветСервиса(NdsResponse, ДанныеКонтрагентовДляПроверкиСервисом, МинимальныйНомерКонтрагента, МаксимальныйНомерКонтрагента) Экспорт
	
	ИндексТекущегоОтвета = 0;
	Для ИндексТекущегоКонтрагента = МинимальныйНомерКонтрагента По МаксимальныйНомерКонтрагента Цикл 
		ДанныеКонтрагента = ДанныеКонтрагентовДляПроверкиСервисом[ИндексТекущегоКонтрагента];
		Если ДанныеКонтрагента.Состояние <> Перечисления.СостоянияСуществованияКонтрагента.КонтрагентСодержитОшибкиВДанных Тогда
			
			Попытка

				// Ответ от сервиса
				ОтветПоКонтрагенту 			= NdsResponse.NP[ИндексТекущегоОтвета];
				СостояниеВОтвете 			= ОтветПоКонтрагенту.State;
				ДанныеКонтрагента.Состояние	= СостояниеНаОсновеОтветаСервиса(ДанныеКонтрагента, СостояниеВОтвете);
				
			Исключение
		
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				
				КодОсновногоЯзыка = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка(); // Для записи события в журнал регистрации.
				ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Проверка контрагентов.Обработка ответа от веб-сервиса'", КодОсновногоЯзыка), 
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
			
			КонецПопытки;
			
			ИндексТекущегоОтвета = ИндексТекущегоОтвета + 1;
		КонецЕсли;
		
	КонецЦикла;
				
КонецПроцедуры

#Область НастройкиВебСервиса

Функция ПространствоИменОтвета()
	
	Возврат "http://ws.unisoft/FNSNDSCAWS2/Request";
	
КонецФункции

Функция ПолучитьWSПрокси(АдресСервиса) 
	
	WSПрокси = ОбщегоНазначения.WSПрокси(
			АдресWSDL(АдресСервиса),
			"http://ws.unisoft",
			"FNSNDSCAWS2",
			"FNSNDSCAWS2_Port",
			Неопределено,
			Неопределено,
			120);
		
	Возврат WSПрокси;
	
КонецФункции

Функция АдресWSDL(URI)
	
	Адрес = СокрЛП(URI);
	Если СтрНайти(НРег(Адрес), "?wsdl") = СтрДлина(Адрес) - 4 Тогда
		Возврат Адрес;
	Иначе
		Возврат Адрес + "?wsdl";
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ПрочиеПроцедуры

Процедура СохранитьРезультатыПроверкиКонтрагентаВРегистр(ДанныеКонтрагента)
	
	Попытка
		
		Контрагент = ДанныеКонтрагента.Контрагент;
		
		// Блокируем по Контрагенту
		СтруктураКлюча = Новый Структура();
		СтруктураКлюча.Вставить("Контрагент", Контрагент);
		
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
			ОбластьДанныхВспомогательныеДанные	= ДанныеКонтрагента.ОбластьДанныхВспомогательныеДанные;
			СтруктураКлюча.Вставить("ОбластьДанныхВспомогательныеДанные", ОбластьДанныхВспомогательныеДанные);
		КонецЕсли;

		Ключ = РегистрыСведений.СостоянияКонтрагентов.СоздатьКлючЗаписи(СтруктураКлюча);
		ЗаблокироватьДанныеДляРедактирования(Ключ);
		
		// Записываем данные в регистр.
		НаборЗаписей = РегистрыСведений.СостоянияКонтрагентов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Контрагент.Установить(Контрагент);
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
			НаборЗаписей.Отбор.ОбластьДанныхВспомогательныеДанные.Установить(ОбластьДанныхВспомогательныеДанные);
		КонецЕсли;
		НаборЗаписей.Очистить();
		
		Запись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, ДанныеКонтрагента); 
		
		НаборЗаписей.Записать();
		
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		КодОсновногоЯзыка = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка(); // Для записи события в журнал регистрации.
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Проверка контрагентов.Запись результатов проверки контрагентов в регистр'", КодОсновногоЯзыка), 
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		
	КонецПопытки;
	
КонецПроцедуры

Процедура СохранитьРезультатыПроверкиКонтрагентовВРегистр(ДанныеКонтрагентов)
	
	Для каждого ДанныеКонтрагента Из ДанныеКонтрагентов Цикл
		СохранитьРезультатыПроверкиКонтрагентаВРегистр(ДанныеКонтрагента);
	КонецЦикла;
	
КонецПроцедуры

// Процедура - Сохраняет документ в регистр ДокументыСОшибкамиПроверкиКонтрагентов, 
//	если в контрагентах есть ошибка; и удаляет из регистра - если ошибки нет.
//
// Параметры:
//  СохраняемыйРезультат - Соответствие	 - Ключ - сохраняемый документ, Значение - признак наличия ошибки в документе.
Процедура СохранитьРезультатыПроверкиКонтрагентовВДокументеВРегистр(СохраняемыйРезультат) Экспорт
	
	Если СохраняемыйРезультат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		
		// Устанавливаем блокировку сразу на все документы.
		Блокировка = Новый БлокировкаДанных;
		Для каждого СохраняемыйРезультатПоДокументу Из СохраняемыйРезультат Цикл
		
			ДокументСсылка = СохраняемыйРезультатПоДокументу.Ключ;
			
			Если НЕ ЗначениеЗаполнено(ДокументСсылка) Тогда
				Продолжить;
			КонецЕсли;
			
			// Объектная блокировка.
			СтруктураКлюча = Новый Структура("Документ", ДокументСсылка);
			Ключ = РегистрыСведений.ДокументыСОшибкамиПроверкиКонтрагентов.СоздатьКлючЗаписи(СтруктураКлюча);
			ЗаблокироватьДанныеДляРедактирования(Ключ);
		
			// Транзакционная блокировка.
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ДокументыСОшибкамиПроверкиКонтрагентов");
			ЭлементБлокировки.УстановитьЗначение("Документ", ДокументСсылка);
			
		КонецЦикла;
		Блокировка.Заблокировать();
		
		// Записываем данные в регистр.
		Для каждого СохраняемыйРезультатПоДокументу Из СохраняемыйРезультат Цикл
		
			ДокументСсылка 		= СохраняемыйРезультатПоДокументу.Ключ;
			ЭтоДокументСОшибкой = СохраняемыйРезультатПоДокументу.Значение;
			
			Если НЕ ЗначениеЗаполнено(ДокументСсылка) Тогда
				Продолжить;
			КонецЕсли;
		
			// Записываем данные в регистр.
			НаборЗаписей = РегистрыСведений.ДокументыСОшибкамиПроверкиКонтрагентов.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Документ.Установить(ДокументСсылка);
			
			Если ЭтоДокументСОшибкой Тогда
				// Записываем документ в регистр.
				Запись = НаборЗаписей.Добавить();
				Запись.Документ = ДокументСсылка;
			Иначе
				// Очищаем регистр
			КонецЕсли;
			
			НаборЗаписей.Записать();
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		КодОсновногоЯзыка = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка(); // Для записи события в журнал регистрации.
		
		ЗаписьЖурналаРегистрации(
		НСтр("ru = 'Проверка контрагентов.Запись результатов проверки документов в регистр'", КодОсновногоЯзыка), 
		УровеньЖурналаРегистрации.Ошибка,,,
		ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		
	КонецПопытки;
	
КонецПроцедуры

// Проверка ошибок, удаление дублей.
Процедура ПодготовитьДанныеКПроверке(ДанныеКонтрагентовДляПроверки)
	
	ДанныеКонтрагентов = ДанныеКонтрагентовТипизированные(ДанныеКонтрагентовДляПроверки);
	ОставитьРазрешенныхКонтрагентов(ДанныеКонтрагентов);
	ПодготовитьДанныеКПроверкеПоВсемКонтрагентам(ДанныеКонтрагентов);
	
	ДанныеКонтрагентовДляПроверки = ДанныеКонтрагентов;
	
КонецПроцедуры

Процедура ПодготовитьДанныеКПроверкеПоВсемКонтрагентам(ДанныеКонтрагентов)
	
	Для каждого ДанныеКонтрагента Из ДанныеКонтрагентов Цикл
		
		Если ДанныеКонтрагента.Состояние <> Перечисления.СостоянияСуществованияКонтрагента.КонтрагентСодержитОшибкиВДанных Тогда
			// Проверяем ошибки, приводим данные к нужному формату.
			ПодготовитьДанныеКПроверкеПоКаждомуКонтрагенту(ДанныеКонтрагента);
		КонецЕсли;
		
	КонецЦикла;
	
	СвернутьДанныеКонтрагентов(ДанныеКонтрагентов);
	
КонецПроцедуры

Функция ДанныеКонтрагентовТипизированные(ДанныеКонтрагентовДляПроверки)
	
	// Создаем таблицу
	ДанныеКонтрагентов = ШаблонТаблицыДанныеКонтрагента();
	ЕстьОбластьДанных = ДанныеКонтрагентовДляПроверки.Колонки.Найти("ОбластьДанныхВспомогательныеДанные") <> Неопределено И ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса");
	
	// Копируем таблицу, сохраняя типы колонок.
	Для каждого ДанныеКонтрагентаДляПроверки Из ДанныеКонтрагентовДляПроверки Цикл
		
		// Копируем данные из таблицы с "сырыми данными" в таблицу с "типизированными" колонками.
		ДанныеКонтрагента = ДанныеКонтрагентов.Добавить();
		
		// В зависимости от наличия колонки ОбластьДанныхВспомогательныеДанные, копируем разный набор данных.
		СписокСвойств = "Контрагент, ИНН, КПП, Состояние, Дата, ДополнительныеПараметры";
		Если ЕстьОбластьДанных Тогда
			СписокСвойств = СписокСвойств + ", ОбластьДанныхВспомогательныеДанные";
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ДанныеКонтрагента, ДанныеКонтрагентаДляПроверки, СписокСвойств);
		
	КонецЦикла;
	
	Возврат ДанныеКонтрагентов;
	
КонецФункции

Процедура СвернутьДанныеКонтрагентов(ДанныеКонтрагентов)
	
	// Удаляем из таблицы дубли
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
		ДанныеКонтрагентов.Свернуть("Контрагент, ИНН, КПП, Дата, Состояние, ОбластьДанныхВспомогательныеДанные");
	Иначе
		ДанныеКонтрагентов.Свернуть("Контрагент, ИНН, КПП, Дата, Состояние");
	КонецЕсли;
	
КонецПроцедуры

// Процедура - В таблице ДанныеКонтрагентов оставляет только записи по контрагентам,
//		к которым есть доступ. В модели сервиса из неразделенной области проверку делать
//		не нужно, поскольку регламентное задание выполняется под администратором 
//		и нет доступа к разделенному справочнику контрагентов.
//
Процедура ОставитьРазрешенныхКонтрагентов(ДанныеКонтрагентов)
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено()
		И ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных()
		ИЛИ НЕ ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		
		СоответствиеДляДополнительныхПараметров = Новый Соответствие;
		Для Каждого ДанныеКонтрагента Из ДанныеКонтрагентов Цикл
			СоответствиеДляДополнительныхПараметров.Вставить(ДанныеКонтрагента.Контрагент, ДанныеКонтрагента.ДополнительныеПараметры);
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ДанныеКонтрагентов.Контрагент,
			|	ДанныеКонтрагентов.ИНН,
			|	ДанныеКонтрагентов.КПП,
			|	ДанныеКонтрагентов.Дата,
			|	ДанныеКонтрагентов.ОбластьДанныхВспомогательныеДанные,
			|	ДанныеКонтрагентов.Состояние
			|ПОМЕСТИТЬ ВсеДанныеКонтрагентов
			|ИЗ
			|	&ДанныеКонтрагентов КАК ДанныеКонтрагентов
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	ВсеДанныеКонтрагентов.Контрагент КАК Контрагент
			|ПОМЕСТИТЬ ВсеКонтрагенты
			|ИЗ
			|	Справочник.%1 КАК СправочникКонтрагентов
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВсеДанныеКонтрагентов КАК ВсеДанныеКонтрагентов
			|		ПО СправочникКонтрагентов.Ссылка = ВсеДанныеКонтрагентов.Контрагент
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ВсеДанныеКонтрагентов.Контрагент,
			|	ВсеДанныеКонтрагентов.ИНН,
			|	ВсеДанныеКонтрагентов.КПП,
			|	ВсеДанныеКонтрагентов.Дата,
			|	ВсеДанныеКонтрагентов.ОбластьДанныхВспомогательныеДанные,
			|	ВсеДанныеКонтрагентов.Состояние
			|ИЗ
			|	ВсеДанныеКонтрагентов КАК ВсеДанныеКонтрагентов
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВсеКонтрагенты КАК ВсеКонтрагенты
			|		ПО (ВсеКонтрагенты.Контрагент = ВсеДанныеКонтрагентов.Контрагент)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ВсеДанныеКонтрагентов.Контрагент,
			|	ВсеДанныеКонтрагентов.ИНН,
			|	ВсеДанныеКонтрагентов.КПП,
			|	ВсеДанныеКонтрагентов.Дата,
			|	ВсеДанныеКонтрагентов.ОбластьДанныхВспомогательныеДанные,
			|	ВсеДанныеКонтрагентов.Состояние
			|ИЗ
			|	ВсеДанныеКонтрагентов КАК ВсеДанныеКонтрагентов
			|ГДЕ
			|	ВсеДанныеКонтрагентов.Контрагент = ЗНАЧЕНИЕ(Справочник.%1.ПустаяСсылка)";
			
		Если НЕ ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
			
			Запрос.Текст = СтрЗаменить(
				Запрос.Текст,
				"ВсеДанныеКонтрагентов.ОбластьДанныхВспомогательныеДанные,",
				"");
				
			Запрос.Текст = СтрЗаменить(
				Запрос.Текст,
				"ДанныеКонтрагентов.ОбластьДанныхВспомогательныеДанные,",
				"");
				
		КонецЕсли;
			
		СвойстваСправочника = ПроверкаКонтрагентовКлиентСервер.СвойстваСправочникаКонтрагенты();
		Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Запрос.Текст, СвойстваСправочника.Имя);
			
		Запрос.УстановитьПараметр("ДанныеКонтрагентов", ДанныеКонтрагентов);
		ДанныеКонтрагентов = Запрос.Выполнить().Выгрузить();
		
		ДанныеКонтрагентов.Колонки.Добавить("ДополнительныеПараметры", Новый ОписаниеТипов("Структура"));
		Для Каждого ДанныеКонтрагента Из ДанныеКонтрагентов Цикл
			ДополнительныеПараметры = СоответствиеДляДополнительныхПараметров.Получить(ДанныеКонтрагента.Контрагент);
			Если ДополнительныеПараметры <> Неопределено Тогда
				ДанныеКонтрагента.ДополнительныеПараметры = ДополнительныеПараметры;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Проверка ошибок по одному контрагенту.
Процедура ПодготовитьДанныеКПроверкеПоКаждомуКонтрагенту(ДанныеКонтрагента)
	
	Ошибка = "";
	
	// Обращение к реквизитам справочника возможно только из разделенного сеанса.
	// При запуске из неразделенного сеанса проверка будет выполнена веб-сервисом.
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено()
		И ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных()
		ИЛИ НЕ ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		
		// Проверяем только российских контрагентов.
		Если ЭтоИностранныйКонтрагент(ДанныеКонтрагента)Тогда
			ДанныеКонтрагента.Состояние = Перечисления.СостоянияСуществованияКонтрагента.КонтрагентНеПодлежитПроверке;
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	// ЭтоЮридическоеЛицо
	ДлинаИНН = СтрДлина(СокрЛП(ДанныеКонтрагента.ИНН));
	ДлинаКПП = СтрДлина(СокрЛП(ДанныеКонтрагента.КПП));
	
	ЭтоЮридическоеЛицо = Ложь;
	СтандартнаяОбработка = Истина;
	РаботаСКонтрагентамиПереопределяемый.ОпределитьЮрИлиФизЛицоКонтрагент(СтандартнаяОбработка, ЭтоЮридическоеЛицо, ДанныеКонтрагента);

	Если СтандартнаяОбработка Тогда
		Если ДлинаИНН = 10 И ДлинаКПП = 9 Тогда
			ЭтоЮридическоеЛицо = Истина;
		ИначеЕсли ДлинаИНН = 12 И ДлинаКПП = 0 Тогда
			ЭтоЮридическоеЛицо = Ложь;
		ИначеЕсли ДлинаИНН = 0 ИЛИ ДлинаКПП = 0 Тогда
			ДанныеКонтрагента.Состояние = Перечисления.СостоянияСуществованияКонтрагента.ПустойИННИлиКПП;
			Возврат;
		Иначе
			ДанныеКонтрагента.Состояние = Перечисления.СостоянияСуществованияКонтрагента.КонтрагентСодержитОшибкиВДанных;
			Возврат;
		КонецЕсли;
	Иначе
		Если ДлинаИНН = 0  Тогда
			ДанныеКонтрагента.Состояние = Перечисления.СостоянияСуществованияКонтрагента.ПустойИННИлиКПП;
			Возврат;
		ИначеЕсли ЭтоЮридическоеЛицо И ДлинаКПП = 0 Тогда
			ДанныеКонтрагента.Состояние = Перечисления.СостоянияСуществованияКонтрагента.ПустойИННИлиКПП;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// Дата
	Если Не ЗначениеЗаполнено(ДанныеКонтрагента.Дата) Тогда
		ДанныеКонтрагента.Дата = НачалоДня(ТекущаяДатаСеанса());
	ИначеЕсли ТипЗнч(ДанныеКонтрагента.Дата) = Тип("Дата") 
		И (ДанныеКонтрагента.Дата < Дата(1991, 1, 1) ИЛИ ДанныеКонтрагента.Дата > КонецДня(ТекущаяДатаСеанса())) Тогда
		ДанныеКонтрагента.Состояние = Перечисления.СостоянияСуществованияКонтрагента.КонтрагентСодержитОшибкиВДанных;
		Возврат;
	КонецЕсли;
	
	// ИНН
	ДанныеКонтрагента.ИНН = СокрЛП(ДанныеКонтрагента.ИНН);
	ИНН = ДанныеКонтрагента.ИНН;
	ИННСоответствуетТребованиям = РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(ИНН, ЭтоЮридическоеЛицо, Ошибка);
	Если СтрНачинаетсяС(ИНН, "00") ИЛИ НЕ ИННСоответствуетТребованиям Тогда
		ДанныеКонтрагента.Состояние = Перечисления.СостоянияСуществованияКонтрагента.КонтрагентСодержитОшибкиВДанных;
		Возврат;
	КонецЕсли;
	
	// КПП
	Если ЭтоЮридическоеЛицо Тогда
		ДанныеКонтрагента.КПП = СокрЛП(ДанныеКонтрагента.КПП);
		КПП = ДанныеКонтрагента.КПП;
		КППСоответствуетТребованиям = РегламентированныеДанныеКлиентСервер.КППСоответствуетТребованиям(КПП, Ошибка);
		Если НЕ КППСоответствуетТребованиям Тогда
			ДанныеКонтрагента.Состояние = Перечисления.СостоянияСуществованияКонтрагента.КонтрагентСодержитОшибкиВДанных;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ЭтоИностранныйКонтрагент(ДанныеКонтрагента)
	
	ЯвляетсяИностранным = Ложь;
	РаботаСКонтрагентамиПереопределяемый.ОпределитьЯвляетсяЛиКонтрагентИностранным(ДанныеКонтрагента, ЯвляетсяИностранным);
	Возврат ЯвляетсяИностранным;
	
КонецФункции

Процедура ПолучитьСостоянияКонтрагентовИзКэша(ДанныеКонтрагентов, ПолучатьВсеСостоянияИзРегистра = Ложь)
	
	Запрос = Новый Запрос;
	Запрос.Текст =	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	              	|	ДанныеКонтрагентов.Контрагент,
	              	|	ДанныеКонтрагентов.ИНН,
	              	|	ДанныеКонтрагентов.КПП,
	              	|	ДанныеКонтрагентов.ОбластьДанныхВспомогательныеДанные,
	              	|	ДанныеКонтрагентов.Дата
	              	|ПОМЕСТИТЬ ДанныеКонтрагентов
	              	|ИЗ
	              	|	&ДанныеКонтрагентов КАК ДанныеКонтрагентов
	              	|;
	              	|
	              	|////////////////////////////////////////////////////////////////////////////////
	              	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	              	|	ДанныеКонтрагентов.Контрагент,
	              	|	ДанныеКонтрагентов.ИНН,
	              	|	ДанныеКонтрагентов.КПП,
	              	|	ДанныеКонтрагентов.Дата,
	              	|	ДанныеКонтрагентов.ОбластьДанныхВспомогательныеДанные,
	              	|	ВЫБОР
	              	|		КОГДА &ПолучатьВсеСостоянияИзРегистра
	              	|			ТОГДА СостоянияКонтрагентов.Состояние
	              	|		ИНАЧЕ ВЫБОР
	              	|				КОГДА СостоянияКонтрагентов.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияСуществованияКонтрагента.КонтрагентСодержитОшибкиВДанных)
	              	|					ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияСуществованияКонтрагента.КонтрагентСодержитОшибкиВДанных)
	              	|				ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СостоянияСуществованияКонтрагента.ПустаяСсылка)
	              	|			КОНЕЦ
	              	|	КОНЕЦ КАК Состояние
	              	|ИЗ
	              	|	ДанныеКонтрагентов КАК ДанныеКонтрагентов
	              	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияКонтрагентов КАК СостоянияКонтрагентов
	              	|		ПО ДанныеКонтрагентов.Контрагент = СостоянияКонтрагентов.Контрагент
	              	|			И ДанныеКонтрагентов.ИНН = СостоянияКонтрагентов.ИНН
	              	|			И ДанныеКонтрагентов.КПП = СостоянияКонтрагентов.КПП
	              	|			И ДанныеКонтрагентов.ОбластьДанныхВспомогательныеДанные = СостоянияКонтрагентов.ОбластьДанныхВспомогательныеДанные";
					
	Если НЕ ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
		
		Запрос.Текст = СтрЗаменить(
			Запрос.Текст,
			"ДанныеКонтрагентов.ОбластьДанныхВспомогательныеДанные,",
			"");
		
		Запрос.Текст = СтрЗаменить(
			Запрос.Текст,
			"И ДанныеКонтрагентов.ОбластьДанныхВспомогательныеДанные = СостоянияКонтрагентов.ОбластьДанныхВспомогательныеДанные",
			"");
		
	КонецЕсли;
				  
	Запрос.УстановитьПараметр("ПолучатьВсеСостоянияИзРегистра", ПолучатьВсеСостоянияИзРегистра); 
	
	Запрос.УстановитьПараметр("ДанныеКонтрагентов", ДанныеКонтрагентов);
	ДанныеКонтрагентов = Запрос.Выполнить().Выгрузить();
	
	ДанныеКонтрагентов.Колонки.Добавить("ДополнительныеПараметры", Новый ОписаниеТипов("Структура"));
	
КонецПроцедуры

Функция ДатаСтрокой(Дата)
	
	Результат = Неопределено;
	Если ТипЗнч(Дата) = Тип("Строка") Тогда 
		// Дата уже в нужном формате в виде строки.
		Результат = Дата;
	ИначеЕсли ТипЗнч(Дата) = Тип("Дата") Тогда 
		Результат = Формат(Дата, "ДФ=dd.MM.yyyy");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СостояниеНаОсновеОтветаСервиса(ДанныеКонтрагента, Ответ)
	
	Если Ответ = "0" Тогда
		Состояние = Перечисления.СостоянияСуществованияКонтрагента.КонтрагентЕстьВБазеФНС;
	ИначеЕсли Ответ = "1" Тогда
		Состояние = Перечисления.СостоянияСуществованияКонтрагента.НеДействуетИлиИзмененКПП;
	ИначеЕсли Ответ = "3" Тогда
		Состояние = Перечисления.СостоянияСуществованияКонтрагента.КППНеСоответствуетДаннымБазыФНС;
	ИначеЕсли Ответ = "4" Тогда
		Состояние = Перечисления.СостоянияСуществованияКонтрагента.КонтрагентОтсутствуетВБазеФНС;
	Иначе
		Состояние = Перечисления.СостоянияСуществованияКонтрагента.КонтрагентСодержитОшибкиВДанных;
	КонецЕсли;
		
	Возврат Состояние;
	
КонецФункции

Процедура ПроверитьНепроверенныхКонтрагентов(ЭтоОбновлениеИБВМоделиСервиса, Параметры = Неопределено)
	
	// Выбираем контрагентов, которых нет в регистре сведений.
	Запрос = Новый Запрос;
	Текст = 
		"ВЫБРАТЬ %5
		|	Контрагенты.Ссылка КАК Контрагент,
		|	Контрагенты.%1 КАК ИНН,
		|	Контрагенты.%2 КАК КПП,
		|	&ОбластьДанныхВспомогательныеДанные КАК ОбластьДанныхВспомогательныеДанные,
		|	&Дата КАК Дата
		|ИЗ
		|	Справочник.%3 КАК Контрагенты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияКонтрагентов КАК СостоянияКонтрагентов
		|		ПО Контрагенты.Ссылка = СостоянияКонтрагентов.Контрагент
		|ГДЕ
		|	(СостоянияКонтрагентов.Состояние ЕСТЬ NULL 
		|	ИЛИ СостоянияКонтрагентов.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияСуществованияКонтрагента.ПустаяСсылка))
		|	%4";
		
	Если НЕ ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
		
		Текст = СтрЗаменить(
			Текст,
			"&ОбластьДанныхВспомогательныеДанные КАК ОбластьДанныхВспомогательныеДанные,",
			"");
		
	КонецЕсли;

	СвойстваСправочника = ПроверкаКонтрагентовКлиентСервер.СвойстваСправочникаКонтрагенты();
	
	УсловиеНаГруппу = "";
	Если СправочникКонтрагентовИерархический() Тогда
		УсловиеНаГруппу = "И Контрагенты.ЭтоГруппа = ЛОЖЬ";
	КонецЕсли;
	
	ОграничениеНаПрава = "";
	Если ЭтоОбновлениеИБВМоделиСервиса Тогда
		РазмерПорции = 1000;
		ОграничениеНаПрава = "РАЗЛИЧНЫЕ ПЕРВЫЕ " + Формат(РазмерПорции, "ЧГ=0");
	Иначе
		ОграничениеНаПрава = "РАЗЛИЧНЫЕ";
	КонецЕсли;
	
	Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, 
		СвойстваСправочника.ИНН, 
		СвойстваСправочника.КПП, 
		СвойстваСправочника.Имя, 
		УсловиеНаГруппу,
		ОграничениеНаПрава);
		
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
		Запрос.УстановитьПараметр("ОбластьДанныхВспомогательныеДанные", ОбщегоНазначения.ЗначениеРазделителяСеанса());
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Дата", НачалоДня(ТекущаяДатаСеанса()));
	ДанныеКонтрагентов = Запрос.Выполнить().Выгрузить();
	
	// Прерываем обновление, если не осталось необработанных данных.
	Если ЭтоОбновлениеИБВМоделиСервиса Тогда
		Параметры.ОбработкаЗавершена = ДанныеКонтрагентов.Количество() = 0;
		Если Параметры.ОбработкаЗавершена Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ПроверитьКонтрагентов(ДанныеКонтрагентов);
	
КонецПроцедуры

Процедура ЗаполнитьСостояния(ПроверяемыеКонтрагенты, ДанныеКонтрагентов, Состояния = Неопределено)
	
	// Соединяем результаты проверки с исходной таблицей.
	Запрос = Новый Запрос;
	Если ПроверяемыеКонтрагенты.Колонки.Найти("Состояние") <> Неопределено Тогда
		ПроверяемыеКонтрагенты.Колонки.Удалить("Состояние");
	КонецЕсли;
	
	ПоместитьТаблицуЗначенийВоВременнуюТаблицу(ПроверяемыеКонтрагенты, Запрос, "ПроверяемыеКонтрагенты", ,"ДополнительныеПараметры");
	ПоместитьТаблицуЗначенийВоВременнуюТаблицу(ДанныеКонтрагентов, 	Запрос, "ДанныеКонтрагентов", ,"ДополнительныеПараметры");
	
	// По всем контрагентам определяем состояние.
	// В таблице оставляем только контрагентов с ошибками.
	Запрос.Текст = Запрос.Текст + "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		| 	" + ПредставлениеКолонок(ПроверяемыеКонтрагенты, "ПроверяемыеКонтрагенты.",, "ДополнительныеПараметры") + ", 
		| 	ДанныеКонтрагентов.Состояние КАК Состояние
		|ИЗ 
		|	ПроверяемыеКонтрагенты КАК ПроверяемыеКонтрагенты
		|	ЛЕВОЕ СОЕДИНЕНИЕ ДанныеКонтрагентов КАК ДанныеКонтрагентов
		|	ПО ПроверяемыеКонтрагенты.Контрагент = ДанныеКонтрагентов.Контрагент
		|		И ПроверяемыеКонтрагенты.ИНН = ДанныеКонтрагентов.ИНН
		|		И ПроверяемыеКонтрагенты.КПП = ДанныеКонтрагентов.КПП
		|		И (НАЧАЛОПЕРИОДА(ПроверяемыеКонтрагенты.Дата, День) = НАЧАЛОПЕРИОДА(ДанныеКонтрагентов.Дата, День)
		|		ИЛИ НАЧАЛОПЕРИОДА(ПроверяемыеКонтрагенты.Дата, День) = ДатаВремя(1,1,1))";
		
	Если Состояния <> Неопределено Тогда
		Запрос.Текст = Запрос.Текст + "
			|
			|ГДЕ
			|	ДанныеКонтрагентов.Состояние В (&Состояния)";
		
		Запрос.УстановитьПараметр("Состояния", Состояния);
	КонецЕсли;
		
	ПроверяемыеКонтрагенты = Запрос.Выполнить().Выгрузить();
	ПроверяемыеКонтрагенты.Колонки.Добавить("ДополнительныеПараметры", Новый ОписаниеТипов("Структура"));
	
КонецПроцедуры

Процедура ПоместитьТаблицуЗначенийВоВременнуюТаблицу(Таблица, Запрос, ИмяВременнойТаблицы, ПостфиксСинонима = "", ИсключаяКолонки = "")
	
	ПредставлениеКолонок = ПредставлениеКолонок(Таблица, , , ИсключаяКолонки);
	
	Запрос.Текст = Запрос.Текст + "
		|ВЫБРАТЬ 
		| " + ПредставлениеКолонок + "
		| ПОМЕСТИТЬ " + ИмяВременнойТаблицы + "
		| ИЗ &" + ИмяВременнойТаблицы + " КАК " + ИмяВременнойТаблицы + ";
		|//////////////////////////////////////////////////////////////////////////////////////////////////";
	
	Запрос.УстановитьПараметр(ИмяВременнойТаблицы, Таблица);
	
КонецПроцедуры

Функция ПредставлениеКолонок(Таблица, СинонимТаблицы = "", ПостфиксСинонима = "", ИсключаяКолонки = "")
	
	МассивКолонокКИсключению = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИсключаяКолонки, ",", Истина, Истина);
	
	КолонкиИсходнойТаблицы = Новый Массив;
	Для Каждого Колонка Из Таблица.Колонки Цикл
		
		Если МассивКолонокКИсключению.Найти(Колонка.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяПоля     = СинонимТаблицы + Колонка.Имя;
		СинонимПоля = Колонка.Имя + ПостфиксСинонима;
		
		КолонкиИсходнойТаблицы.Добавить(ИмяПоля + " КАК " + СинонимПоля);
		
	КонецЦикла;
	
	ПредставлениеКолонок = СтрСоединить(КолонкиИсходнойТаблицы, "," + Символы.ПС);
	Возврат ПредставлениеКолонок;
	
КонецФункции

// Получение имени реквизита документа по имени реквизита формы.
Функция ИмяРеквизита(Форма, ИмяЭлемента)
	
	Если ИмяЭлемента = "" Тогда
		
		ИмяРеквизита = "";
		
	Иначе
	
		Элемент = Форма.Элементы[ИмяЭлемента];
		ПутьКДанным = Элемент.ПутьКДанным;
		
		// Из пути к данным получаем имя реквизита.
		МассивПодстрок = СтрРазделить(ПутьКДанным, ".", Ложь);
		
		КоличествоПодстрок = МассивПодстрок.Количество();
		ИмяРеквизита = МассивПодстрок[КоличествоПодстрок - 1];
		
	КонецЕсли;
	
	Возврат ИмяРеквизита;
	
КонецФункции

Функция НедействующиеКонтрагентыОпределены(ПроверяемыеКонтрагенты)
	
	// Подготавливаем данные для проверки.
	ДанныеКонтрагентов = ПроверяемыеКонтрагенты.Скопировать();
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
		ДобавитьКолонкуОбластьДанных(ДанныеКонтрагентов);
		ДанныеКонтрагентов.ЗаполнитьЗначения(ОбщегоНазначения.ЗначениеРазделителяСеанса(), "ОбластьДанныхВспомогательныеДанные");
	КонецЕсли;
	
	// Удаляем пустую колонку из исходной таблицы.
	Если ПроверяемыеКонтрагенты.Колонки.Найти("Состояние") <> Неопределено Тогда
		ПроверяемыеКонтрагенты.Колонки.Удалить("Состояние");
	КонецЕсли;
	
	// Проверка веб-сервисом ФНС
	ПроверитьКонтрагентов(ДанныеКонтрагентов, , Ложь);
	
	Если ЕстьНепроверенныеКонтрагенты(ДанныеКонтрагентов) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Состояния = ПроверкаКонтрагентовКлиентСерверПовтИсп.СостоянияНедействующегоКонтрагента(Истина);
	
	ЗаполнитьСостояния(ПроверяемыеКонтрагенты, ДанныеКонтрагентов, Состояния);
	
	Возврат Истина; 
	
КонецФункции

Функция СправочникКонтрагентовИерархический()
	
	СвойстваСправочника = ПроверкаКонтрагентовКлиентСервер.СвойстваСправочникаКонтрагенты();
	Возврат Метаданные.Справочники[СвойстваСправочника.Имя].Иерархический;
	
КонецФункции

// Функция - Нужно показать предложение включить проверку контрагентов.
// 		Определяет, нужно ли показывать предложение на включение проверки с учетом следующего:
// 		1. Что есть право на использование или настройку проверки.
// 		2. Что проверка еще не включена.
// 		3. Что пользователь не нажал кнопку "БольшеНеПоказывать".
// 		4. Что с момента последнего отображения предложения уже прошло определенное время.
// Возвращаемое значение:
// Булево - Истина, если предложение нужно показывать.
//
Функция НужноПоказатьПредложениеВключитьПроверкуКонтрагентов() Экспорт
	
	НужноПоказатьПредложение =
		// В модели сервисов предложение не показываем.
		НЕ ОбщегоНазначенияПовтИсп.РазделениеВключено()
		// Проверяем наличие прав
		И (ЕстьПравоНаИспользованиеПроверки() 
		ИЛИ ЕстьПравоНаРедактированиеНастроек()) 
		// Определяем, включен ли сервис.
		И НЕ ПроверкаКонтрагентовВключена()
		// Проверяем, не нажал ли пользователь кнопку "Больше не показывать" в предложении на включение сервиса.
		И НЕ БольшеНеПоказыватьПредложениеПодключиться()
		// Проверяем, давно ли в последний раз показывалось предложение на включение сервиса.
		И ПоследнееОтображениеПредложенияНаВключениеСервисаБылоДавно();
	
	Возврат НужноПоказатьПредложение;

КонецФункции

Функция ПоследнееОтображениеПредложенияНаВключениеСервисаБылоДавно()
	
	ЧетыреЧаса = 60*60*4;
	ДатаПоследнегоОтображенияПредложенияНаВключениеСервиса = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"ПроверкаКонтрагентов", "ПроверкаКонтрагентов_ДатаПоследнегоОтображенияПредложенияНаВключениеСервиса");
	
	// Предложение включить сервис не показывалось вообще,
	// либо с момента последнего отображения предупреждения уже прошло 4 часа.
	ПредложениеПоказывалосьДавно = ДатаПоследнегоОтображенияПредложенияНаВключениеСервиса = Неопределено 
		ИЛИ ДатаПоследнегоОтображенияПредложенияНаВключениеСервиса + ЧетыреЧаса < ТекущаяДатаСеанса();
	
	Возврат ПредложениеПоказывалосьДавно;
	
КонецФункции

Функция ЕстьНепроверенныеКонтрагенты(ДанныеКонтрагентов)
	
	Отбор = Новый Структура();
	Отбор.Вставить("Состояние", Перечисления.СостоянияСуществованияКонтрагента.ПустаяСсылка());
	
	КоличествоКонтрагентовСПустымСостоянием = ДанныеКонтрагентов.НайтиСтроки(Отбор).Количество();
	
	Возврат КоличествоКонтрагентовСПустымСостоянием <> 0;
	
КонецФункции

#КонецОбласти

#Область ШаблоныИЗаполнениеТаблиц

// Функция - Шаблон таблицы, используемой для передачи данных в веб-сервис ФНС.
// Возвращаемое значение:
// ТаблицаЗначений - пустая таблица с колонками "Контрагент", "ИНН", "КПП", "Дата", "Состояние", "ДополнительныеПараметры"
//                   "ОбластьДанныхВспомогательныеДанные"(если есть подсистема РаботаВМоделиСервиса).
Функция ШаблонТаблицыДанныеКонтрагента()
	
	// Создаем таблицу
	ДанныеКонтрагентов = Новый ТаблицаЗначений;
	
	СвойстваСправочника = ПроверкаКонтрагентовКлиентСервер.СвойстваСправочникаКонтрагенты();
	Тип = "СправочникСсылка." + СвойстваСправочника.Имя;
	
	// Проверяемый контрагент
	ДанныеКонтрагентов.Колонки.Добавить("Контрагент", 	Новый ОписаниеТипов(Тип));
	// ИНН контрагента
	ДанныеКонтрагентов.Колонки.Добавить("ИНН", 			Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(12)));
	// КПП контрагента
	ДанныеКонтрагентов.Колонки.Добавить("КПП", 			Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(9)));
	// Дата, на которую выполняется проверка контрагента.
	ДанныеКонтрагентов.Колонки.Добавить("Дата", 		Новый ОписаниеТипов("Дата",,,Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	// Результат проверки контрагента.
	ДанныеКонтрагентов.Колонки.Добавить("Состояние", 	Новый ОписаниеТипов("ПеречислениеСсылка.СостоянияСуществованияКонтрагента"));
	// Результат проверки контрагента.
	ДанныеКонтрагентов.Колонки.Добавить("ДополнительныеПараметры", Новый ОписаниеТипов("Структура"));
	// Область данных
	ДобавитьКолонкуОбластьДанных(ДанныеКонтрагентов);

	Возврат ДанныеКонтрагентов;
	
КонецФункции

Функция ШаблонТаблицыДанныеКонтрагентаДляДокумента()
	
	// Создаем таблицу
	ДанныеКонтрагентов = ШаблонТаблицыДанныеКонтрагента();
	// Ссылка на документ, которому соответствует строка таблицы.
	ДанныеКонтрагентов.Колонки.Добавить("Ссылка", Документы.ТипВсеСсылки());

	Возврат ДанныеКонтрагентов;
	
КонецФункции

Процедура ДобавитьСтрокуВДанныеКонтрагентовВДокументе(
	Ссылка,
	ДанныеКонтрагентов, 
	Контрагент, 
	Дата,
	Состояние = Неопределено)
	
	// Добавляем в таблицу только разрешенных контрагентов
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Контрагенты.Ссылка КАК Контрагент,
		|	Контрагенты.%1 КАК ИНН,
		|	Контрагенты.%2 КАК КПП
		|ИЗ
		|	Справочник.%3 КАК Контрагенты
		|ГДЕ Контрагенты.Ссылка = &Контрагент";
		
	СвойстваСправочника = ПроверкаКонтрагентовКлиентСервер.СвойстваСправочникаКонтрагенты();
	Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		Запрос.Текст,
		СвойстваСправочника.ИНН,
		СвойстваСправочника.КПП,
		СвойстваСправочника.Имя);
		
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	ДанныеКонтрагента = Запрос.Выполнить().Выбрать();
	
	Пока ДанныеКонтрагента.Следующий() Цикл
	
		СтрокаОписания = ДанныеКонтрагентов.Добавить();
		СтрокаОписания.Ссылка			= Ссылка;
		СтрокаОписания.Контрагент		= Контрагент;
		СтрокаОписания.Дата				= Дата;
		СтрокаОписания.Состояние		= Состояние;
		
		СтрокаОписания.ИНН				= ДанныеКонтрагента.ИНН;
		СтрокаОписания.КПП				= ДанныеКонтрагента.КПП;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ШаблонТаблицыОписания()
	
	Описание = Новый ТаблицаЗначений();
	
	// ДокументСсылка - Документ-основание или счет-фактура. 
	// Если описывается счет-фактура, находящаяся в подвале документа, то указывается ссылка на счет-фактуру.
	Описание.Колонки.Добавить("Ссылка");
	// Дата, на которую должна выполняться проверка контрагента.
	Описание.Колонки.Добавить("Дата");
	// Элемент формы - поле контрагента или счета-фактуры, в котором отображается результат проверки контрагента.
	Описание.Колонки.Добавить("Элемент");
	// Элемент формы - группа, которая должна выделятся цветом, в зависимости от результата проверки контрагента.
	// Может быть пустой, тогда выделения фона цветом не будет.
	Описание.Колонки.Добавить("ЭлементРодитель");
	// СправочникСсылка - проверяемый контрагент.
	Описание.Колонки.Добавить("Контрагент");
	// Перечисления.СостоянияСуществованияКонтрагента - состояние контрагента.
	Описание.Колонки.Добавить("СостояниеКонтрагента");
	
	Возврат Описание;
	
КонецФункции

Функция ШаблонТаблицыОписанияТабличныхЧастей()
	
	Описание = Новый ТаблицаЗначений();
	
	// Имя таблицы формы, в которой располагается проверяемый контрагент.
	Описание.Колонки.Добавить("ИмяТаблицыФормы");
	// Имя табличной части документа, в которой располагается проверяемый контрагент.
	Описание.Колонки.Добавить("ИмяТабличнойЧасти");
	// Имя колонки таблицы формы, в которой находится контрагент.
	Описание.Колонки.Добавить("ИмяПоляСКонтрагентом");
	// Имя колонки табличной части документа, в которой находится контрагент.
	Описание.Колонки.Добавить("ИмяКолонкиСКонтрагентом");
	// Имя колонки таблицы формы, в которой находится дата, на которую необходимо выполнять проверку.
	// Может быть пустой, если в табличной части нет даты.
	Описание.Колонки.Добавить("ИмяПоляСДатой");
	// Имя колонки табличной части документа, в которой находится дата, на которую необходимо выполнять проверку.
	// Может быть пустой, если в табличной части нет даты.
	Описание.Колонки.Добавить("ИмяКолонкиСДатой");
	
	Возврат Описание;
	
КонецФункции

Функция ШаблонТаблицыОписанияКонтрагентовВСчетеФактуре()
	
	Описание = Новый ТаблицаЗначений();
	
	// Имя реквизита документа, содержащего контрагента.
	Описание.Колонки.Добавить("ИмяРеквизита");
	// Имя реквизита формы, содержащего состояние контрагента.
	Описание.Колонки.Добавить("ИмяРеквизитаССостоянием");
	
	Возврат Описание;
	
КонецФункции

Процедура ДополнитьОписаниеКонтрагентовВСчетеФактуре(
		Описание, 
		ИмяРеквизита, 
		ИмяРеквизитаССостоянием)
	
	СтрокаОписания = Описание.Добавить();
	// Имя реквизита документа, содержащего контрагента.
	СтрокаОписания.ИмяРеквизита				= ИмяРеквизита;
	// Имя реквизита формы, содержащего состояние контрагента.
	СтрокаОписания.ИмяРеквизитаССостоянием	= ИмяРеквизитаССостоянием;
	
КонецПроцедуры

Функция ОписаниеКонтрагентовВСчетеФактуре(Тип)
	
	ИменаРеквизитовКонтрагентов = Новый Массив;
	РаботаСКонтрагентамиПереопределяемый.ПолучитьИменаРеквизитовКонтрагентовВСчетеФактуре(Тип, ИменаРеквизитовКонтрагентов);
	
	Описание = ШаблонТаблицыОписанияКонтрагентовВСчетеФактуре();
	
	Для каждого ИмяРеквизитаКонтрагента Из ИменаРеквизитовКонтрагентов Цикл
		ДополнитьОписаниеКонтрагентовВСчетеФактуре(
			Описание,
			ИмяРеквизитаКонтрагента, 
			ИмяРеквизитаСостоянияКонтрагентаВСчетеФактуре(ИмяРеквизитаКонтрагента));
			
	КонецЦикла;
	
	Возврат Описание;
	
КонецФункции

// Функция - Описание табличных частей.
//
// Параметры:
//  Форма	 - УправляемаяФорма - Форма документа, в котором выполняется проверка контрагентов.
// Возвращаемое значение:
//  Описание - ТаблицаЗначений - Таблица с описанием расположения контрагентов в табличной части документа.
Функция ОписаниеТабличныхЧастей(Форма) Экспорт
	
	ОписаниеТабличныхЧастей = ШаблонТаблицыОписанияТабличныхЧастей();
	РаботаСКонтрагентамиПереопределяемый.СформироватьОписаниеДокументовСТабличнымиЧастями(Форма, ОписаниеТабличныхЧастей);
	
	Возврат ОписаниеТабличныхЧастей;
	
КонецФункции

Процедура ДобавитьКолонкуОбластьДанных(Таблица)
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
		Таблица.Колонки.Добавить("ОбластьДанныхВспомогательныеДанные", 	Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(7, 0, ДопустимыйЗнак.Неотрицательный)));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаКонтрагентовВДокументах

Процедура УстановитьУсловноеОформлениеСпискаДокументов(Список)
	
	СтандартнаяОбработка = Истина;
	РаботаСКонтрагентамиПереопределяемый.УстановитьУсловноеОформлениеСпискаДокументов(Список, СтандартнаяОбработка);
	
	// Если действия переопределили, то стандартную обработку не выполняем.
	Если НЕ СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	Оформление = Список.УсловноеОформление.Элементы.Добавить();
	Отбор = Оформление.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Отбор.Использование = Истина;
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СодержитНекорректныхКонтрагентов");
	Отбор.ПравоеЗначение = Истина;
	ЦветФона = Оформление.Оформление.Элементы.Найти("ЦветФона");
	Цвета = ПроверкаКонтрагентовВызовСервераПовтИсп.ЦветаРезультатовПроверки(); 
	ЦветФона.Значение = Цвета.ЦветФонаДокументаСНекорректнымиКонтрагентамиВСпискеДокументов;
	ЦветФона.Использование = Истина;
	
КонецПроцедуры

Процедура УстановитьПараметрыДинамическогоСписка(Список)
	
	ИспользованиеПроверкиВозможно = ПроверкаКонтрагентовВызовСервера.ИспользованиеПроверкиВозможно();
	Список.Параметры.УстановитьЗначениеПараметра("ИспользованиеПроверкиВозможно", ИспользованиеПроверкиВозможно);
	
КонецПроцедуры

Процедура ЗапомнитьНаличиеНекорректныхКонтрагентов(Форма)
	
	Если ПроверкаКонтрагентовКлиентСервер.ЭтоСчетФактура(Форма) Тогда
		
		Форма.РеквизитыПроверкиКонтрагентов.ЭтоСчетФактураСОшибкой = 
			ПроверкаКонтрагентовКлиентСерверПовтИсп.ЭтоСостояниеНедействующегоКонтрагента(Форма.РеквизитыПроверкиКонтрагентов.СостояниеКонтрагентов, Истина);
		
	Иначе
		
		Форма.РеквизитыПроверкиКонтрагентов.ЭтоДокументСОшибкой = ЭтоДокументСОшибкой(Форма);
		
		Если ПроверкаКонтрагентовКлиентСервер.ЭтоДокументСоСчетомФактуройВПодвале(Форма) Тогда
			Форма.РеквизитыПроверкиКонтрагентов.ЭтоСчетФактураСОшибкой = 
				ПроверкаКонтрагентовКлиентСерверПовтИсп.ЭтоСостояниеНедействующегоКонтрагента(Форма.РеквизитыПроверкиКонтрагентов.СостояниеКонтрагентовВСчетеФактуре, Истина);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ДанныеКонтрагентовВДокументе(Форма)
	
	ДанныеКонтрагентов = ШаблонТаблицыДанныеКонтрагентаДляДокумента();
	
	Если Форма.РеквизитыПроверкиКонтрагентов.ПроверкаИспользуется Тогда

		Если ПроверкаКонтрагентовКлиентСервер.ЭтоСчетФактура(Форма) Тогда
			
			// Определение объекта и ссылки.
			ОбъектИСсылкаПоФорме = ПроверкаКонтрагентовКлиентСервер.ОбъектИСсылкаПоФорме(Форма);
			ДокументОбъект       = ОбъектИСсылкаПоФорме.Объект;
			
			ЗаполнитьДанныеКонтрагентовВСчетеФактуре(ДокументОбъект, ДанныеКонтрагентов);
		Иначе
			
			// Заполняем данные по контрагенту из документа-основания.
			Если ПроверкаКонтрагентовКлиентСервер.ЭтоДокументСКонтрагентомВШапке(Форма) Тогда
				ЗаполнитьДанныеКонтрагентовВДокументеОсновании(Форма, ДанныеКонтрагентов);
			КонецЕсли;
			
			// Заполняем данные по контрагенту из счета-фактуры.
			Если ПроверкаКонтрагентовКлиентСервер.ЭтоДокументСоСчетомФактуройВПодвале(Форма) Тогда
				
				СчетФактура = ПроверкаКонтрагентовКлиентСервер.СчетФактура(Форма);
				Если ЗначениеЗаполнено(СчетФактура) Тогда
					ЗаполнитьДанныеКонтрагентовВСчетеФактуре(СчетФактура, ДанныеКонтрагентов);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Заполняем данные по контрагентам из табличных частей.
		Если ПроверкаКонтрагентовКлиентСервер.ЭтоДокументСКонтрагентомВТабличнойЧасти(Форма) Тогда
			ЗаполнитьДанныеКонтрагентовВТабличнойЧасти(Форма, ДанныеКонтрагентов);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДанныеКонтрагентов;

КонецФункции

Процедура ЗапомнитьРезультатПроверкиКонтрагентовВДокументе(Форма, ДанныеКонтрагентов)
	
	// Определение объекта и ссылки.
	ОбъектИСсылкаПоФорме 	= ПроверкаКонтрагентовКлиентСервер.ОбъектИСсылкаПоФорме(Форма);
	ДокументОбъект 			= ОбъектИСсылкаПоФорме.Объект;
	ДокументСсылка 			= ОбъектИСсылкаПоФорме.Ссылка;
	
	Описание = ОписаниеДокументов(Форма);
	
	// Если контрагент в шапке
	Если ПроверкаКонтрагентовКлиентСервер.ЭтоДокументСКонтрагентомВШапке(Форма) Тогда
				
		СтрокиПоДокументу = Описание.НайтиСтроки(Новый Структура("Ссылка", ДокументСсылка));
		Для каждого СтрокаОписания Из СтрокиПоДокументу Цикл
			
			Дата = ДатаВДокументе(ДокументОбъект);
			
			Отбор = Новый Структура("Ссылка, Контрагент, Дата", ДокументСсылка, СтрокаОписания.Контрагент, Дата); 
			ИтоговоеСостояние = ИтоговоеСостояниеКонтрагентаВДокументе(ДанныеКонтрагентов, Отбор);
			Форма.РеквизитыПроверкиКонтрагентов.СостояниеКонтрагента = ИтоговоеСостояние.СостояниеКонтрагента;
			
		КонецЦикла; 
		
	КонецЕсли;
	
	// Если есть счет-фактура на форме.
	Если ПроверкаКонтрагентовКлиентСервер.ЭтоДокументСоСчетомФактуройВПодвале(Форма) Тогда
		
		СтандартнаяОбработка = Истина;
		РаботаСКонтрагентамиПереопределяемый.ЗапомнитьРезультатПроверкиКонтрагентовСчетФактурыВДокументе(СтандартнаяОбработка, ДанныеКонтрагентов, Форма);
		
		Если СтандартнаяОбработка Тогда
			СчетФактура = ПроверкаКонтрагентовКлиентСервер.СчетФактура(Форма);
			
			Отбор = Новый Структура("Ссылка", СчетФактура); 
			ИтоговоеСостояние = ИтоговоеСостояниеКонтрагентаВДокументе(ДанныеКонтрагентов, Отбор);
			Форма.РеквизитыПроверкиКонтрагентов.СостояниеКонтрагентовВСчетеФактуре = ИтоговоеСостояние.СостояниеКонтрагента;
		КонецЕсли;
		
	КонецЕсли;
	
	// Если контрагент в ТЧ
	Если ПроверкаКонтрагентовКлиентСервер.ЭтоДокументСКонтрагентомВТабличнойЧасти(Форма) Тогда
		
		ЗапомнитьРезультатПроверкиКонтрагентовВТабличнойЧасти(Форма, ДанныеКонтрагентов);
		
	КонецЕсли;
		
	
КонецПроцедуры

Процедура ЗапомнитьРезультатПроверкиКонтрагентовВТабличнойЧасти(Форма, ДанныеКонтрагентов)
	
	// Определение объекта и ссылки.
	ОбъектИСсылкаПоФорме 	= ПроверкаКонтрагентовКлиентСервер.ОбъектИСсылкаПоФорме(Форма);
	ДокументОбъект 			= ОбъектИСсылкаПоФорме.Объект;
	ДокументСсылка 			= ОбъектИСсылкаПоФорме.Ссылка;
	
	Если ПроверкаКонтрагентовКлиентСервер.ЭтоДокументСКонтрагентомВТабличнойЧасти(Форма) Тогда
		
		ОписаниеТабличныхЧастей = ОписаниеТабличныхЧастей(Форма);
		
		// Перебираем все табличные части.
		Для каждого ОписаниеТабличнойЧасти Из ОписаниеТабличныхЧастей Цикл
			
			ИмяТабличнойЧасти 		= ОписаниеТабличнойЧасти.ИмяТабличнойЧасти;
			ИмяКолонкиСКонтрагентом	= ОписаниеТабличнойЧасти.ИмяКолонкиСКонтрагентом;
			
			ТабличнаяЧасть 			= ДокументОбъект[ОписаниеТабличнойЧасти.ИмяТабличнойЧасти];
			
			Для каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
				
				// Определение даты
				Дата 			= ДатаВСтрокеТабличнойЧасти(ДокументОбъект, ОписаниеТабличнойЧасти, СтрокаТабличнойЧасти);
				Контрагент 		= СтрокаТабличнойЧасти[ИмяКолонкиСКонтрагентом];
				
				// В результате проверки контрагента ищем нужного контрагента с нужной датой.
				СтрокиДанныхКонтрагентов = ДанныеКонтрагентов.НайтиСтроки(
					Новый Структура("Контрагент, Дата", Контрагент, Дата));
				
				Для каждого СтрокиДанныхКонтрагента Из СтрокиДанныхКонтрагентов Цикл
					СтрокаТабличнойЧасти.Состояние 					= СтрокиДанныхКонтрагента.Состояние;
					СтрокаТабличнойЧасти.ЭтоНекорректныйКонтрагент 	= 
						ПроверкаКонтрагентовКлиентСерверПовтИсп.ЭтоСостояниеНедействующегоКонтрагента(СтрокиДанныхКонтрагента.Состояние, Истина);
				КонецЦикла; 
				
			КонецЦикла;
		
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция РезультатПроверкиКонтрагентовВДокументе(Форма, ТекущийОбъект)
	
	ДокументОбъект 	= ТекущийОбъект;
	ДокументСсылка 	= ДокументОбъект.Ссылка; 
	
	ЭтоДокументСКонтрагентомВШапке 			= ПроверкаКонтрагентовКлиентСервер.ЭтоДокументСКонтрагентомВШапке(Форма); 
	ЭтоДокументСКонтрагентомВТабличнойЧасти = ПроверкаКонтрагентовКлиентСервер.ЭтоДокументСКонтрагентомВТабличнойЧасти(Форма);
	ЭтоДокументСоСчетомФактуройВПодвале 	= ПроверкаКонтрагентовКлиентСервер.ЭтоДокументСоСчетомФактуройВПодвале(Форма);
	ЭтоСчетФактура							= ПроверкаКонтрагентовКлиентСервер.ЭтоСчетФактура(Форма);
	
	СохраняемоеЗначение = Новый Соответствие;
	
	Если ЭтоДокументСКонтрагентомВШапке ИЛИ ЭтоДокументСКонтрагентомВТабличнойЧасти Тогда 
		// Документ-основание
		Если ЗначениеЗаполнено(Форма.РеквизитыПроверкиКонтрагентов.СостояниеКонтрагентов) Тогда
			СохраняемоеЗначение.Вставить(ДокументСсылка, Форма.РеквизитыПроверкиКонтрагентов.ЭтоДокументСОшибкой);
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтоДокументСоСчетомФактуройВПодвале Тогда 
		// Счет-фактура
		СчетФактура = ПроверкаКонтрагентовКлиентСервер.СчетФактура(Форма);
		Если ЗначениеЗаполнено(СчетФактура) И ЗначениеЗаполнено(Форма.РеквизитыПроверкиКонтрагентов.СостояниеКонтрагентовВСчетеФактуре) Тогда
			СохраняемоеЗначение.Вставить(СчетФактура, Форма.РеквизитыПроверкиКонтрагентов.ЭтоСчетФактураСОшибкой);
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтоСчетФактура Тогда 
		
		СтандартнаяОбработка = Истина;
		
		РаботаСКонтрагентамиПереопределяемый.СохраняемыеРезультатыПроверкиСчетФактурыВДокументе(СтандартнаяОбработка, СохраняемоеЗначение, Форма);
		
		Если СтандартнаяОбработка Тогда
			СчетФактура = ПроверкаКонтрагентовКлиентСервер.СчетФактура(Форма);
			Если ЗначениеЗаполнено(СчетФактура) И ЗначениеЗаполнено(Форма.РеквизитыПроверкиКонтрагентов.СостояниеКонтрагентовВСчетеФактуре) Тогда
				СохраняемоеЗначение.Вставить(СчетФактура, Форма.РеквизитыПроверкиКонтрагентов.ЭтоСчетФактураСОшибкой);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СохраняемоеЗначение;
	
КонецФункции

Процедура ЗаполнитьДанныеКонтрагентовВТабличнойЧасти(Форма, ДанныеКонтрагентов)
	
	// Определение объекта и ссылки.
	ОбъектИСсылкаПоФорме 	= ПроверкаКонтрагентовКлиентСервер.ОбъектИСсылкаПоФорме(Форма);
	ДокументОбъект 			= ОбъектИСсылкаПоФорме.Объект;
	ДокументСсылка 			= ОбъектИСсылкаПоФорме.Ссылка;
	
	ОписаниеТабличныхЧастей = ОписаниеТабличныхЧастей(Форма);
	
	Для каждого ОписаниеТабличнойЧасти Из ОписаниеТабличныхЧастей Цикл
		
		ИмяТабличнойЧасти 		= ОписаниеТабличнойЧасти.ИмяТабличнойЧасти;
		ИмяКолонкиСКонтрагентом	= ОписаниеТабличнойЧасти.ИмяКолонкиСКонтрагентом;
		
		ТабличнаяЧасть 			= ДокументОбъект[ОписаниеТабличнойЧасти.ИмяТабличнойЧасти];
		
		Для каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
			
			// Определение даты
			Дата = ДатаВСтрокеТабличнойЧасти(ДокументОбъект, ОписаниеТабличнойЧасти, СтрокаТабличнойЧасти);

			// Заполнение данных контрагента.
			ДополнитьДанныеКонтрагентовВДокументе(
				ДокументСсылка,
				ДанныеКонтрагентов,
				СтрокаТабличнойЧасти[ИмяКолонкиСКонтрагентом],
				Дата,
				СтрокаТабличнойЧасти.Состояние);
		
		КонецЦикла; 
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеКонтрагентовВДокументеОсновании(Форма, ДанныеКонтрагентов)
	
	Если ПроверкаКонтрагентовКлиентСервер.ЭтоДокументСКонтрагентомВШапке(Форма) Тогда
		
		// Определение объекта и ссылки.
		ОбъектИСсылкаПоФорме 	= ПроверкаКонтрагентовКлиентСервер.ОбъектИСсылкаПоФорме(Форма);
		ДокументОбъект 			= ОбъектИСсылкаПоФорме.Объект;
		ДокументСсылка 			= ОбъектИСсылкаПоФорме.Ссылка;
		
		ДополнитьДанныеКонтрагентовВДокументе(
			ДокументСсылка,
			ДанныеКонтрагентов,
			ДокументОбъект.Контрагент,
			ДатаВДокументе(ДокументОбъект),
			Форма.РеквизитыПроверкиКонтрагентов.СостояниеКонтрагента);
			
	КонецЕсли;
	
КонецПроцедуры

Процедура ОчиститьРезультатыПредыдущихПроверок(Форма, ДополнительныеПараметры)
	
	// Определение объекта и ссылки.
	ОбъектИСсылкаПоФорме 	= ПроверкаКонтрагентовКлиентСервер.ОбъектИСсылкаПоФорме(Форма);
	ДокументСсылка 			= ОбъектИСсылкаПоФорме.Ссылка;
	
	ЭтоДокументСКонтрагентомВШапке 			= ПроверкаКонтрагентовКлиентСервер.ЭтоДокументСКонтрагентомВШапке(Форма); 
	ЭтоДокументСКонтрагентомВТабличнойЧасти = ПроверкаКонтрагентовКлиентСервер.ЭтоДокументСКонтрагентомВТабличнойЧасти(Форма);
	ЭтоДокументСоСчетомФактуройВПодвале 	= ПроверкаКонтрагентовКлиентСервер.ЭтоДокументСоСчетомФактуройВПодвале(Форма);
	ЭтоСчетФактура							= ПроверкаКонтрагентовКлиентСервер.ЭтоСчетФактура(Форма);

	Если ЭтоДокументСКонтрагентомВШапке ИЛИ ЭтоДокументСоСчетомФактуройВПодвале ИЛИ ЭтоСчетФактура Тогда

		Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
			И ДополнительныеПараметры.Свойство("ИзменившаясяТаблица") Тогда
			// Изменилась строка в ТЧ. Ничего делать не нужно.
		Иначе
			
			ПустоеСостояние = Перечисления.СостоянияСуществованияКонтрагента.ПустаяСсылка();
			
			Если ЭтоСчетФактура Тогда
				
				// Очищаем состояние для каждого контрагента.
				Описание = ОписаниеКонтрагентовВСчетеФактуре(ТипЗнч(ДокументСсылка));
				Для каждого СтрокаОписания Из Описание Цикл
					Если Форма.РеквизитыПроверкиКонтрагентов.Свойство(СтрокаОписания.ИмяРеквизитаССостоянием) Тогда
						Форма.РеквизитыПроверкиКонтрагентов[СтрокаОписания.ИмяРеквизитаССостоянием] = ПустоеСостояние;
					КонецЕсли;
				КонецЦикла;
				
				// Очищаем итоговое состояние
				Форма.РеквизитыПроверкиКонтрагентов.ЭтоСчетФактураСОшибкой = Ложь;
				
			Иначе
				
				ОчиститьРеквизитФормы(Форма, "СостояниеКонтрагента", 				ПустоеСостояние);
				ОчиститьРеквизитФормы(Форма, "СостояниеКонтрагентовВСчетеФактуре", 	ПустоеСостояние);
				ОчиститьРеквизитФормы(Форма, "ЭтоСчетФактураСОшибкой", 				Ложь);
				ОчиститьРеквизитФормы(Форма, "ЭтоДокументСОшибкой", 				Ложь);
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
		
	Если ЭтоДокументСКонтрагентомВТабличнойЧасти Тогда
		
		// Определение объекта и ссылки.
		ОбъектИСсылкаПоФорме 	= ПроверкаКонтрагентовКлиентСервер.ОбъектИСсылкаПоФорме(Форма);
		ДокументОбъект 			= ОбъектИСсылкаПоФорме.Объект;
		
		// Очищаем состояния в определенной строке.
		Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
			И ДополнительныеПараметры.Свойство("ИзменившаясяТаблица") Тогда
			
			// Это передано имя таблицы формы и идентификатор строки.
			СвойстваТаблица = ДополнительныеПараметры.ИзменившаясяТаблица;
			
			ОписаниеТабличныхЧастей = ОписаниеТабличныхЧастей(Форма);
			ОписанияТабличныхЧастей = ОписаниеТабличныхЧастей.НайтиСтроки(Новый Структура("ИмяТаблицыФормы", СвойстваТаблица.ИмяТаблицы));
			
			Для каждого ОписаниеТабличнойЧасти Из ОписанияТабличныхЧастей Цикл
				ТабличнаяЧасть = ДокументОбъект[ОписаниеТабличнойЧасти.ИмяТабличнойЧасти];
				СтрокаТабличнойЧасти = ТабличнаяЧасть.НайтиПоИдентификатору(СвойстваТаблица.Идентификатор);
				
				ОчиститьРезультатПроверкиВСтроке(СтрокаТабличнойЧасти);
				
			КонецЦикла; 
			
		Иначе
			// Очищаем состояния в нескольких строках.
			ОчиститьРезультатПроверкиВСтроках(Форма, ДополнительныеПараметры);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЭтоДокументСКонтрагентомВШапке ИЛИ ЭтоДокументСКонтрагентомВТабличнойЧасти Тогда
		Форма.РеквизитыПроверкиКонтрагентов.ЭтоДокументСОшибкой = ЭтоДокументСОшибкой(Форма);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОчиститьРезультатПроверкиВСтроках(Форма, ДополнительныеПараметры)
	
	Если Форма.РеквизитыПроверкиКонтрагентов.ПроверкаИспользуется Тогда
		
		// Определение объекта и ссылки.
		ОбъектИСсылкаПоФорме 	= ПроверкаКонтрагентовКлиентСервер.ОбъектИСсылкаПоФорме(Форма);
		ДокументОбъект 			= ОбъектИСсылкаПоФорме.Объект;
		
		Если ПроверкаКонтрагентовКлиентСервер.ЭтоДокументСКонтрагентомВТабличнойЧасти(Форма) Тогда
		
			ОписаниеТабличныхЧастей = ОписаниеТабличныхЧастей(Форма);
			
			// Перебираем все табличные части.
			Для каждого ОписаниеТабличнойЧасти Из ОписаниеТабличныхЧастей Цикл
				
				ИмяТабличнойЧасти 		= ОписаниеТабличнойЧасти.ИмяТабличнойЧасти;
				ИмяКолонкиСКонтрагентом	= ОписаниеТабличнойЧасти.ИмяКолонкиСКонтрагентом;
				ИмяКолонкиСДатой		= ОписаниеТабличнойЧасти.ИмяКолонкиСДатой;
				
				ТабличнаяЧасть 			= ДокументОбъект[ОписаниеТабличнойЧасти.ИмяТабличнойЧасти];
				
				СтрокиТабличнойЧасти = ТабличнаяЧасть;
				Если ДополнительныеПараметры.Свойство("ИзменившийсяСчетФактура") Тогда // Произошла запись счета-фактуры.
					// Очищаем все строки
					СтрокиТабличнойЧасти = ТабличнаяЧасть;
				ИначеЕсли ДополнительныеПараметры.Свойство("ИзменившаясяДата") 
						И ЗначениеЗаполнено(ИмяКолонкиСДатой) Тогда // Изменилась дата в шапке документа.
					// Очищаем строки с пустой датой.
					СтрокиТабличнойЧасти = ТабличнаяЧасть.НайтиСтроки(Новый Структура(ИмяКолонкиСДатой, Дата(1,1,1)));
				ИначеЕсли ДополнительныеПараметры.Свойство("ИзменившаясяДата") 
						И НЕ ЗначениеЗаполнено(ИмяКолонкиСДатой) Тогда // Изменилась дата в шапке документа.
					// Если в табличной части нет поля с датой, то очищаем все состояния при изменении даты.
					СтрокиТабличнойЧасти = ТабличнаяЧасть;
				ИначеЕсли ДополнительныеПараметры.Свойство("ИзменившийсяКонтрагент") Тогда // Произошло событие записи контрагента.
					// Очищаем строки с указанным контрагентом.
					Контрагент = ДополнительныеПараметры.ИзменившийсяКонтрагент;
					СтрокиТабличнойЧасти = ТабличнаяЧасть.НайтиСтроки(Новый Структура(ИмяКолонкиСКонтрагентом, Контрагент));
				ИначеЕсли ДополнительныеПараметры.Свойство("ИзменившеесяПоле") Тогда // Изменился контрагент в шапке.
					// Ничего делать не нужно
					Возврат;
				Иначе
					СтрокиТабличнойЧасти = ТабличнаяЧасть;
				КонецЕсли;
				
				Для каждого СтрокаТабличнойЧасти Из СтрокиТабличнойЧасти Цикл
					 ОчиститьРезультатПроверкиВСтроке(СтрокаТабличнойЧасти);
				КонецЦикла;
						
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОчиститьРезультатПроверкиВСтроке(Строка)
	
	Строка.Состояние 					= ПредопределенноеЗначение("Перечисление.СостоянияСуществованияКонтрагента.ПустаяСсылка");
	Строка.ЭтоНекорректныйКонтрагент	= Ложь;
	
КонецПроцедуры

Функция ДатаВДокументе(ДокументОбъект)
	
	Дата = Дата(1,1,1);
	РаботаСКонтрагентамиПереопределяемый.ОпределитьДатуВДокументе(ДокументОбъект, Дата);
	
	Возврат НачалоДня(Дата); 
	
КонецФункции

Функция ЭтоДокументСОшибкой(Форма)
	
	// Определение объекта и ссылки.
	ОбъектИСсылкаПоФорме 	= ПроверкаКонтрагентовКлиентСервер.ОбъектИСсылкаПоФорме(Форма);
	ДокументОбъект 			= ОбъектИСсылкаПоФорме.Объект;
		
	ЭтоДокументСКонтрагентомВШапке 			= ПроверкаКонтрагентовКлиентСервер.ЭтоДокументСКонтрагентомВШапке(Форма);
	ЭтоДокументСКонтрагентомВТабличнойЧасти = ПроверкаКонтрагентовКлиентСервер.ЭтоДокументСКонтрагентомВТабличнойЧасти(Форма);
	
	ЕстьОшибкаВШапке 			= Ложь;
	ЕстьОшибкаВТабличнойЧасти 	= Ложь;
	
	Если ЭтоДокументСКонтрагентомВШапке Тогда
		ЕстьОшибкаВШапке = ПроверкаКонтрагентовКлиентСерверПовтИсп.ЭтоСостояниеНедействующегоКонтрагента(Форма.РеквизитыПроверкиКонтрагентов.СостояниеКонтрагента, Истина);
		Если ЕстьОшибкаВШапке Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтоДокументСКонтрагентомВТабличнойЧасти Тогда
		
		ОписаниеТабличныхЧастей = ОписаниеТабличныхЧастей(Форма);
		
		// Перебираем все табличные части.
		Для каждого ОписаниеТабличнойЧасти Из ОписаниеТабличныхЧастей Цикл
			
			ИмяТабличнойЧасти 	= ОписаниеТабличнойЧасти.ИмяТабличнойЧасти;
			ТабличнаяЧасть 		= ДокументОбъект[ОписаниеТабличнойЧасти.ИмяТабличнойЧасти];
			
			Для каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
				ЕстьОшибкаВТабличнойЧасти = ПроверкаКонтрагентовКлиентСерверПовтИсп.ЭтоСостояниеНедействующегоКонтрагента(СтрокаТабличнойЧасти.Состояние, Истина);
				Если ЕстьОшибкаВТабличнойЧасти Тогда
					Возврат Истина;
				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ЕстьОшибкаВШапке ИЛИ ЕстьОшибкаВТабличнойЧасти;
	
КонецФункции

Процедура ОчиститьРеквизитФормы(Форма, ИмяРеквизита, НовоеЗначение)
	
	Если ЕстьРеквизитФормы(Форма, "РеквизитыПроверкиКонтрагентов")
		И Форма.РеквизитыПроверкиКонтрагентов.Свойство(ИмяРеквизита) Тогда
		
		Форма.РеквизитыПроверкиКонтрагентов[ИмяРеквизита] = НовоеЗначение;
		
	КонецЕсли;

КонецПроцедуры

Процедура ВосстановитьРезультатПроверкиКонтрагентовВТабличныхЧастяхПослеЗаписи(Форма, ТекущийОбъект)
	
	ЭтоДокументСКонтрагентомВТабличнойЧасти = ПроверкаКонтрагентовКлиентСервер.ЭтоДокументСКонтрагентомВТабличнойЧасти(Форма);
	
	// Восстанавливаем результат проверки в табличной части.
	Если ЭтоДокументСКонтрагентомВТабличнойЧасти Тогда
		
		ДанныеКонтрагентов = Неопределено;
		Если ТекущийОбъект.ДополнительныеСвойства.Свойство("ДанныеКонтрагентов", ДанныеКонтрагентов) Тогда
			ЗапомнитьРезультатПроверкиКонтрагентовВТабличнойЧасти(Форма, ДанныеКонтрагентов);
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

Процедура ПрисоединитьОписание(Приемник, Источник)
	
	Для Каждого СтрокаИсточника Из Источник Цикл
		НоваяСтрокаПриемника = Приемник.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаПриемника, СтрокаИсточника);
	КонецЦикла;
	
КонецПроцедуры

Процедура УправлениеФормойПриСозданииНаСервере(Форма)

	ЭтоДокументСКонтрагентомВТабличнойЧасти = ПроверкаКонтрагентовКлиентСервер.ЭтоДокументСКонтрагентомВТабличнойЧасти(Форма);
	
	Если ЭтоДокументСКонтрагентомВТабличнойЧасти Тогда
		// Реквизиты объекта
		ДобавитьКолонкиТабличнойЧастиСРезультатамиПроверкиВТабличныеЧасти(Форма);
		// Элементы формы
		ДобавитьКолонкиТаблицыФормыСРезультатамиПроверкиВТабличныеЧасти(Форма);
		// Условное оформление
		УстановитьУсловноеОформлениеТабличнойЧастиДокумента(Форма);
	КонецЕсли;

КонецПроцедуры

Процедура ЗапомнитьРезультатПроверкиКонтрагентов(Форма, ДанныеКонтрагентов)
	
	// Определение объекта и ссылки.
	ОбъектИСсылкаПоФорме 	= ПроверкаКонтрагентовКлиентСервер.ОбъектИСсылкаПоФорме(Форма);
	ДокументСсылка 			= ОбъектИСсылкаПоФорме.Ссылка; 

	// Корректность каждого контрагента.
	Если ПроверкаКонтрагентовКлиентСервер.ЭтоСчетФактура(Форма) Тогда
		ЗапомнитьРезультатПроверкиКонтрагентовВСчетеФактуре(Форма, ДанныеКонтрагентов);
	Иначе
		ЗапомнитьРезультатПроверкиКонтрагентовВДокументе(Форма, ДанныеКонтрагентов);
	КонецЕсли;
	
	// Общее состояние по счету-фактуре.
	Отбор = Новый Структура("Ссылка", ДокументСсылка);
	ИтоговоеСостояние = ИтоговоеСостояниеКонтрагентаВДокументе(ДанныеКонтрагентов, Отбор);
	Форма.РеквизитыПроверкиКонтрагентов.СостояниеКонтрагентов = ИтоговоеСостояние.СостояниеКонтрагента;
	
	// Корректность всего документа в целом.
	ЗапомнитьНаличиеНекорректныхКонтрагентов(Форма);
	
	// Обновляем кэш
	ЗапомнитьСостояниеКонтрагентовНеСовпадающихСКэшем(Форма, ДанныеКонтрагентов);
	
КонецПроцедуры

Процедура ЗапомнитьСостояниеКонтрагентовНеСовпадающихСКэшем(Форма, ДанныеКонтрагентов)
	
	// Получаем результат проверки контрагента из кэша
	ДанныеКонтрагентовИзКэша = Неопределено;
	Если ЗначениеЗаполнено(Форма.РеквизитыПроверкиКонтрагентов.АдресДанныхКонтрагентовИзКэша)
		И ЭтоАдресВременногоХранилища(Форма.РеквизитыПроверкиКонтрагентов.АдресДанныхКонтрагентовИзКэша) Тогда
		
		ДанныеКонтрагентовИзКэша = ПолучитьИзВременногоХранилища(Форма.РеквизитыПроверкиКонтрагентов.АдресДанныхКонтрагентовИзКэша);
	Иначе
		Возврат;
	КонецЕсли;
	
	РазличающиесяДанныеКонтрагентов = ДанныеКонтрагентовРазличающиесяМеждуКэшемИСервисомФНС(ДанныеКонтрагентов, ДанныеКонтрагентовИзКэша).Выгрузить();
	
	СегодняшнийДень = НачалоДня(ТекущаяДатаСеанса());
	
	// Сохраняем в кэш обновленные состояния только за сегодняшний день.
	Для каждого ДанныеКонтрагента Из РазличающиесяДанныеКонтрагентов Цикл
		
		Если ЗначениеЗаполнено(ДанныеКонтрагента.Дата)
			И НачалоДня(ДанныеКонтрагента.Дата) = СегодняшнийДень Тогда
			
			СохранитьРезультатыПроверкиКонтрагентаВРегистр(ДанныеКонтрагента);
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Процедура ПрорисоватьСостоянияКонтрагентовВДокументе(Форма, СостояниеПроверки, ДополнительныеПараметры = Неопределено)
	
	СтандартнаяОбработка = Истина;
	РаботаСКонтрагентамиПереопределяемый.ПрорисоватьСостоянияКонтрагентовВДокументе(Форма, СостояниеПроверки, 
		ДополнительныеПараметры, СтандартнаяОбработка);
		
	// Если действия по отображению результата проверки переопределили, то стандартную обработку не выполняем.
	Если НЕ СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоДокументСКонтрагентомВШапке 			= ПроверкаКонтрагентовКлиентСервер.ЭтоДокументСКонтрагентомВШапке(Форма); 
	ЭтоДокументСКонтрагентомВТабличнойЧасти = ПроверкаКонтрагентовКлиентСервер.ЭтоДокументСКонтрагентомВТабличнойЧасти(Форма);
	ЭтоДокументСоСчетомФактуройВПодвале 	= ПроверкаКонтрагентовКлиентСервер.ЭтоДокументСоСчетомФактуройВПодвале(Форма);
	ЭтоСчетФактура							= ПроверкаКонтрагентовКлиентСервер.ЭтоСчетФактура(Форма);
	
	Если ЭтоДокументСКонтрагентомВШапке
		ИЛИ ЭтоДокументСоСчетомФактуройВПодвале
		ИЛИ ЭтоСчетФактура Тогда
		
		Если ДополнительныеПараметры = Неопределено Тогда
			Элемент = Неопределено;
		ИначеЕсли ДополнительныеПараметры.Свойство("ИзменившаясяТаблица") Тогда
			// Изменилась строка в ТЧ. Ничего делать не нужно.
			Возврат;
		ИначеЕсли ДополнительныеПараметры.Свойство("ИзменившеесяПоле") Тогда
			// Это поле с контрагентом или счетом-фактурой.
			Элемент = Форма.Элементы[ДополнительныеПараметры.ИзменившеесяПоле];
		Иначе
			Элемент = Неопределено;
		КонецЕсли;
		
		Описание = ОписаниеДокументов(Форма);
		СчетФактура = ПроверкаКонтрагентовКлиентСервер.СчетФактура(Форма);
		
		Для каждого СтрокаОписания Из Описание Цикл
		
			// Прорисовываем результат либо для всех элементов, либо только для переданного.
			Если Элемент = Неопределено ИЛИ Элемент = СтрокаОписания.Элемент Тогда
				
				ПараметрыПрорисовки = Новый Структура;
				ПараметрыПрорисовки.Вставить("СостояниеКонтрагента", 	СтрокаОписания.СостояниеКонтрагента);
				
				ПараметрыПрорисовки.Вставить("ЭлементРодитель", 		СтрокаОписания.ЭлементРодитель);
				ПараметрыПрорисовки.Вставить("Элемент", 				СтрокаОписания.Элемент);
				
				// Разный алгоритм для счета-фактуры и обычного контрагента.
				Если ЭтоДокументСоСчетомФактуройВПодвале И СчетФактура = СтрокаОписания.Ссылка Тогда 
					КонтрагентЗаполнен  	= ВСчетеФактуреЗаполненХотяБыОдинКонтрагент(СчетФактура);
					КонтрагентовНесколько 	= Истина;
				Иначе
					КонтрагентЗаполнен 		= ЗначениеЗаполнено(СтрокаОписания.Контрагент);
					КонтрагентовНесколько 	= Ложь;
				КонецЕсли;
				ПараметрыПрорисовки.Вставить("КонтрагентЗаполнен", 		КонтрагентЗаполнен);
				ПараметрыПрорисовки.Вставить("КонтрагентовНесколько", 	КонтрагентовНесколько);
				
				ПроверкаКонтрагентовКлиентСервер.УстановитьТекстПодсказкиВДокументе(ПараметрыПрорисовки, СостояниеПроверки);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
		
	Если ЭтоДокументСКонтрагентомВТабличнойЧасти Тогда
		
		// Скрываем колонку с картинкой в табличной части, если проверка не используется.
		Если НЕ Форма.РеквизитыПроверкиКонтрагентов.ПроверкаИспользуется Тогда
			
			ОписаниеТабличныхЧастей = ОписаниеТабличныхЧастей(Форма);
			Для каждого ОписаниеТабличнойЧасти Из ОписаниеТабличныхЧастей Цикл
				
				Элементы 		= Форма.Элементы;
				ТаблицаФормы 	= Элементы[ОписаниеТабличнойЧасти.ИмяТаблицыФормы];
				
				ПолеКартинки = Элементы.Найти(ПроверкаКонтрагентовКлиентСервер.ИмяПоляКартинки(ТаблицаФормы));
				Если ПолеКартинки <> Неопределено Тогда
					
					ПолеКартинки.Видимость = Ложь;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

Процедура СохранитьРезультатПроверкиКонтрагентов(Форма, ТекущийОбъект)
	
	Если Форма.РеквизитыПроверкиКонтрагентов.ПроверкаИспользуется Тогда
		
		СохраняемоеЗначение = РезультатПроверкиКонтрагентовВДокументе(Форма, ТекущийОбъект);
		
		УстановитьПривилегированныйРежим(Истина);
		СохранитьРезультатыПроверкиКонтрагентовВДокументеВРегистр(СохраняемоеЗначение);
			
	КонецЕсли;
	
КонецПроцедуры

Функция РезультатПроверкиКонтрагентовВДокументеСовпадаетСДаннымиФНС(РеквизитыПроверкиКонтрагентов) Экспорт
	
	// Соединяем результаты проверки с исходной таблицей.
	Запрос = Новый Запрос;
	
	// Получаем данные контрагентов как результат работы фонового задания.
	ДанныеКонтрагентов = Неопределено;
	Если ЗначениеЗаполнено(РеквизитыПроверкиКонтрагентов.АдресХранилища)
		И ЭтоАдресВременногоХранилища(РеквизитыПроверкиКонтрагентов.АдресХранилища) Тогда
		
		РезультатРаботыФоновогоЗадания = ПолучитьИзВременногоХранилища(РеквизитыПроверкиКонтрагентов.АдресХранилища);
		
		Если РезультатРаботыФоновогоЗадания = Неопределено Тогда
			// Если фоновое задание завершилось, но результат пустой, то прорисовываем результат из кэша.
			Возврат Истина;
		Иначе
			Если РезультатРаботыФоновогоЗадания.Свойство("НетДоступаКВебСервисуФНС") Тогда
				// Если нет доступа к сервису ФНС, то прорисовываем результат из кэша.
				Возврат Истина;
			Иначе
				// Фоновое задание отработало
				ДанныеКонтрагентов = РезультатРаботыФоновогоЗадания.ДанныеКонтрагентов;
			КонецЕсли;
		КонецЕсли;
	Иначе
		// Если фоновое задание завершилось, но результат пустой, то прорисовываем результат из кэша.
		Возврат Истина;
	КонецЕсли;
	
	Если ДанныеКонтрагентов = Неопределено Тогда
		// Если фоновое задание завершилось, но результат пустой, то прорисовываем результат из кэша.
		Возврат Истина;
	КонецЕсли;
	
	// Получаем результат проверки контрагента из кэша
	ДанныеКонтрагентовИзКэша = Неопределено;
	Если ЗначениеЗаполнено(РеквизитыПроверкиКонтрагентов.АдресДанныхКонтрагентовИзКэша)
		И ЭтоАдресВременногоХранилища(РеквизитыПроверкиКонтрагентов.АдресДанныхКонтрагентовИзКэша) Тогда
		
		ДанныеКонтрагентовИзКэша = ПолучитьИзВременногоХранилища(РеквизитыПроверкиКонтрагентов.АдресДанныхКонтрагентовИзКэша);
		
	Иначе
		// Если фоновое задание завершилось, но в кэше пусто, то прорисовываем результат от сервиса ФНС.
		Возврат Ложь;
	КонецЕсли;
	
	ВыборкаНесовпадающихСостояний = ДанныеКонтрагентовРазличающиесяМеждуКэшемИСервисомФНС(ДанныеКонтрагентов, ДанныеКонтрагентовИзКэша).Выбрать();
	
	Возврат ВыборкаНесовпадающихСостояний.Количество() = 0;
	
КонецФункции

Функция ДанныеКонтрагентовРазличающиесяМеждуКэшемИСервисомФНС(ДанныеКонтрагентов, ДанныеКонтрагентовИзКэша)
	
	Запрос = Новый Запрос;
	
	ПоместитьТаблицуЗначенийВоВременнуюТаблицу(ДанныеКонтрагентовИзКэша, Запрос, "ДанныеКонтрагентовИзКэша", "ИзКэша", "ДополнительныеПараметры");
	ПоместитьТаблицуЗначенийВоВременнуюТаблицу(ДанныеКонтрагентов,       Запрос, "ДанныеКонтрагентов", , "ДополнительныеПараметры");
	
	// В таблице оставляем строки с различающимся состоянием
	Запрос.Текст = Запрос.Текст + "
	                              |ВЫБРАТЬ
	                              |	" + ПредставлениеКолонок(ДанныеКонтрагентовИзКэша, "ДанныеКонтрагентовИзКэша.", "ИзКэша", "ДополнительныеПараметры") + ",
	                              |	" + ПредставлениеКолонок(ДанныеКонтрагентов, "ДанныеКонтрагентов.",, "ДополнительныеПараметры") + "
	                              |ИЗ
	                              |	ДанныеКонтрагентовИзКэша КАК ДанныеКонтрагентовИзКэша
	                              |		ПОЛНОЕ СОЕДИНЕНИЕ ДанныеКонтрагентов КАК ДанныеКонтрагентов
	                              |		ПО ДанныеКонтрагентовИзКэша.Контрагент = ДанныеКонтрагентов.Контрагент
	                              |			И ДанныеКонтрагентовИзКэша.ИНН = ДанныеКонтрагентов.ИНН
	                              |			И ДанныеКонтрагентовИзКэша.КПП = ДанныеКонтрагентов.КПП
	                              |			И ДанныеКонтрагентовИзКэша.Ссылка = ДанныеКонтрагентов.Ссылка
	                              |			И (НАЧАЛОПЕРИОДА(ДанныеКонтрагентовИзКэша.Дата, ДЕНЬ) = НАЧАЛОПЕРИОДА(ДанныеКонтрагентов.Дата, ДЕНЬ))
	                              |ГДЕ
	                              |	ЕСТЬNULL(ДанныеКонтрагентов.Состояние,Неопределено) <> ЕСТЬNULL(ДанныеКонтрагентовИзКэша.Состояние,Неопределено)";
		
	Возврат Запрос.Выполнить();
	
КонецФункции

Процедура ПредотвратитьСбросРедактируемогоЗначения(Форма)
	
	// Обход особенности платформы, когда затирается редактируемое значение
	// в текущем элементе при изменении формы.
	Если НЕ ОбщегоНазначенияКлиентСервер.ЭтоВебКлиент() Тогда
		Если ТипЗнч(Форма.ТекущийЭлемент) = Тип("ПолеФормы") И Форма.ТекущийЭлемент.Вид = ВидПоляФормы.ПолеВвода Тогда
			Форма.ТекущийЭлемент.ОбновлениеТекстаРедактирования = ОбновлениеТекстаРедактирования.ПриИзмененииЗначения;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#Область УправлениеФормами

Процедура УстановитьУсловноеОформлениеТабличнойЧастиДокумента(Форма)
	
	СтандартнаяОбработка = Истина;
	РаботаСКонтрагентамиПереопределяемый.УстановитьУсловноеОформлениеТабличнойЧастиДокумента(Форма, СтандартнаяОбработка);
	
	// Если действия переопределили, то стандартную обработку не выполняем.
	Если НЕ СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	СостоянияНедействующегоКонтрагента 			= ПроверкаКонтрагентовКлиентСерверПовтИсп.СостоянияНедействующегоКонтрагента(Истина);
	СписокСостоянийНедействующегоКонтрагента 	= Новый СписокЗначений;
	СписокСостоянийНедействующегоКонтрагента.ЗагрузитьЗначения(СостоянияНедействующегоКонтрагента);
	
	ОписаниеТабличныхЧастей = ОписаниеТабличныхЧастей(Форма);
	Для каждого ОписаниеТабличнойЧасти Из ОписаниеТабличныхЧастей Цикл
		
		ИмяТабличнойЧасти 		= ОписаниеТабличнойЧасти.ИмяТабличнойЧасти;
		ИмяПоляСКонтрагентом 	= ОписаниеТабличнойЧасти.ИмяПоляСКонтрагентом;
		ПолеСКонтрагентом 		= Форма.Элементы[ОписаниеТабличнойЧасти.ИмяПоляСКонтрагентом];
		
		// Если поле с контрагентом скрыто функциональной опцией, то условное оформление не добавляем.
		Если ПолеКонтрагентаСкрытоФункциональнойОпцией(Форма, ОписаниеТабличнойЧасти) Тогда
			Продолжить;
		КонецЕсли;
		
		// Условное оформление
		Оформление 			= Форма.УсловноеОформление.Элементы.Добавить();
		Отбор 				= Оформление.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		Отбор.ВидСравнения 	= ВидСравненияКомпоновкиДанных.ВСписке;
		Отбор.Использование = Истина;
		
		ПутьКСостоянию = "Объект.%1.Состояние";
		ПутьКСостоянию = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПутьКСостоянию, ИмяТабличнойЧасти);
		
		Отбор.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных(ПутьКСостоянию);
		Отбор.ПравоеЗначение 	= СписокСостоянийНедействующегоКонтрагента;
		
		ЦветФона 	= Оформление.Оформление.Элементы.Найти("ЦветТекста");
		Цвета 		= ПроверкаКонтрагентовВызовСервераПовтИсп.ЦветаРезультатовПроверки();
		
		ЦветФона.Значение 		= Цвета.ЦветТекстаНекорректногоКонтрагента;
		ЦветФона.Использование 	= Истина;
				
		ОформляемоеПоле 		= Оформление.Поля.Элементы.Добавить();
		ОформляемоеПоле.Поле 	= Новый ПолеКомпоновкиДанных(ИмяПоляСКонтрагентом);
				
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьКолонкиТабличнойЧастиСРезультатамиПроверкиВТабличныеЧасти(Форма)
	
	// Определение объекта и ссылки.
	ОбъектИСсылкаПоФорме 	= ПроверкаКонтрагентовКлиентСервер.ОбъектИСсылкаПоФорме(Форма);
	ДокументОбъект 			= ОбъектИСсылкаПоФорме.Объект;

	ОписаниеТабличныхЧастей = ОписаниеТабличныхЧастей(Форма);
	
	Для каждого ОписаниеТабличнойЧасти Из ОписаниеТабличныхЧастей Цикл
		
		// Если поле с контрагентом скрыто функциональной опцией, то колонку для отображения результата проверки контрагента
		// не выводим.
		Если ПолеКонтрагентаСкрытоФункциональнойОпцией(Форма, ОписаниеТабличнойЧасти) Тогда
			Продолжить;
		КонецЕсли;
		
		ТаблицаФормы 	= Форма.Элементы[ОписаниеТабличнойЧасти.ИмяТаблицыФормы];
		ТабличнаяЧасть 	= ДокументОбъект[ОписаниеТабличнойЧасти.ИмяТабличнойЧасти];
		
		// Колонка с признаком корректности контрагента.
		ЕстьЭтоНекорректныйКонтрагент = РеквизитТабличнойЧастиУжеЕсть(Форма, ОписаниеТабличнойЧасти, "ЭтоНекорректныйКонтрагент");
		Если НЕ ЕстьЭтоНекорректныйКонтрагент Тогда
			ДобавитьРеквизитЭтоНекорректныйКонтрагент(Форма, ОписаниеТабличнойЧасти, ТаблицаФормы.ПутьКДанным);
		КонецЕсли;
		
		// Колонка с результатом проверки.
		ЕстьСостояние = ЕстьРеквизитФормы(ТабличнаяЧасть, "Состояние");
		Если НЕ ЕстьСостояние Тогда
			ДобавитьРеквизитСостояние(Форма, ОписаниеТабличнойЧасти, ТаблицаФормы.ПутьКДанным);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьКолонкиТаблицыФормыСРезультатамиПроверкиВТабличныеЧасти(Форма)
	
	СтандартнаяОбработка = Истина;
	РаботаСКонтрагентамиПереопределяемый.ДобавитьКолонкиТаблицыФормыСРезультатамиПроверкиВТабличныеЧасти(Форма, СтандартнаяОбработка);
	
	// Если действия переопределили, то стандартную обработку не выполняем.
	Если НЕ СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	// Определение объекта и ссылки.
	ОбъектИСсылкаПоФорме 	= ПроверкаКонтрагентовКлиентСервер.ОбъектИСсылкаПоФорме(Форма);
	ДокументСсылка 			= ОбъектИСсылкаПоФорме.Ссылка;
	
	ОписаниеТабличныхЧастей = ОписаниеТабличныхЧастей(Форма);
	Для каждого ОписаниеТабличнойЧасти Из ОписаниеТабличныхЧастей Цикл
		
		// Если поле с контрагентом скрыто функциональной опцией, то колонку для отображения результата проверки контрагента
		// не выводим.
		Если ПолеКонтрагентаСкрытоФункциональнойОпцией(Форма, ОписаниеТабличнойЧасти) Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяТабличнойЧасти 		= ОписаниеТабличнойЧасти.ИмяТабличнойЧасти;
		ИмяКолонкиСКонтрагентом = ОписаниеТабличнойЧасти.ИмяКолонкиСКонтрагентом;
		
		// Программно добавляем колонку и группу колонок.
		Элементы 		= Форма.Элементы;
		ТаблицаФормы 	= Элементы[ОписаниеТабличнойЧасти.ИмяТаблицыФормы];
		
		ПолеСКонтрагентом  	= Элементы[ОписаниеТабличнойЧасти.ИмяПоляСКонтрагентом];
		НовоеПолеКартинки 	= Элементы.Найти(ПроверкаКонтрагентовКлиентСервер.ИмяПоляКартинки(ТаблицаФормы));
		НоваяГруппаКолонок 	= Элементы.Найти(ПолеСКонтрагентом.Имя + "Группа");
		
		// Если колонки с результатом проверки контрагента нет в табличной части, то добавляем ее.
		Если НовоеПолеКартинки = Неопределено Тогда
			
			НовоеПолеКартинки	= НовоеПолеКартинки(Форма, ТаблицаФормы, ПолеСКонтрагентом.Родитель, ПолеСКонтрагентом);
			НоваяГруппаКолонок 	= НоваяГруппаКолонок(Форма, ПолеСКонтрагентом.Родитель, ПолеСКонтрагентом, ОписаниеТабличнойЧасти);
			
			// Перемещаем колонки в группу.
			Элементы.Переместить(ПолеСКонтрагентом, НоваяГруппаКолонок);
			Элементы.Переместить(НовоеПолеКартинки, НоваяГруппаКолонок);
			
		КонецЕсли;
		
		// Корректируем свойства колонки с контрагентом.
		ПолеСКонтрагентом.ОтображатьВШапке 			= Ложь;
		ПолеСКонтрагентом.ФиксацияВТаблице 			= ФиксацияВТаблице.Нет;
		ПолеСКонтрагентом.РастягиватьПоГоризонтали 	= Ложь;
		
		// Заголовок группы
		Заголовок = ПолеСКонтрагентом.Заголовок;
		Если НЕ ЗначениеЗаполнено(Заголовок) Тогда
			Заголовок = ДокументСсылка.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Реквизиты[ИмяКолонкиСКонтрагентом].Синоним;
		КонецЕсли;
		НоваяГруппаКолонок.Заголовок = Заголовок;
		
		// Устанавливаем видимость такую же как и у колонки с контрагентом.
		НовоеПолеКартинки.Видимость 	= ПолеСКонтрагентом.Видимость;
		НоваяГруппаКолонок.Видимость 	= ПолеСКонтрагентом.Видимость;
		
		УстановитьВидимостьСостоянияКакУКонтрагента(Форма, ПолеСКонтрагентом, НовоеПолеКартинки);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолеКонтрагентаСкрытоФункциональнойОпцией(Форма, ОписаниеТабличнойЧасти)
	
	// Определение объекта и ссылки.
	ОбъектИСсылкаПоФорме 	= ПроверкаКонтрагентовКлиентСервер.ОбъектИСсылкаПоФорме(Форма);
	ДокументСсылка 			= ОбъектИСсылкаПоФорме.Ссылка;
	
	ИмяДокумента 		= ДокументСсылка.Метаданные().Имя;
	ИмяТабличнойЧасти 	= ОписаниеТабличнойЧасти.ИмяТабличнойЧасти;
	ИмяКолонки 			= ОписаниеТабличнойЧасти.ИмяКолонкиСКонтрагентом;
	
	ИскомыйОбъект = Метаданные.Документы[ИмяДокумента].ТабличныеЧасти[ИмяТабличнойЧасти].Реквизиты[ИмяКолонки];
	ПолеСкрыто = НЕ ОбщегоНазначения.ОбъектМетаданныхДоступенПоФункциональнымОпциям(ИскомыйОбъект);
		
	Возврат ПолеСкрыто;

КонецФункции

Функция КолонкаТаблицыСкрытаФункциональнойОпцией(Форма, ИмяТаблицыФормы, ИмяПоляСКонтрагентом)
	
	ИмяТабличнойЧасти 		= ИмяРеквизита(Форма, ИмяТаблицыФормы);
	ИмяКолонкиСКонтрагентом	= ИмяРеквизита(Форма, ИмяПоляСКонтрагентом);
	
	ОписаниеТабличнойЧасти = Новый Структура("ИмяТабличнойЧасти, ИмяКолонкиСКонтрагентом", ИмяТабличнойЧасти, ИмяКолонкиСКонтрагентом);
	
	Возврат ПолеКонтрагентаСкрытоФункциональнойОпцией(Форма, ОписаниеТабличнойЧасти);
	
КонецФункции

Функция НовоеПолеКартинки(Форма, ТаблицаФормы, Родитель, СледующийЭлемент)
	
	Элементы = Форма.Элементы;
	
	НовоеПоле 							= Элементы.Вставить(ПроверкаКонтрагентовКлиентСервер.ИмяПоляКартинки(ТаблицаФормы), Тип("ПолеФормы"), Родитель, СледующийЭлемент);
	НовоеПоле.Заголовок					= НСтр("ru = 'Есть ошибка по данным ФНС'");
	НовоеПоле.Вид 						= ВидПоляФормы.ПолеКартинки;
	НовоеПоле.КартинкаЗначений			= БиблиотекаКартинок.НекорректныйКонтрагент;
	НовоеПоле.ПутьКДанным				= ТаблицаФормы.ПутьКДанным + "." + "ЭтоНекорректныйКонтрагент";
	НовоеПоле.ОтображатьВШапке 			= Ложь;
	НовоеПоле.ПоложениеЗаголовка 		= ПоложениеЗаголовкаЭлементаФормы.Нет;
	НовоеПоле.Ширина 					= 2;
	НовоеПоле.РастягиватьПоГоризонтали	= Ложь;
	НовоеПоле.ГиперссылкаЯчейки			= Истина;
	
	Возврат НовоеПоле;
	
КонецФункции

Функция НоваяГруппаКолонок(Форма, Родитель, СледующийЭлемент, ОписаниеТабличнойЧасти)
	
	// Определение объекта и ссылки.
	ОбъектИСсылкаПоФорме 	= ПроверкаКонтрагентовКлиентСервер.ОбъектИСсылкаПоФорме(Форма);
	ДокументСсылка 			= ОбъектИСсылкаПоФорме.Ссылка;
	
	Элементы = Форма.Элементы;
	
	НоваяГруппаКолонок = Элементы.Вставить(СледующийЭлемент.Имя + "Группа", Тип("ГруппаФормы"), Родитель, СледующийЭлемент);
	
	Заголовок = СледующийЭлемент.Заголовок;
	Если НЕ ЗначениеЗаполнено(Заголовок) Тогда
		
		ИмяТабличнойЧасти 		= ОписаниеТабличнойЧасти.ИмяТабличнойЧасти;
		ИмяКолонкиСКонтрагентом = ОписаниеТабличнойЧасти.ИмяКолонкиСКонтрагентом;

		Заголовок = ДокументСсылка.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Реквизиты[ИмяКолонкиСКонтрагентом].Синоним;
	КонецЕсли;
	
	НоваяГруппаКолонок.Заголовок				= Заголовок;
	НоваяГруппаКолонок.Вид 						= ВидГруппыФормы.ГруппаКолонок;
	НоваяГруппаКолонок.ОтображатьЗаголовок		= Истина;
	НоваяГруппаКолонок.Группировка				= ГруппировкаКолонок.Горизонтальная;
	НоваяГруппаКолонок.ОтображатьВШапке 		= Истина;
	НоваяГруппаКолонок.ФиксацияВТаблице 		= СледующийЭлемент.ФиксацияВТаблице;
	НоваяГруппаКолонок.Ширина 					= 17;
	НоваяГруппаКолонок.РастягиватьПоГоризонтали = Ложь;
	
	Возврат НоваяГруппаКолонок;

КонецФункции

Процедура ДобавитьРеквизитЭтоНекорректныйКонтрагент(Форма, ОписаниеТабличнойЧасти, Путь)
		
	ДобавитьРеквизит(
		Форма, 
		ОписаниеТабличнойЧасти, 
		"ЭтоНекорректныйКонтрагент", 
		Новый ОписаниеТипов("Булево"), 
		Путь);
		
КонецПроцедуры

Процедура ДобавитьРеквизитСостояние(Форма, ОписаниеТабличнойЧасти, Путь)
	
	ДобавитьРеквизит(
		Форма, 
		ОписаниеТабличнойЧасти, 
		"Состояние", 
		Новый ОписаниеТипов("ПеречислениеСсылка.СостоянияСуществованияКонтрагента"),
		Путь);
	
КонецПроцедуры

Процедура ДобавитьРеквизит(Форма, ОписаниеТабличнойЧасти, ИмяРеквизита, Тип, Путь)
	
	РеквизитУжеЕсть = РеквизитТабличнойЧастиУжеЕсть(Форма, ОписаниеТабличнойЧасти, ИмяРеквизита);
	Если НЕ РеквизитУжеЕсть Тогда

		НовыйРеквизит 			= Новый РеквизитФормы(ИмяРеквизита, Тип, Путь);
		ДобавляемыеРеквизиты 	= Новый Массив;
		ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
		Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
		
	КонецЕсли;
	
КонецПроцедуры

Функция РеквизитТабличнойЧастиУжеЕсть(Форма, ОписаниеТабличнойЧасти, ИмяРеквизита)
	
	// Определение объекта и ссылки.
	ОбъектИСсылкаПоФорме 	= ПроверкаКонтрагентовКлиентСервер.ОбъектИСсылкаПоФорме(Форма);
	ДокументОбъект 			= ОбъектИСсылкаПоФорме.Объект;
	
	ТабличнаяЧасть 			= ДокументОбъект[ОписаниеТабличнойЧасти.ИмяТабличнойЧасти];
	ВыгрузкаТабличнойЧасти 	= ТабличнаяЧасть.Выгрузить();// Преобразуем в таблицу значений.
	РеквизитУжеЕсть 		= ВыгрузкаТабличнойЧасти.Колонки.Найти(ИмяРеквизита) <> Неопределено;
	ВыгрузкаТабличнойЧасти	= Неопределено;
	
	Возврат РеквизитУжеЕсть;
	
КонецФункции

Функция ДатаВСтрокеТабличнойЧасти(ДокументОбъект, ОписаниеТабличнойЧасти, СтрокаТабличнойЧасти)
	
	ИмяКолонкиСДатой = ОписаниеТабличнойЧасти.ИмяКолонкиСДатой;
	
	Дата = Дата(1,1,1);
	ДатаВДокументе	= ДатаВДокументе(ДокументОбъект);
	Если ЗначениеЗаполнено(ИмяКолонкиСДатой) Тогда
		// Определение даты из ТЧ
		ДатаВСтроке = НачалоДня(СтрокаТабличнойЧасти[ИмяКолонкиСДатой]);
		Дата 		= ?(ЗначениеЗаполнено(ДатаВСтроке), ДатаВСтроке, ДатаВДокументе);
	Иначе
		// В табличной части нет колонки с датой, то берем дату из шапки документа.
		Дата = ДатаВДокументе;
	КонецЕсли;
				
	Возврат Дата;			
				
КонецФункции

Процедура УстановитьВидимостьСостоянияКакУКонтрагента(Форма, ПолеСКонтрагентом, НовоеПолеКартинки)
	
	УсловноеОформлениеФормы = Форма.УсловноеОформление;
	Для каждого УсловноеОформление Из УсловноеОформлениеФормы.Элементы Цикл
		
		Видимость = УсловноеОформление.Оформление.Элементы.Найти("Видимость");
		ИспользуетсяУправлениеВидимостью = Видимость.Использование;
		
		Если ИспользуетсяУправлениеВидимостью Тогда
			
			Для каждого ЭлементПоля Из УсловноеОформление.Поля.Элементы Цикл
				Если ЭлементПоля.Поле = Новый ПолеКомпоновкиДанных(ПолеСКонтрагентом.Имя) Тогда
					
					НовоеОформляемоеПоле = УсловноеОформление.Поля.Элементы.Добавить();
					НовоеОформляемоеПоле.Использование = Истина;
					НовоеОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(НовоеПолеКартинки.Имя);
					
					Прервать;
					
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла; 
	
КонецПроцедуры

Функция ЕстьРеквизитФормы(Источник, ИмяРеквизита) Экспорт
	
	ИскомыеРеквизиты = Новый Структура(ИмяРеквизита, NULL);
	ЗаполнитьЗначенияСвойств(ИскомыеРеквизиты, Источник);

	РеквизитСуществует = Ложь;
	Если ИскомыеРеквизиты[ИмяРеквизита] <> NULL Тогда
		РеквизитСуществует = Истина;
	КонецЕсли;
	
	Возврат РеквизитСуществует;

КонецФункции

#КонецОбласти

#Область СчетаФактуры

Процедура ЗапомнитьРезультатПроверкиКонтрагентовВСчетеФактуре(Форма, ДанныеКонтрагентов)
	
	// Определение объекта и ссылки.
	ОбъектИСсылкаПоФорме 	= ПроверкаКонтрагентовКлиентСервер.ОбъектИСсылкаПоФорме(Форма);
	ДокументОбъект 			= ОбъектИСсылкаПоФорме.Объект;
	ДокументСсылка 			= ОбъектИСсылкаПоФорме.Ссылка;
	
	Если ПроверкаКонтрагентовКлиентСервер.ЭтоСчетФактура(Форма) Тогда
		
		Описание = ОписаниеКонтрагентовВСчетеФактуре(ТипЗнч(ДокументСсылка));
		Для каждого СтрокаОписания Из Описание Цикл
			
			ИмяРеквизитаКонтрагента = СтрокаОписания.ИмяРеквизита;
			Контрагент = ДокументОбъект[ИмяРеквизитаКонтрагента];
			
			Если ЗначениеЗаполнено(Контрагент) Тогда
				Отбор = Новый Структура("Контрагент", Контрагент); 
				ИтоговоеСостояние = ИтоговоеСостояниеКонтрагентаВДокументе(ДанныеКонтрагентов, Отбор);
				Форма.РеквизитыПроверкиКонтрагентов[СтрокаОписания.ИмяРеквизитаССостоянием] = ИтоговоеСостояние.СостояниеКонтрагента;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Если контрагент в ТЧ
	Если ПроверкаКонтрагентовКлиентСервер.ЭтоДокументСКонтрагентомВТабличнойЧасти(Форма) Тогда
		
		ЗапомнитьРезультатПроверкиКонтрагентовВТабличнойЧасти(Форма, ДанныеКонтрагентов);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеКонтрагентовВСчетеФактуре(ДокументОбъект, ДанныеКонтрагентов, Форма = Неопределено)
	
	Если ДокументОбъект = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Истина;
	РаботаСКонтрагентамиПереопределяемый.ЗаполнитьДанныеКонтрагентовВСчетеФактуре(СтандартнаяОбработка, ДокументОбъект, ДанныеКонтрагентов, Форма);
	
	Если СтандартнаяОбработка = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	ДокументСсылка = ДокументОбъект.Ссылка;
	Дата = ДатаВСчетеФактуре(ДокументОбъект);
	
	Описание = ОписаниеКонтрагентовВСчетеФактуре(ТипЗнч(ДокументСсылка));
	Для каждого СтрокаОписания Из Описание Цикл
		
		ИмяРеквизитаКонтрагента = СтрокаОписания.ИмяРеквизита;
		Контрагент = ДокументОбъект[ИмяРеквизитаКонтрагента];
		
		Если ЗначениеЗаполнено(Контрагент) Тогда
			
			ДополнитьДанныеКонтрагентовВДокументе(
				ДокументСсылка,
				ДанныеКонтрагентов,
				Контрагент,
				Дата);
			
		КонецЕсли;
			
	КонецЦикла;
	
КонецПроцедуры

Функция ДатаВСчетеФактуре(СчетФактураОбъект)
	
	Дата = Дата(1,1,1);
	РаботаСКонтрагентамиПереопределяемый.ОпределитьДатуВСчетеФактуре(СчетФактураОбъект, Дата);
	
	Возврат Дата; 
	
КонецФункции

Функция ИмяРеквизитаСостоянияКонтрагентаВСчетеФактуре(ИмяРеквизитаКонтрагента)
	
	Возврат "Состояние" + ИмяРеквизитаКонтрагента;
	
КонецФункции

// Функция - Определяет, заполнен ли хотя бы один контрагент в счете-фактуре.
//
// Параметры:
//  СчетФактураСсылка	 - ДокументСсылка - счет-фактура, для которой необходимо определить заполненность
//                                              контрагентов.
// Возвращаемое значение:
// Булево - Истина, если заполнен хотя бы один контрагент.
Функция ВСчетеФактуреЗаполненХотяБыОдинКонтрагент(СчетФактураСсылка)
	
	Если СчетФактураСсылка = Неопределено Тогда
	    ЗаполненХотяБыОдинКонтрагент = Истина;
	Иначе
		
		Описание = ОписаниеКонтрагентовВСчетеФактуре(ТипЗнч(СчетФактураСсылка));
		
		ИменаРеквизитовКонтрагентов = Описание.ВыгрузитьКолонку("ИмяРеквизита");
		КонтрагентыСчетаФактуры 	= ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СчетФактураСсылка, ИменаРеквизитовКонтрагентов);
		
		ЗаполненХотяБыОдинКонтрагент = Ложь;
		Для каждого Контрагент Из КонтрагентыСчетаФактуры Цикл
			
			Если ЗначениеЗаполнено(Контрагент.Значение) Тогда
				ЗаполненХотяБыОдинКонтрагент = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ЗаполненХотяБыОдинКонтрагент;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ПроверкаКонтрагентовВСправочнике

// Подписка на событие. Добавление в регистр набора ИНН и КПП для последующей проверки регламентным заданием.
//
// Параметры:
//  КонтрагентОбъект - СправочникОбъект.<Контрагенты> - записываемый контрагент.
//  Отказ			 - Булево - Параметр обработчика подписки на событие.
Процедура СохранитьРезультатПроверкиКонтрагентаПриЗаписи(КонтрагентОбъект, Отказ) Экспорт 
	
	Если КонтрагентОбъект.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ПроверкаКонтрагентовВызовСервера.ИспользованиеПроверкиВозможно()
		ИЛИ СправочникКонтрагентовИерархический() И КонтрагентОбъект.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	Если СтандартныеПодсистемыСервер.ЭтоИдентификаторОбъектаМетаданных(КонтрагентОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	СостояниеКонтрагента = Перечисления.СостоянияСуществованияКонтрагента.ПустаяСсылка();
	КонтрагентОбъект.ДополнительныеСвойства.Свойство("ПроверкаКонтрагентовСостояниеКонтрагента", СостояниеКонтрагента);
	
	Если НЕ ЗначениеЗаполнено(СостояниеКонтрагента) Тогда
		Возврат;
	КонецЕсли;
	
	СвойстваСправочникаКонтрагенты = ПроверкаКонтрагентовКлиентСервер.СвойстваСправочникаКонтрагенты();
	
	ДанныеКонтрагента = Новый Структура;
	
	ДанныеКонтрагента.Вставить("Контрагент",	КонтрагентОбъект.Ссылка);
	ДанныеКонтрагента.Вставить("ИНН", 			КонтрагентОбъект[СвойстваСправочникаКонтрагенты.ИНН]);
	ДанныеКонтрагента.Вставить("КПП",			КонтрагентОбъект[СвойстваСправочникаКонтрагенты.КПП]);
	ДанныеКонтрагента.Вставить("Дата", 			НачалоДня(ТекущаяДатаСеанса()));
	ДанныеКонтрагента.Вставить("Состояние", 	СостояниеКонтрагента);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
		ДанныеКонтрагента.Вставить("ОбластьДанныхВспомогательныеДанные", ОбщегоНазначения.ЗначениеРазделителяСеанса());
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	СохранитьРезультатыПроверкиКонтрагентаВРегистр(ДанныеКонтрагента);
	
КонецПроцедуры

Процедура УстановитьУсловноеОформлениеСпискаКонтрагентов(Список)
	
	СтандартнаяОбработка = Истина;
	РаботаСКонтрагентамиПереопределяемый.УстановитьУсловноеОформлениеСпискаКонтрагентов(Список, СтандартнаяОбработка);
	
	// Если действия переопределили, то стандартную обработку не выполняем.
	Если НЕ СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	ЦветаРезультатовПроверки = ПроверкаКонтрагентовВызовСервераПовтИсп.ЦветаРезультатовПроверки();
	
	// Условное оформление
	НовоеУсловноеОформление = Список.УсловноеОформление.Элементы.Добавить();
	
	// ПроверкаКонтрагентовКонтрагентНеСуществует Равно "Истина"
	Отбор = НовоеУсловноеОформление.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
	Отбор.Использование 	= Истина;
	Отбор.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("ПроверкаКонтрагентовКонтрагентНеСуществует");
	Отбор.ПравоеЗначение 	= Истина;
	
	// ПроверкаКонтрагентовСостояние Не равно "Перечисление.СостоянияСуществованияКонтрагента.НеДействуетИлиИзмененКПП".
	Отбор = НовоеУсловноеОформление.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ВидСравнения 		= ВидСравненияКомпоновкиДанных.НеРавно;
	Отбор.Использование 	= Истина;
	Отбор.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("ПроверкаКонтрагентовСостояние");
	Отбор.ПравоеЗначение 	= Перечисления.СостоянияСуществованияКонтрагента.НеДействуетИлиИзмененКПП;
	
	// Красные ИНН и КПП
	Оформление = НовоеУсловноеОформление.Оформление.Элементы.Найти("ЦветТекста");
	Оформление.Значение 		= ЦветаРезультатовПроверки.ЦветТекстаНекорректногоКонтрагента;
	Оформление.Использование 	= Истина;
	
	СвойстваСправочникаКонтрагенты = ПроверкаКонтрагентовКлиентСервер.СвойстваСправочникаКонтрагенты();
	// ИНН
	ОформляемоеПоле = НовоеУсловноеОформление.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(СвойстваСправочникаКонтрагенты.ИНН);
	ОформляемоеПоле.Использование 	= Истина;
	
	// КПП
	ОформляемоеПоле = НовоеУсловноеОформление.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(СвойстваСправочникаКонтрагенты.КПП);
	ОформляемоеПоле.Использование 	= Истина;
	
	НовоеУсловноеОформление = Список.УсловноеОформление.Элементы.Добавить();
	
	// ПроверкаКонтрагентовКонтрагентНеСуществует Равно "Истина"
	Отбор = НовоеУсловноеОформление.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
	Отбор.Использование 	= Истина;
	Отбор.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("ПроверкаКонтрагентовКонтрагентНеСуществует");
	Отбор.ПравоеЗначение 	= Истина;
	
	// ПроверкаКонтрагентовСостояние Равно "Перечисление.СостоянияСуществованияКонтрагента.НеДействуетИлиИзмененКПП"
	Отбор = НовоеУсловноеОформление.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
	Отбор.Использование 	= Истина;
	Отбор.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("ПроверкаКонтрагентовСостояние");
	Отбор.ПравоеЗначение 	= Перечисления.СостоянияСуществованияКонтрагента.НеДействуетИлиИзмененКПП;
	
	// Серым вся строка
	Оформление = НовоеУсловноеОформление.Оформление.Элементы.Найти("ЦветТекста");
	Оформление.Значение			= ЦветаРезультатовПроверки.ЦветТекстаКонтрагентаПрекратившегоДеятельность;
	Оформление.Использование 	= Истина;
	
КонецПроцедуры

// Проверка нескольких контрагентов.
Процедура СохранитьРезультатыПроверкиСправочника(ДанныеКонтрагентов, АдресХранилища = Неопределено, СохранятьРезультатСразуПослеПроверки = Ложь)
	
	Если ДанныеКонтрагентов.Количество() = 1 Тогда
		
		ДанныеКонтрагента = ДанныеКонтрагентов[0]; 
	
		// Сохраняем во временное хранилище.
		Если ЗначениеЗаполнено(АдресХранилища)  Тогда
			ПоместитьВоВременноеХранилище(ДанныеКонтрагента.Состояние, АдресХранилища);
		КонецЕсли;
			
		// Сохраняем в регистр
		Если ЗначениеЗаполнено(ДанныеКонтрагента.Контрагент) 
			И (НЕ ЗначениеЗаполнено(АдресХранилища) ИЛИ СохранятьРезультатСразуПослеПроверки) Тогда
			
			СохранитьРезультатыПроверкиКонтрагентовВРегистр(ДанныеКонтрагентов);
			
		КонецЕсли;
		
	Иначе
		
		СохранитьРезультатыПроверкиКонтрагентовВРегистр(ДанныеКонтрагентов);
		
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область ПроверкаКонтрагентовВОтчетах

Функция ЭтоОтчетПоНекорректнымКонтрагентам(СтруктураПараметров)
	
	Если НЕ СтруктураПараметров.Свойство("ДанныеДляПроверкиКонтрагентов") Тогда
		// Проверка контрагентов отключена.
		Возврат Ложь;
	КонецЕсли;
	
	ДанныеДляПроверкиКонтрагентов = СтруктураПараметров.ДанныеДляПроверкиКонтрагентов;
	ПроверкаКонтрагентовИспользуется = ДанныеДляПроверкиКонтрагентов.ПроверкаКонтрагентовИспользуется;
	
	Если НЕ ПроверкаКонтрагентовИспользуется Тогда
		// Проверка контрагентов отключена.
		Возврат Ложь;
	КонецЕсли;
	
	// Есть два режима формирования отчета:
	// Выводить все строки или только с некорректными контрагентами.
	ВыводитьТолькоНекорректныхКонтрагентов	= ДанныеДляПроверкиКонтрагентов.ВыводитьТолькоНекорректныхКонтрагентов;
	
	Если НЕ ВыводитьТолькоНекорректныхКонтрагентов Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура ВыделитьКонтрагентовСОшибкамиВОтчете(НедействующиеКонтрагенты, ТабличныйДокумент) Экспорт
	
	// Подкрашиваем контрагентов с ошибками.
	Для каждого СтрокаСНедействующимКонтрагентом Из НедействующиеКонтрагенты Цикл
		
		РаботаСКонтрагентамиПереопределяемый.ВыделитьКонтрагентаСОшибкойВСтрокеОтчета(ТабличныйДокумент, 
			СтрокаСНедействующимКонтрагентом.СтрокаТабличногоДокумента);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
