////////////////////////////////////////////////////////////////////////////////
// Подсистема "Информация при запуске".
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Добавление обработчиков служебных событий (подписок).

// См. описание этой же процедуры в модуле СтандартныеПодсистемыСервер.
Процедура ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики) Экспорт
	
	// КЛИЕНТСКИЕ ОБРАБОТЧИКИ.
	
	КлиентскиеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПослеНачалаРаботыСистемы"].Добавить(
		"ИнформацияПриЗапускеКлиент");
	
	// СЕРВЕРНЫЕ ОБРАБОТЧИКИ.
	СерверныйМодуль = "ИнформацияПриЗапуске";
	
	Событие = "СтандартныеПодсистемы.ОбновлениеВерсииИБ\ПриДобавленииОбработчиковОбновления";
	СерверныеОбработчики[Событие].Добавить(СерверныйМодуль);
	
	Событие = "СтандартныеПодсистемы.ОбновлениеВерсииИБ\ПослеОбновленияИнформационнойБазы";
	СерверныеОбработчики[Событие].Добавить(СерверныйМодуль);
	
	Событие = "СтандартныеПодсистемы.БазоваяФункциональность\ПриДобавленииПараметровРаботыКлиентаПриЗапуске";
	СерверныеОбработчики[Событие].Добавить(СерверныйМодуль);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики служебных событий.

// Добавляет процедуры-обработчики обновления, необходимые данной подсистеме.
//
// Параметры:
//   Обработчики - ТаблицаЗначений - Обработчики обновления.
//       См. описание метода ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления().
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	Обработчик = Обработчики.Добавить();
	Обработчик.ВыполнятьВГруппеОбязательных = Ложь;
	Обработчик.ОбщиеДанные                  = Истина;
	Обработчик.УправлениеОбработчиками      = Ложь;
	Обработчик.РежимВыполнения              = "Оперативно";
	Обработчик.Версия      = "*";
	Обработчик.Процедура   = "ИнформацияПриЗапуске.ОперативноеОбновлениеОбщихДанных";
	Обработчик.Комментарий = НСтр("ru = 'Актуализирует данные первого показа.'");
	Обработчик.Приоритет   = 100;
КонецПроцедуры

// Вызывается после завершения монопольного обновления данных ИБ.
//
// Параметры:
//   ПредыдущаяВерсия       - Строка - версия подсистемы до обновления. "0.0.0.0" для "пустой" ИБ.
//   ТекущаяВерсия          - Строка - версия подсистемы после обновления.
//   ВыполненныеОбработчики - ДеревоЗначений - список выполненных процедур-обработчиков обновления
//                                             подсистемы, сгруппированных по номеру версии.
//                            Процедура обхода выполненных обработчиков:
//
//	Для Каждого Версия Из ВыполненныеОбработчики.Строки Цикл
//		
//		Если Версия.Версия = "*" Тогда
//			// Обработчик, который может выполнятся при каждой смене версии.
//		Иначе
//			// Обработчик, который выполняется для определенной версии.
//		КонецЕсли;
//		
//		Для Каждого Обработчик Из Версия.Строки Цикл
//			...
//		КонецЦикла;
//		
//	КонецЦикла;
//
//   ВыводитьОписаниеОбновлений - Булево (возвращаемое значение)- если установить Истина,
//                                тогда выводить форму с описанием обновлений.
//   МонопольныйРежим           - Булево - признак выполнения обновления в монопольном режиме.
//                                Истина - обновление выполнялось в монопольном режиме.
//
Процедура ПослеОбновленияИнформационнойБазы(Знач ПредыдущаяВерсия, Знач ТекущаяВерсия,
		Знач ВыполненныеОбработчики, ВыводитьОписаниеОбновлений, МонопольныйРежим) Экспорт
	
	ОбщегоНазначения.ХранилищеОбщихНастроекУдалить("ИнформацияПриЗапуске", Неопределено, Неопределено);
	
КонецПроцедуры

// Заполняет параметры, которые используется клиентским кодом на запуске конфигурации.
//
// Параметры:
//   Параметры - Структура - Параметры запуска.
//
Процедура ПриДобавленииПараметровРаботыКлиентаПриЗапуске(Параметры) Экспорт
	Параметры.Вставить("ИнформацияПриЗапуске", Новый ФиксированнаяСтруктура(ГлобальныеНастройки()));
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы.

// [*] Актуализирует данные первого показа.
Процедура ОперативноеОбновлениеОбщихДанных() Экспорт
	
	ОбновитьКэшПервогоПоказа(Обработки.ИнформацияПриЗапуске);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Служебные процедуры и функции.

// [*] Актуализирует данные первого показа.
Процедура ОбновитьКэшПервогоПоказа(НосительМакетов) Экспорт
	
	Кэш = КэшДляПервогоПоказа(НосительМакетов); // Полная информация о пакетах, включая данные страниц.
	Приоритетные = Кэш.Приоритетные;
	Кэш.Удалить("Приоритетные");
	
	НаборЗаписей = РегистрыСведений.ПакетыИнформацииПриЗапуске.СоздатьНаборЗаписей();
	
	// Данные из кэша "перебрасываются" в регистр, а в кэше остаются только указатели.
	НомерПакета = 0;
	ПодготовленныеПакеты = Новый Соответствие;
	Для Каждого ИмяМакета Из Приоритетные Цикл
		СоставПакета = ИзвлечьФайлыПакета(НосительМакетов, ИмяМакета);
		НомерПакета = НомерПакета + 1;
		
		// Запись данных пакета в регистр.
		Запись = НаборЗаписей.Добавить();
		Запись.Номер  = НомерПакета;
		Запись.Состав = Новый ХранилищеЗначения(СоставПакета);
		
		// Замена данных пакета на его номер (его "адрес" в регистре).
		ПодготовленныеПакеты.Вставить(ИмяМакета, НомерПакета);
	КонецЦикла;
	Кэш.Вставить("ПодготовленныеПакеты", ПодготовленныеПакеты);
	
	// Теперь в кэше осталась только "легкая" структурированная информация; Она записывается в регистр под номером 0.
	Запись = НаборЗаписей.Добавить();
	Запись.Номер  = 0;
	Запись.Состав = Новый ХранилищеЗначения(Кэш);
	
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей, Ложь, Ложь);
	
КонецПроцедуры

// Глобальные настройки подсистемы.
Функция ГлобальныеНастройки()
	Настройки = Новый Структура;
	Настройки.Вставить("Показывать", Истина);
	
	Если Метаданные.Обработки.ИнформацияПриЗапуске.Макеты.Количество() = 0 Тогда
		Настройки.Показывать = Ложь;
	ИначеЕсли Не СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации() Тогда
		// Отключение информации в ПРОФ версии если пользователь отключил флажок.
		ФлажокПользователя = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ИнформацияПриЗапуске", "Показывать", Истина);
		Если Не ФлажокПользователя Тогда
			ДатаБлижайшегоПоказа = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ИнформацияПриЗапуске", "ДатаБлижайшегоПоказа");
			Если ДатаБлижайшегоПоказа <> Неопределено
				И ДатаБлижайшегоПоказа > ТекущаяДатаСеанса() Тогда
				Настройки.Показывать = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Настройки.Показывать Тогда
		// Отключение информации если будет выведено описание изменений.
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОбновлениеВерсииИБ") Тогда
			МодульОбновлениеИнформационнойБазыСлужебный = ОбщегоНазначения.ОбщийМодуль("ОбновлениеИнформационнойБазыСлужебный");
			Если МодульОбновлениеИнформационнойБазыСлужебный.ПоказатьОписаниеИзмененийСистемы() Тогда
				Настройки.Показывать = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Настройки.Показывать Тогда
		// Отключение информации если будет показан помощник завершения настройки подчиненного узла РИБ.
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОбменДанными") Тогда
			МодульОбменДаннымиСервер = ОбщегоНазначения.ОбщийМодуль("ОбменДаннымиСервер");
			Если МодульОбменДаннымиСервер.ОткрытьПомощникСозданияОбменаДаннымиДляНастройкиПодчиненногоУзла() Тогда
				Настройки.Показывать = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Переопределение.
	ИнформацияПриЗапускеПереопределяемый.ОпределитьНастройки(Настройки);
	
	Возврат Настройки;
КонецФункции

// Глобальные настройки подсистемы.
Функция КэшДляПервогоПоказа(НосительМакетов) Экспорт
	Кэш = Новый Структура;
	
	// Чтение макета "Описатель" (наполнение таблицы "ПакетыСтраниц").
	ТабличныйДокумент = НосительМакетов.ПолучитьМакет("Описатель");
	
	ПакетыСтраниц = Новый ТаблицаЗначений;
	ПакетыСтраниц.Колонки.Добавить("Идентификатор",                 Новый ОписаниеТипов("Строка"));
	ПакетыСтраниц.Колонки.Добавить("ИмяМакета",                     Новый ОписаниеТипов("Строка"));
	ПакетыСтраниц.Колонки.Добавить("Раздел",                        Новый ОписаниеТипов("Строка"));
	ПакетыСтраниц.Колонки.Добавить("НаименованиеСтартовойСтраницы", Новый ОписаниеТипов("Строка"));
	ПакетыСтраниц.Колонки.Добавить("ИмяФайлаСтартовойСтраницы",     Новый ОписаниеТипов("Строка"));
	ПакетыСтраниц.Колонки.Добавить("ДатаНачалаПоказа",              Новый ОписаниеТипов("Дата"));
	ПакетыСтраниц.Колонки.Добавить("ДатаОкончанияПоказа",           Новый ОписаниеТипов("Дата"));
	ПакетыСтраниц.Колонки.Добавить("Приоритет",                     Новый ОписаниеТипов("Число"));
	
	МинимальныйПриоритет = 100;
	Приоритетные = Новый Массив;
	
	КонфигурацияБазовая       = СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации();
	КонфигурацияМоделиСервиса = ОбщегоНазначенияПовтИсп.РазделениеВключено()
		Или ПолучитьФункциональнуюОпцию("РаботаВАвтономномРежиме");
	
	Для НомерСтроки = 3 По ТабличныйДокумент.ВысотаТаблицы Цикл
		ПрефиксСтроки = "R"+ НомерСтроки +"C";
		
		// Чтение данных первой колонки.
		ИмяМакета = ДанныеЯчейки(ТабличныйДокумент, ПрефиксСтроки, 1, , "КонецТаблицы");
		Если ВРег(ИмяМакета) = ВРег("КонецТаблицы") Тогда
			Прервать;
		КонецЕсли;
		
		// Пропуск если данные не подходят к конфигурации.
		Если КонфигурацияМоделиСервиса Тогда
			ПоказыватьВМоделиСервиса = ДанныеЯчейки(ТабличныйДокумент, ПрефиксСтроки, 10, "Булево", Истина);
			Если Не ПоказыватьВМоделиСервиса Тогда
				Продолжить;
			КонецЕсли;
		Иначе
			Если КонфигурацияБазовая Тогда
				ПоказыватьВБазовой = ДанныеЯчейки(ТабличныйДокумент, ПрефиксСтроки, 9, "Булево", Истина);
				Если Не ПоказыватьВБазовой Тогда
					Продолжить;
				КонецЕсли;
			Иначе
				ПоказыватьВПроф = ДанныеЯчейки(ТабличныйДокумент, ПрефиксСтроки, 8, "Булево", Истина);
				Если Не ПоказыватьВПроф Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		// Регистрация информации о команде.
		ПакетСтраниц = ПакетыСтраниц.Добавить();
		ПакетСтраниц.ИмяМакета                     = ИмяМакета;
		ПакетСтраниц.Идентификатор                 = Строка(НомерСтроки - 2);
		ПакетСтраниц.Раздел                        = ДанныеЯчейки(ТабличныйДокумент, ПрефиксСтроки, 2);
		ПакетСтраниц.НаименованиеСтартовойСтраницы = ДанныеЯчейки(ТабличныйДокумент, ПрефиксСтроки, 3);
		ПакетСтраниц.ИмяФайлаСтартовойСтраницы     = ДанныеЯчейки(ТабличныйДокумент, ПрефиксСтроки, 4);
		ПакетСтраниц.ДатаНачалаПоказа              = ДанныеЯчейки(ТабличныйДокумент, ПрефиксСтроки, 5, "Дата", '00010101');
		ПакетСтраниц.ДатаОкончанияПоказа           = ДанныеЯчейки(ТабличныйДокумент, ПрефиксСтроки, 6, "Дата", '29990101');
		
		Если НРег(ПакетСтраниц.Раздел) = НРег(НСтр("ru = 'Реклама'")) Тогда
			ПакетСтраниц.Приоритет = 0;
		Иначе
			ПакетСтраниц.Приоритет = ДанныеЯчейки(ТабличныйДокумент, ПрефиксСтроки, 7, "Число", 0);
			Если ПакетСтраниц.Приоритет = 0 Тогда
				ПакетСтраниц.Приоритет = 99;
			КонецЕсли;
		КонецЕсли;
		
		Если МинимальныйПриоритет > ПакетСтраниц.Приоритет Тогда
			МинимальныйПриоритет = ПакетСтраниц.Приоритет;
			Приоритетные = Новый Массив;
			Приоритетные.Добавить(ПакетСтраниц.ИмяМакета);
		ИначеЕсли МинимальныйПриоритет = ПакетСтраниц.Приоритет
			И Приоритетные.Найти(ПакетСтраниц.ИмяМакета) = Неопределено Тогда
			Приоритетные.Добавить(ПакетСтраниц.ИмяМакета);
		КонецЕсли;
	КонецЦикла;
	
	Кэш.Вставить("ПакетыСтраниц", ПакетыСтраниц);
	Кэш.Вставить("Приоритетные", Приоритетные);
	Возврат Кэш;
КонецФункции

// Считывает из табличного документа содержимое ячейки и приводит к указанному типу.
Функция ДанныеЯчейки(ТабличныйДокумент, ПрефиксСтроки, НомерКолонки, Тип = "Строка", ЗначениеПоУмолчанию = "")
	Результат = СокрЛП(ТабличныйДокумент.Область(ПрефиксСтроки + Строка(НомерКолонки)).Текст);
	Если ПустаяСтрока(Результат) Тогда
		Возврат ЗначениеПоУмолчанию;
	ИначеЕсли Тип = "Число" Тогда
		Возврат Число(Результат);
	ИначеЕсли Тип = "Дата" Тогда
		Возврат Дата(Результат);
	ИначеЕсли Тип = "Булево" Тогда
		Возврат Результат <> "0";
	Иначе
		Возврат Результат;
	КонецЕсли;
КонецФункции

// Извлекает пакет файлов из макета обработки ИнформацияПриЗапуске.
Функция ИзвлечьФайлыПакета(НосительМакетов, ИмяМакета) Экспорт
	КаталогВременныхФайлов = СтандартныеПодсистемыСервер.СоздатьКаталогВременныхФайлов("extras");
	
	// Извлечение страницы
	АрхивПолноеИмя = КаталогВременныхФайлов + "tmp.zip";
	Попытка
		ДвоичныеДанные = НосительМакетов.ПолучитьМакет(ИмяМакета);
		ДвоичныеДанные.Записать(АрхивПолноеИмя);
	Исключение
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Информация при запуске'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Неопределено;
	КонецПопытки;
	
	ЧтениеZipФайла = Новый ЧтениеZipФайла(АрхивПолноеИмя);
	ЧтениеZipФайла.ИзвлечьВсе(КаталогВременныхФайлов, РежимВосстановленияПутейФайловZIP.Восстанавливать);
	ЧтениеZipФайла.Закрыть();
	ЧтениеZipФайла = Неопределено;
	
	УдалитьФайлы(АрхивПолноеИмя);
	
	Картинки = Новый ТаблицаЗначений;
	Картинки.Колонки.Добавить("ОтносительноеИмя",     Новый ОписаниеТипов("Строка"));
	Картинки.Колонки.Добавить("ОтносительныйКаталог", Новый ОписаниеТипов("Строка"));
	Картинки.Колонки.Добавить("Данные");
	
	ВебСтраницы = Новый ТаблицаЗначений;
	ВебСтраницы.Колонки.Добавить("ОтносительноеИмя",     Новый ОписаниеТипов("Строка"));
	ВебСтраницы.Колонки.Добавить("ОтносительныйКаталог", Новый ОписаниеТипов("Строка"));
	ВебСтраницы.Колонки.Добавить("Данные");
	
	// Регистрация ссылок страниц и создание списка картинок.
	КаталогиФайлов = Новый СписокЗначений;
	КаталогиФайлов.Добавить(КаталогВременныхФайлов, "");
	Осталось = 1;
	Пока Осталось > 0 Цикл
		Осталось = Осталось - 1;
		Каталог = КаталогиФайлов[0];
		КаталогПолныйПуть        = Каталог.Значение; // Полный путь в формате файловой системы.
		КаталогОтносительныйПуть = Каталог.Представление; // Относительный путь в URL формате.
		КаталогиФайлов.Удалить(0);
		
		Найденные = НайтиФайлы(КаталогПолныйПуть, "*", Ложь);
		Для Каждого Файл Из Найденные Цикл
			ФайлОтносительноеИмя = КаталогОтносительныйПуть + Файл.Имя;
			
			Если Файл.ЭтоКаталог() Тогда
				Осталось = Осталось + 1;
				КаталогиФайлов.Добавить(Файл.ПолноеИмя, ФайлОтносительноеИмя + "/");
				Продолжить;
			КонецЕсли;
			
			Расширение = СтрЗаменить(НРег(Файл.Расширение), ".", "");
			
			Если Расширение = "htm" ИЛИ Расширение = "html" Тогда
				РазмещениеФайла = ВебСтраницы.Добавить();
				ЧтениеТекста = Новый ЧтениеТекста(Файл.ПолноеИмя);
				Данные = ЧтениеТекста.Прочитать();
				ЧтениеТекста.Закрыть();
				ЧтениеТекста = Неопределено;
			Иначе
				РазмещениеФайла = Картинки.Добавить();
				Данные = Новый Картинка(Новый ДвоичныеДанные(Файл.ПолноеИмя));
			КонецЕсли;
			РазмещениеФайла.ОтносительноеИмя     = ФайлОтносительноеИмя;
			РазмещениеФайла.ОтносительныйКаталог = КаталогОтносительныйПуть;
			РазмещениеФайла.Данные               = Данные;
		КонецЦикла;
	КонецЦикла;
	
	// Удаление временных файлов (все файлы были помещены во временные хранилища).
	СтандартныеПодсистемыСервер.ОчиститьКаталогВременныхФайлов(КаталогВременныхФайлов);
	
	Результат = Новый Структура;
	Результат.Вставить("Картинки", Картинки);
	Результат.Вставить("ВебСтраницы", ВебСтраницы);
	
	Возврат Результат;
КонецФункции

#КонецОбласти