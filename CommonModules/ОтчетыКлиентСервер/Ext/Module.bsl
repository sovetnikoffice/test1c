////////////////////////////////////////////////////////////////////////////////
// Методы работы с СКД из формы отчета (клиент, сервер).
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Настройки формы отчета по умолчанию.
//
// Возвращаемое значение:
//   Структура - Настройки формы отчета.
//       
//       * ФормироватьСразу - Булево - Значение по умолчанию для флажка "Формировать сразу".
//           Когда флажок включен, то отчет будет формироваться:
//             - После открытия;
//             - После выбора пользовательских настроек;
//             - После выбора другого варианта отчета.
//       
//       * ВыводитьСуммуВыделенныхЯчеек - Булево - Если Истина, то в отчете будет выводиться поле автосуммы.
//       
//       * СоответствиеПериодичностиПараметров - Соответствие - Ограничение списка выбора полей "СтандартныйПериод".
//           ** Ключ - ПараметрКомпоновкиДанных - Имя параметра отчета, к которому применятся ограничения.
//           ** Значение - ПеречислениеСсылка.ДоступныеПериодыОтчета - Ограничение периода отчета "снизу".
//       
//       * Печать - Структура - Параметры печати табличного документа "по умолчанию".
//           ** ПолеСверху - Число - Отступ сверху при печати (в миллиметрах).
//           ** ПолеСлева  - Число - Отступ слева  при печати (в миллиметрах).
//           ** ПолеСнизу  - Число - Отступ снизу  при печати (в миллиметрах).
//           ** ПолеСправа - Число - Отступ справа при печати (в миллиметрах).
//           ** ОриентацияСтраницы - ОриентацияСтраницы - "Портрет" или "Ландшафт".
//           ** АвтоМасштаб - Булево - Автоматически подгонять масштаб под размер страницы.
//           ** МасштабПечати - Число - Масштаб изображения (в процентах).
//       
//       * События - Структура - События, для которых определены обработчики в модуле объекта отчета.
//           
//           ** ПриСозданииНаСервере - Булево - Если Истина, то в модуле объекта отчета
//               следует определить обработчик события по шаблону:
//               
//               // Вызывается в обработчике одноименного события формы отчета после выполнения кода формы.
//               //
//               // Параметры:
//               //   Форма - УправляемаяФорма - Форма отчета.
//               //   Отказ - Передается из параметров обработчика "как есть".
//               //   СтандартнаяОбработка - Передается из параметров обработчика "как есть".
//               //
//               // См. также:
//               //   "УправляемаяФорма.ПриСозданииНаСервере" в синтакс-помощнике.
//               //
//               // Пример 1 - Добавление команды с обработчиком в ОтчетыКлиентПереопределяемый.ОбработчикКоманды:
//               //	Команда = Форма.Команды.Добавить("МояОсобеннаяКоманда");
//               //	Команда.Действие  = "Подключаемый_Команда";
//               //	Команда.Заголовок = НСтр("ru = 'Моя команда...'");
//               //	
//               //	Кнопка = Форма.Элементы.Добавить(Команда.Имя, Тип("КнопкаФормы"), Форма.Элементы.<ИмяПодменю>);
//               //	Кнопка.ИмяКоманды = Команда.Имя;
//               //	
//               //	Форма.ПостоянныеКоманды.Добавить(КомандаСоздать.Имя);
//               //
//               Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
//               	// Обработка события.
//               КонецПроцедуры
//           
//           ** ПередЗагрузкойВариантаНаСервере - Булево - Если Истина, то в модуле объекта отчета
//               следует определить обработчик события по шаблону:
//               
//               // Вызывается в обработчике одноименного события формы отчета после выполнения кода формы.
//               //
//               // Параметры:
//               //   Форма - УправляемаяФорма - Форма отчета.
//               //   НовыеНастройкиКД - НастройкиКомпоновкиДанных - Настройки для загрузки в компоновщик настроек.
//               //
//               // См. также:
//               //   "Расширение управляемой формы для отчета.ПриЗагрузкеВариантаНаСервере" в синтакс-помощнике.
//               //
//               Процедура ПередЗагрузкойВариантаНаСервере(Форма, НовыеНастройкиКД) Экспорт
//               	// Обработка события.
//               КонецПроцедуры
//           
//           ** ПриЗагрузкеВариантаНаСервере - Булево - Если Истина, то в модуле объекта отчета
//               следует определить обработчик события по шаблону:
//               
//               // Вызывается в обработчике одноименного события формы отчета после выполнения кода формы.
//               //
//               // Параметры:
//               //   Форма - УправляемаяФорма - Форма отчета.
//               //   НовыеНастройкиКД - НастройкиКомпоновкиДанных - Настройки для загрузки в компоновщик настроек.
//               //
//               // См. также:
//               //   "Расширение управляемой формы для отчета.ПриЗагрузкеВариантаНаСервере" в синтакс-помощнике.
//               //
//               Процедура ПриЗагрузкеВариантаНаСервере(Форма, НовыеНастройкиКД) Экспорт
//               	// Обработка события.
//               КонецПроцедуры
//           
//           ** ПриЗагрузкеПользовательскихНастроекНаСервере - Булево - Если Истина, то в модуле объекта отчета
//               следует определить обработчик события по шаблону:
//               
//               // Вызывается в обработчике одноименного события формы отчета после выполнения кода формы.
//               //
//               // Параметры:
//               //   Форма - УправляемаяФорма - Форма отчета.
//               //   НовыеПользовательскиеНастройкиКД - ПользовательскиеНастройкиКомпоновкиДанных -
//               //       Пользовательские настройки для загрузки в компоновщик настроек.
//               //
//               // См. также:
//               //   "Расширение управляемой формы для отчета.ПриЗагрузкеПользовательскихНастроекНаСервере"
//               //    в синтакс-помощнике.
//               //
//               Процедура ПриЗагрузкеПользовательскихНастроекНаСервере(Форма, НовыеПользовательскиеНастройкиКД) Экспорт
//               	// Обработка события.
//               КонецПроцедуры
//           
//           ** ПередЗаполнениемПанелиБыстрыхНастроек - Булево - Если Истина, то в модуле объекта отчета
//               следует определить обработчик события по шаблону:
//               
//               // Вызывается до перезаполнения панели настроек формы отчета.
//               //
//               // Параметры:
//               //   Форма - УправляемаяФорма - Форма отчета.
//               //   ПараметрыЗаполнения - Структура - Параметры, которые будут загружены в отчет.
//               //
//               Процедура ПередЗаполнениемПанелиБыстрыхНастроек(Форма, ПараметрыЗаполнения) Экспорт
//               	// Обработка события.
//               КонецПроцедуры
//           
//           ** ПослеЗаполненияПанелиБыстрыхНастроек - Булево - Если Истина, то в модуле объекта отчета
//               следует определить обработчик события по шаблону:
//               
//               // Вызывается после перезаполнения панели настроек формы отчета.
//               //
//               // Параметры:
//               //   Форма - УправляемаяФорма - Форма отчета.
//               //   ПараметрыЗаполнения - Структура - Параметры, которые будут загружены в отчет.
//               //
//               Процедура ПослеЗаполненияПанелиБыстрыхНастроек(Форма, ПараметрыЗаполнения) Экспорт
//               	// Обработка события.
//               КонецПроцедуры
//           
//           ** КонтекстныйВызовСервера - Булево - Если Истина, то в модуле объекта отчета
//               следует определить обработчик события по шаблону:
//               
//               // Обработчик контекстного вызова сервера.
//               //   Позволяет выполнить контекстный вызов сервера когда это требуется из клиентского общего модуля.
//               //   Например, из ОтчетыКлиентПереопределяемый.ОбработчикКоманды().
//               //
//               // Параметры:
//               //   Форма  - УправляемаяФорма
//               //   Ключ      - Строка    - Ключ операции, которую необходимо выполнить в контекстном вызове.
//               //   Параметры - Структура - Параметры вызова сервера.
//               //   Результат - Структура - Результат работы сервера, возвращается на клиент.
//               //
//               // См. также:
//               //   ОбщаяФорма.ФормаОтчета.ВыполнитьКонтекстныйВызовСервера().
//               //
//               Процедура КонтекстныйВызовСервера(Форма, Ключ, Параметры, Результат) Экспорт
//               	// Обработка события.
//               КонецПроцедуры
//           
//           ** ПриОпределенииПараметровВыбора - Булево - Если Истина, то в модуле объекта отчета
//               следует определить обработчик события по шаблону:
//               
//               // Вызывается в форме отчета перед выводом настройки.
//               //   Подробнее - см. ОтчетыПереопределяемый.ПриОпределенииПараметровВыбора().
//               //
//               Процедура ПриОпределенииПараметровВыбора(Форма, СвойстваНастройки) Экспорт
//               	// Обработка события.
//               КонецПроцедуры
//           
//           ** ДополнитьСвязиОбъектовМетаданных - Булево - Если Истина, то в модуле объекта отчета
//               следует определить обработчик события по шаблону:
//               
//               // Дополнительные связи настроек этого отчета.
//               //   Подробнее - см. ОтчетыПереопределяемый.ДополнитьСвязиОбъектовМетаданных().
//               //
//               Процедура ДополнитьСвязиОбъектовМетаданных(СвязиОбъектовМетаданных) Экспорт
//               	// Обработка события.
//               КонецПроцедуры
//
Функция ПолучитьНастройкиОтчетаПоУмолчанию() Экспорт
	Печать = Новый Структура;
	Печать.Вставить("ПолеСверху", 10);
	Печать.Вставить("ПолеСлева", 10);
	Печать.Вставить("ПолеСнизу", 10);
	Печать.Вставить("ПолеСправа", 10);
	Печать.Вставить("ОриентацияСтраницы", ОриентацияСтраницы.Портрет);
	Печать.Вставить("АвтоМасштаб", Истина);
	Печать.Вставить("МасштабПечати", Неопределено);
	
	События = Новый Структура;
	События.Вставить("ПриСозданииНаСервере", Ложь);
	События.Вставить("ПередЗагрузкойВариантаНаСервере", Ложь);
	События.Вставить("ПриЗагрузкеВариантаНаСервере", Ложь);
	События.Вставить("ПриЗагрузкеПользовательскихНастроекНаСервере", Ложь);
	События.Вставить("ПередЗаполнениемПанелиБыстрыхНастроек", Ложь);
	События.Вставить("ПослеЗаполненияПанелиБыстрыхНастроек", Ложь);
	События.Вставить("КонтекстныйВызовСервера", Ложь);
	События.Вставить("ПриОпределенииПараметровВыбора", Ложь);
	События.Вставить("ДополнитьСвязиОбъектовМетаданных", Ложь);
	
	Настройки = Новый Структура;
	Настройки.Вставить("ФормироватьСразу", Ложь);
	Настройки.Вставить("ВыводитьСуммуВыделенныхЯчеек", Истина);
	Настройки.Вставить("СоответствиеПериодичностиПараметров", Новый Соответствие);
	Настройки.Вставить("Печать", Печать);
	Настройки.Вставить("События", События);
	
	// Устарели:
	Настройки.Вставить("ПараметрыПечатиПоУмолчанию", Печать); // См. Настройки.Печать.
	
	Возврат Настройки;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Находит доступную настройку для отбора или параметра.
//
// Параметры:
//   НастройкиКД - НастройкиКомпоновкиДанных - Коллекции настроек.
//   ОбщаяНастройка - ЭлементОтбораКомпоновкиДанных, ЗначениеПараметраНастроекКомпоновкиДанных,
//       НастройкиВложенногоОбъектаКомпоновкиДанных - Значение элемента настройки.
//
// Возвращаемое значение:
//   ДоступноеПолеКомпоновкиДанных, ДоступныйПараметрКомпоновкиДанных, ДоступныйОбъектНастройкиКомпоновкиДанных -
//   Доступная настройка.
//   Неопределено - Если доступная настройка не найдена.
//
Функция НайтиДоступнуюНастройку(НастройкиКД, ОбщаяНастройка) Экспорт
	ТипОбщейНастройки = ТипЗнч(ОбщаяНастройка);
	Если ТипОбщейНастройки = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
		Возврат НайтиДоступноеПолеКД(НастройкиКД, ОбщаяНастройка.ЛевоеЗначение);
	ИначеЕсли ТипОбщейНастройки = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
		Возврат НайтиДоступныйПараметрКД(НастройкиКД, ОбщаяНастройка.Параметр);
	ИначеЕсли ТипОбщейНастройки = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных") Тогда
		Возврат НастройкиКД.ДоступныеОбъекты.Элементы.Найти(ОбщаяНастройка.ИдентификаторОбъекта);
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

// Находит доступную настройку поля компоновки данных.
//
// Параметры:
//   НастройкиКД - НастройкиКомпоновкиДанных - Коллекции настроек.
//   ПолеКД - ПолеКомпоновкиДанных - Имя поля.
//
// Возвращаемое значение:
//   ДоступноеПолеКомпоновкиДанных, Неопределено - Доступная настройка для поля.
//
Функция НайтиДоступноеПолеКД(НастройкиКД, ПолеКД) Экспорт
	Если ПолеКД = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДоступнаяНастройка = НастройкиКД.ДоступныеПоляОтбора.НайтиПоле(ПолеКД);
	Если ДоступнаяНастройка <> Неопределено Тогда
		Возврат ДоступнаяНастройка;
	КонецЕсли;
	
	МассивСтруктур = Новый Массив;
	МассивСтруктур.Добавить(НастройкиКД.Структура);
	Пока МассивСтруктур.Количество() > 0 Цикл
		
		СтруктураКД = МассивСтруктур[0];
		МассивСтруктур.Удалить(0);
		
		Для Каждого ЭлементСтруктурыКД Из СтруктураКД Цикл
			
			Если ТипЗнч(ЭлементСтруктурыКД) = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных") Тогда
				
				ДоступнаяНастройка = ЭлементСтруктурыКД.Настройки.ДоступныеПоляОтбора.НайтиПоле(ПолеКД);
				Если ДоступнаяНастройка <> Неопределено Тогда
					Возврат ДоступнаяНастройка;
				КонецЕсли;
				
				МассивСтруктур.Добавить(ЭлементСтруктурыКД.Настройки.Структура);
				
			ИначеЕсли ТипЗнч(ЭлементСтруктурыКД) = Тип("ГруппировкаКомпоновкиДанных") Тогда
				
				ДоступнаяНастройка = ЭлементСтруктурыКД.Отбор.ДоступныеПоляОтбора.НайтиПоле(ПолеКД);
				Если ДоступнаяНастройка <> Неопределено Тогда
					Возврат ДоступнаяНастройка;
				КонецЕсли;
				
				МассивСтруктур.Добавить(ЭлементСтруктурыКД.Структура);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Неопределено;
КонецФункции

// Находит доступную настройку параметра компоновки данных.
//
// Параметры:
//   НастройкиКД - НастройкиКомпоновкиДанных - Коллекции настроек.
//   ПараметрКД - ПараметрКомпоновкиДанных - Имя параметра.
//
// Возвращаемое значение:
//   ДоступныйПараметрКомпоновкиДанных, Неопределено - Доступная настройка для параметра.
//
Функция НайтиДоступныйПараметрКД(НастройкиКД, ПараметрКД) Экспорт
	Если ПараметрКД = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НастройкиКД.ПараметрыДанных.ДоступныеПараметры <> Неопределено Тогда
		// Настройки, которым принадлежат параметры данных, связаны с источником доступных настроек.
		ДоступнаяНастройка = НастройкиКД.ПараметрыДанных.ДоступныеПараметры.НайтиПараметр(ПараметрКД);
		Если ДоступнаяНастройка <> Неопределено Тогда
			Возврат ДоступнаяНастройка;
		КонецЕсли;
	КонецЕсли;
	
	МассивСтруктур = Новый Массив;
	МассивСтруктур.Добавить(НастройкиКД.Структура);
	Пока МассивСтруктур.Количество() > 0 Цикл
		
		СтруктураКД = МассивСтруктур[0];
		МассивСтруктур.Удалить(0);
		
		Для Каждого ЭлементСтруктурыКД Из СтруктураКД Цикл
			
			Если ТипЗнч(ЭлементСтруктурыКД) = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных") Тогда
				
				Если ЭлементСтруктурыКД.Настройки.ПараметрыДанных.ДоступныеПараметры <> Неопределено Тогда
					// Настройки, которым принадлежат параметры данных, связаны с источником доступных настроек.
					ДоступнаяНастройка = ЭлементСтруктурыКД.Настройки.ПараметрыДанных.ДоступныеПараметры.НайтиПараметр(ПараметрКД);
					Если ДоступнаяНастройка <> Неопределено Тогда
						Возврат ДоступнаяНастройка;
					КонецЕсли;
				КонецЕсли;
				
				МассивСтруктур.Добавить(ЭлементСтруктурыКД.Настройки.Структура);
				
			ИначеЕсли ТипЗнч(ЭлементСтруктурыКД) = Тип("ГруппировкаКомпоновкиДанных") Тогда
				
				МассивСтруктур.Добавить(ЭлементСтруктурыКД.Структура);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Неопределено;
КонецФункции

// Находит пользовательскую настройку по ее идентификатору.
//
// Параметры:
//   ПользовательскиеНастройкиКД - ПользовательскиеНастройкиКомпоновкиДанных - Коллекция пользовательских настроек.
//   Идентификатор - Строка -
//
Функция НайтиПользовательскуюНастройку(ПользовательскиеНастройкиКД, Идентификатор) Экспорт
	Для Каждого ПользовательскаяНастройка Из ПользовательскиеНастройкиКД.Элементы Цикл
		Если ПользовательскаяНастройка.ИдентификаторПользовательскойНастройки = Идентификатор Тогда
			Возврат ПользовательскаяНастройка;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
КонецФункции

// Находит вложенную пользовательскую настройку по ее идентификатору.
Функция НайтиВложеннуюПользовательскуюНастройку(ПользовательскаяНастройка, Идентификатор) Экспорт
	Если Не ЗначениеЗаполнено(Идентификатор) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Для Каждого ВложеннаяНастройка Из ПользовательскаяНастройка.Элементы Цикл
		Если Строка(ПользовательскаяНастройка.ПолучитьИдентификаторПоОбъекту(ВложеннаяНастройка)) = Идентификатор Тогда
			Возврат ВложеннаяНастройка;
		КонецЕсли;
		Если ТипЗнч(ВложеннаяНастройка) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
			РезультатПоиска = НайтиПолеВыбора(ПользовательскаяНастройка, Идентификатор, ВложеннаяНастройка);
			Если РезультатПоиска <> Неопределено Тогда
				Возврат РезультатПоиска;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
КонецФункции

// Находит общую настройку по идентификатору пользовательской настройки.
//
// Параметры:
//   Настройки - НастройкиКомпоновкиДанных - Коллекции настроек.
//   ИдентификаторПользовательскойНастройки - Строка -
//
Функция ПолучитьОбъектПоПользовательскомуИдентификатору(Настройки, ИдентификаторПользовательскойНастройки, Иерархия = Неопределено) Экспорт
	Если Иерархия <> Неопределено Тогда
		Иерархия.Добавить(Настройки);
	КонецЕсли;
	
	ТипНастройки = ТипЗнч(Настройки);
	
	Если ТипНастройки <> Тип("НастройкиКомпоновкиДанных") Тогда
		
		Если Настройки.ИдентификаторПользовательскойНастройки = ИдентификаторПользовательскойНастройки Тогда
			
			Возврат Настройки;
			
		ИначеЕсли ТипНастройки = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных") Тогда
			
			Возврат ПолучитьОбъектПоПользовательскомуИдентификатору(Настройки.Настройки, ИдентификаторПользовательскойНастройки, Иерархия);
			
		ИначеЕсли ТипНастройки = Тип("КоллекцияЭлементовСтруктурыТаблицыКомпоновкиДанных")
			ИЛИ ТипНастройки = Тип("КоллекцияЭлементовСтруктурыДиаграммыКомпоновкиДанных")
			ИЛИ ТипНастройки = Тип("КоллекцияЭлементовСтруктурыНастроекКомпоновкиДанных") Тогда
			
			Для Каждого ВложенныйЭлемент Из Настройки Цикл
				РезультатПоиска = ПолучитьОбъектПоПользовательскомуИдентификатору(ВложенныйЭлемент, ИдентификаторПользовательскойНастройки, Иерархия);
				Если РезультатПоиска <> Неопределено Тогда
					Возврат РезультатПоиска;
				КонецЕсли;
			КонецЦикла;
			
			Если Иерархия <> Неопределено Тогда
				Иерархия.Удалить(Иерархия.ВГраница());
			КонецЕсли;
			
			Возврат Неопределено;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Настройки.Выбор.ИдентификаторПользовательскойНастройки = ИдентификаторПользовательскойНастройки Тогда
		Возврат Настройки.Выбор;
	ИначеЕсли Настройки.УсловноеОформление.ИдентификаторПользовательскойНастройки = ИдентификаторПользовательскойНастройки Тогда
		Возврат Настройки.УсловноеОформление;
	КонецЕсли;
	
	Если ТипНастройки <> Тип("ТаблицаКомпоновкиДанных") И ТипНастройки <> Тип("ДиаграммаКомпоновкиДанных") Тогда
		Если Настройки.Отбор.ИдентификаторПользовательскойНастройки = ИдентификаторПользовательскойНастройки Тогда
			Возврат Настройки.Отбор;
		ИначеЕсли Настройки.Порядок.ИдентификаторПользовательскойНастройки = ИдентификаторПользовательскойНастройки Тогда
			Возврат Настройки.Порядок;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипНастройки = Тип("НастройкиКомпоновкиДанных") Тогда
		РезультатПоиска = НайтиЭлементНастройки(Настройки.ПараметрыДанных, ИдентификаторПользовательскойНастройки);
		Если РезультатПоиска <> Неопределено Тогда
			Возврат РезультатПоиска;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипНастройки <> Тип("ТаблицаКомпоновкиДанных") И ТипНастройки <> Тип("ДиаграммаКомпоновкиДанных") Тогда
		РезультатПоиска = НайтиЭлементНастройки(Настройки.Отбор, ИдентификаторПользовательскойНастройки);
		Если РезультатПоиска <> Неопределено Тогда
			Возврат РезультатПоиска;
		КонецЕсли;
	КонецЕсли;
	
	РезультатПоиска = НайтиЭлементНастройки(Настройки.УсловноеОформление, ИдентификаторПользовательскойНастройки);
	Если РезультатПоиска <> Неопределено Тогда
		Возврат РезультатПоиска;
	КонецЕсли;
	
	Если ТипНастройки = Тип("ТаблицаКомпоновкиДанных") Тогда
		
		РезультатПоиска = ПолучитьОбъектПоПользовательскомуИдентификатору(Настройки.Строки, ИдентификаторПользовательскойНастройки, Иерархия);
		Если РезультатПоиска <> Неопределено Тогда
			Возврат РезультатПоиска;
		КонецЕсли;
		
		РезультатПоиска = ПолучитьОбъектПоПользовательскомуИдентификатору(Настройки.Колонки, ИдентификаторПользовательскойНастройки, Иерархия);
		Если РезультатПоиска <> Неопределено Тогда
			Возврат РезультатПоиска;
		КонецЕсли;
		
	ИначеЕсли ТипНастройки = Тип("ДиаграммаКомпоновкиДанных") Тогда
		
		РезультатПоиска = ПолучитьОбъектПоПользовательскомуИдентификатору(Настройки.Точки, ИдентификаторПользовательскойНастройки, Иерархия);
		Если РезультатПоиска <> Неопределено Тогда
			Возврат РезультатПоиска;
		КонецЕсли;
		
		РезультатПоиска = ПолучитьОбъектПоПользовательскомуИдентификатору(Настройки.Серии, ИдентификаторПользовательскойНастройки, Иерархия);
		Если РезультатПоиска <> Неопределено Тогда
			Возврат РезультатПоиска;
		КонецЕсли;
		
	Иначе
		
		РезультатПоиска = ПолучитьОбъектПоПользовательскомуИдентификатору(Настройки.Структура, ИдентификаторПользовательскойНастройки, Иерархия);
		Если РезультатПоиска <> Неопределено Тогда
			Возврат РезультатПоиска;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Иерархия <> Неопределено Тогда
		Иерархия.Удалить(Иерархия.ВГраница());
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Функция возвращает доступное поле компоновки данных.
//
// Параметры:
//		Доступные поля - доступные поля компоновки данные, доступные поля отбора компоновки данные и т.д.
//		Поле           - Имя поля компоновки данных.
//
Функция ПолучитьДоступноеПоле(ДоступныеПоля, Поле) Экспорт
	
	Если ТипЗнч(Поле) = Тип("Строка") Тогда
		ПолеДоступа = Новый ПолеКомпоновкиДанных(Поле);
	ИначеЕсли ТипЗнч(Поле) = Тип("ПолеКомпоновкиДанных") Тогда
		ПолеДоступа = Поле;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ДоступныеПоля.НайтиПоле(ПолеДоступа);
	
КонецФункции

// Функция возвращает доступный параметр компоновки данных.
//
// Параметры:
//		Доступные поля - доступные поля компоновки данные, доступные поля отбора компоновки данные и т.д.
//		Параметр       - Имя параметра компоновки данных.
//
Функция ПолучитьДоступныйПараметр(ДоступныеПараметры, Параметр) Экспорт
	
	Если ТипЗнч(ДоступныеПараметры) <> Тип("ДоступныеПараметрыКомпоновкиДанных") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТипЗнч(Параметр) = Тип("Строка") Тогда
		ПараметрДоступа = Новый ПараметрКомпоновкиДанных(Параметр);
	ИначеЕсли ТипЗнч(Параметр) = Тип("ПараметрКомпоновкиДанных") Тогда
		ПараметрДоступа = Параметр;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ДоступныеПараметры.НайтиПараметр(ПараметрДоступа);
	
КонецФункции

// Загружает значения элемента настроек в таблицу.
Процедура ДобавитьЭлементыНастройки(ФормаОтчета, Таблица, ЭлементНастройки, ЭлементВыбора, ДобавлятьИерархическиеПоля, Отступ = "") Экспорт
	
	Для каждого ПолеВыбора Из ЭлементВыбора.Элементы Цикл
		Заголовок = ПолеВыбора.Заголовок;
		Если Заголовок = "" Тогда
			ДоступноеПоле = ПолучитьДоступноеПоле(ФормаОтчета.Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора, ПолеВыбора.Поле);
			Если ДоступноеПоле <> Неопределено Тогда
				Заголовок = ДоступноеПоле.Заголовок;
			Иначе
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		СтрокаПоляВыбора = Таблица.Добавить();
		СтрокаПоляВыбора.Представление = Отступ + Заголовок;
		СтрокаПоляВыбора.Использование = ПолеВыбора.Использование;
		СтрокаПоляВыбора.Идентификатор = Строка(ЭлементНастройки.ПолучитьИдентификаторПоОбъекту(ПолеВыбора));
		Если ТипЗнч(ПолеВыбора) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
			СтрокаПоляВыбора.ЭтоГруппа = Истина;
		КонецЕсли;
		Если ДобавлятьИерархическиеПоля И ТипЗнч(ПолеВыбора) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") И ПолеВыбора.Элементы.Количество() > 0 Тогда
			ДобавитьЭлементыНастройки(ФормаОтчета, Таблица, ЭлементНастройки, ПолеВыбора, Истина, Отступ + "    ");
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает список периодов в диапазоне периода.
Функция ПолучитьСтруктуруОтборов(ФормаОтчета, КомпоновщикНастроек, СтрокаИдентификатора, ТипОтбора = Неопределено, СтрокаТипаОтбора = Неопределено) Экспорт
	
	СтруктураПараметров = Новый Структура();
	
	Если ТипОтбора = Неопределено И (СтрокаТипаОтбора = Неопределено Или СтрокаТипаОтбора = "") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТипОтбора = Неопределено И СтрокаТипаОтбора <> Неопределено И СтрокаТипаОтбора = "" Тогда
		ТипОтбора = Тип(СтрокаТипаОтбора);
	КонецЕсли;
	
	// Получим таблицу связей 
	СтрокиСвязей = ФормаОтчета.СвязиОтборов.НайтиСтроки(Новый Структура("ИдентификаторОтбора", СтрокаИдентификатора));
	МассивСтрокСвязи = Новый Массив;
	Для каждого СтрокаСвязи Из СтрокиСвязей Цикл
		Если Тип(СтрокаСвязи.Тип) = ТипОтбора Тогда
			МассивСтрокСвязи.Добавить(СтрокаСвязи);
		КонецЕсли;
	КонецЦикла;
	
	// Добавим отборы и параметры из элементов настройки отчета по таблице связей полей.
	Для Каждого СтрокаСвязи Из МассивСтрокСвязи Цикл
		ЭлементНастройки = НайтиПользовательскуюНастройку(КомпоновщикНастроек.ПользовательскиеНастройки, СтрокаСвязи.ИдентификаторЗначенияОтбора);
		Если ЭлементНастройки = Неопределено Или Не ЭлементНастройки.Использование Тогда
			Продолжить;
		КонецЕсли;
		ЗначениеОтбора = НеОпределено;
		Если ТипЗнч(ЭлементНастройки) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			ЗначениеОтбора = ЭлементНастройки.ПравоеЗначение;
		ИначеЕсли ТипЗнч(ЭлементНастройки) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
			ЗначениеОтбора = ЭлементНастройки.Значение;
		КонецЕсли;
		Если ЗначениеОтбора <> НеОпределено Тогда
			ПараметрВыбораИмена = СтрРазделить(СтрокаСвязи.РеквизитПоля, ".");
			Если ПараметрВыбораИмена.Количество() = 1 Тогда
				СтруктураПараметров.Вставить(ПараметрВыбораИмена[0], ЗначениеОтбора);
			ИначеЕсли ПараметрВыбораИмена[0] = "Отбор" Тогда
				Если Не СтруктураПараметров.Свойство("Отбор") Тогда
					СтруктураПараметров.Вставить("Отбор", Новый Структура());
				КонецЕсли;
				СтруктураПараметров.Отбор.Вставить(ПараметрВыбораИмена[1], ЗначениеОтбора);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтруктураПараметров;
	
КонецФункции

// Добавляет выбранное поле компоновки данных.
//
// Параметры:
//   Куда - КомпоновщикНастроекКомпоновкиДанных, НастройкиКомпоновкиДанных, ВыбранныеПоляКомпоновкиДанных -
//       Коллекция в которую требуется добавить выбранное поле.
//   ИмяИлиПолеКД - Строка, ПолеКомпоновкиДанных - Имя поля.
//   Заголовок    - Строка - Необязательный. Представление поля.
//
// Возвращаемое значение:
//   ВыбранноеПолеКомпоновкиДанных - Добавленное выбранное поле.
//
Функция ДобавитьВыбранноеПоле(Куда, ИмяИлиПолеКД, Заголовок = "") Экспорт
	
	Если ТипЗнч(Куда) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		ВыбранныеПоляКД = Куда.Настройки.Выбор;
	ИначеЕсли ТипЗнч(Куда) = Тип("НастройкиКомпоновкиДанных") Тогда
		ВыбранныеПоляКД = Куда.Выбор;
	Иначе
		ВыбранныеПоляКД = Куда;
	КонецЕсли;
	
	Если ТипЗнч(ИмяИлиПолеКД) = Тип("Строка") Тогда
		ПолеКД = Новый ПолеКомпоновкиДанных(ИмяИлиПолеКД);
	Иначе
		ПолеКД = ИмяИлиПолеКД;
	КонецЕсли;
	
	ВыбранноеПолеКД = ВыбранныеПоляКД.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеПолеКД.Поле = ПолеКД;
	Если Заголовок <> "" Тогда
		ВыбранноеПолеКД.Заголовок = Заголовок;
	КонецЕсли;
	
	Возврат ВыбранноеПолеКД;
	
КонецФункции

// Возвращает список всех группировок компоновщика настроек.
// 
// Параметры:
//		ЭлементСтруктуры - элемент структуры настройки СКД, настройка СКД или компоновщик настроек.
//		ПоказыватьГруппировкиТаблиц - признак добавления в список группировки колонок (по умолчанию Истина).
//
Функция ПолучитьГруппировки(ЭлементСтруктуры, ПоказыватьГруппировкиТаблиц = Истина) Экспорт
	
	СписокПолей = Новый СписокЗначений;
	Если ТипЗнч(ЭлементСтруктуры) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		Структура = ЭлементСтруктуры.Настройки.Структура;
		ДобавитьГруппировки(Структура, СписокПолей);
	ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("НастройкиКомпоновкиДанных") Тогда
		Структура = ЭлементСтруктуры.Структура;
		ДобавитьГруппировки(Структура, СписокПолей);
	ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ТаблицаКомпоновкиДанных") Тогда
		ДобавитьГруппировки(ЭлементСтруктуры.Строки, СписокПолей);
		ДобавитьГруппировки(ЭлементСтруктуры.Колонки, СписокПолей);
	ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ДиаграммаКомпоновкиДанных") Тогда
		ДобавитьГруппировки(ЭлементСтруктуры.Серии, СписокПолей);
		ДобавитьГруппировки(ЭлементСтруктуры.Точки, СписокПолей);
	Иначе
		ДобавитьГруппировки(ЭлементСтруктуры.Структура, СписокПолей, ПоказыватьГруппировкиТаблиц);
	КонецЕсли;
	Возврат СписокПолей;
	
КонецФункции

// Находит пользовательскую настройку по имени параметра.
//   Если пользовательская настройка не найдена (например,
//   если параметр не выведен в пользовательские настройки),
//   то получает общую настройку параметра.
//
// Параметры:
//   КомпоновщикНастроекКД - КомпоновщикНастроекКомпоновкиДанных - Компоновщик настроек.
//   ИмяПараметра          - Строка - Имя параметра.
//
// Возвращаемое значение:
//   ЗначениеПараметраНастроекКомпоновкиДанных - Пользовательская настройка параметра.
//   Неопределено - Если параметр не найден.
//
Функция ПолучитьПараметр(КомпоновщикНастроекКД, ИмяПараметра) Экспорт
	ПараметрКД = Новый ПараметрКомпоновкиДанных(ИмяПараметра);
	
	Для Каждого ПользовательскаяНастройка Из КомпоновщикНастроекКД.ПользовательскиеНастройки.Элементы Цикл
		Если ТипЗнч(ПользовательскаяНастройка) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных")
			И ПользовательскаяНастройка.Параметр = ПараметрКД Тогда
			Возврат ПользовательскаяНастройка;
		КонецЕсли;
	КонецЦикла;
	
	Возврат КомпоновщикНастроекКД.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(ПараметрКД);
КонецФункции

// Возвращает список полей группировок всех группировок компоновщика настроек.
//
// Параметры: 
//		КомпоновщикНастроек - компоновщик настроек.
//		БезПользовательскихПолей - признак не включения пользовательских настроек СКД.
//
Функция ПолучитьПоляГруппировок(КомпоновщикНастроек, БезПользовательскихПолей = Ложь) Экспорт
	
	СписокПолей = Новый СписокЗначений;
	
	Структура = КомпоновщикНастроек.Настройки.Структура;
	ДобавитьПоляГруппировки(Структура, СписокПолей, БезПользовательскихПолей);
	Возврат СписокПолей;
	
КонецФункции

// Возвращает последний элемент структуры - группировку.
//
// Параметры:
//		ЭлементСтруктурыНастроек - элемент структуры компоновки данных.
//		Строки - признак для получения последний группировки строк (Серий) или колонок (точек).
//
Функция ПолучитьПоследнийЭлементСтруктуры(ЭлементСтруктурыНастроек, Строки = Истина) Экспорт
	
	Если ТипЗнч(ЭлементСтруктурыНастроек) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		Настройки = ЭлементСтруктурыНастроек.Настройки;
	ИначеЕсли ТипЗнч(ЭлементСтруктурыНастроек) = Тип("НастройкиКомпоновкиДанных") Тогда
		Настройки = ЭлементСтруктурыНастроек;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Структура = Настройки.Структура;
	Если Структура.Количество() = 0 Тогда
		Возврат Настройки;
	КонецЕсли;
	
	Если Строки Тогда
		ИмяСтруктурыТаблицы = "Строки";
		ИмяСтруктурыДиаграммы = "Серии";
	Иначе
		ИмяСтруктурыТаблицы = "Колонки";
		ИмяСтруктурыДиаграммы = "Точки";
	КонецЕсли;
	
	Пока Истина Цикл
		ЭлементСтруктуры = Структура[0];
		Если ТипЗнч(ЭлементСтруктуры) = Тип("ТаблицаКомпоновкиДанных") И ЭлементСтруктуры[ИмяСтруктурыТаблицы].Количество() > 0 Тогда
			Если ЭлементСтруктуры[ИмяСтруктурыТаблицы][0].Структура.Количество() = 0 Тогда
				Структура = ЭлементСтруктуры[ИмяСтруктурыТаблицы];
				Прервать;
			КонецЕсли;
			Структура = ЭлементСтруктуры[ИмяСтруктурыТаблицы][0].Структура;
		ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ДиаграммаКомпоновкиДанных") И ЭлементСтруктуры[ИмяСтруктурыДиаграммы].Количество() > 0 Тогда
			Если ЭлементСтруктуры[ИмяСтруктурыДиаграммы][0].Структура.Количество() = 0 Тогда
				Структура = ЭлементСтруктуры[ИмяСтруктурыДиаграммы];
				Прервать;
			КонецЕсли;
			Структура = ЭлементСтруктуры[ИмяСтруктурыДиаграммы][0].Структура;
		ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаКомпоновкиДанных")
			  ИЛИ ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаТаблицыКомпоновкиДанных")
			  ИЛИ ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаДиаграммыКомпоновкиДанных") Тогда
			Если ЭлементСтруктуры.Структура.Количество() = 0 Тогда
				Прервать;
			КонецЕсли;
			Структура = ЭлементСтруктуры.Структура;
		ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ТаблицаКомпоновкиДанных") Тогда
			Возврат ЭлементСтруктуры[ИмяСтруктурыТаблицы];
		ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ДиаграммаКомпоновкиДанных")	Тогда
			Возврат ЭлементСтруктуры[ИмяСтруктурыДиаграммы];
		Иначе
			Возврат ЭлементСтруктуры;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Структура[0];
	
КонецФункции

// Приводит значение типа ИспользованиеГруппИЭлементов к типу ГруппыИЭлементы.
//  Для других типов возвращает значение Авто.
//
Функция ПривестиЗначениеКТипуГруппыИЭлементы(ИсходноеЗначение, ЗначениеПоУмолчанию = Неопределено) Экспорт
	Тип = ТипЗнч(ИсходноеЗначение);
	Если Тип = Тип("ГруппыИЭлементы") Тогда
		Возврат ИсходноеЗначение;
	ИначеЕсли Тип = Тип("ИспользованиеГруппИЭлементов") Тогда
		Если ИсходноеЗначение = ИспользованиеГруппИЭлементов.Элементы Тогда
			Возврат ГруппыИЭлементы.Элементы;
		ИначеЕсли ИсходноеЗначение = ИспользованиеГруппИЭлементов.ГруппыИЭлементы Тогда
			Возврат ГруппыИЭлементы.ГруппыИЭлементы;
		ИначеЕсли ИсходноеЗначение = ИспользованиеГруппИЭлементов.Группы Тогда
			Возврат ГруппыИЭлементы.Группы;
		КонецЕсли;
	ИначеЕсли Тип = Тип("ВидСравненияКомпоновкиДанных") Тогда
		Если ИсходноеЗначение = ВидСравненияКомпоновкиДанных.ВСписке
			Или ИсходноеЗначение = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии
			Или ИсходноеЗначение = ВидСравненияКомпоновкиДанных.НеВСписке
			Или ИсходноеЗначение = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии Тогда
			Возврат ГруппыИЭлементы.ГруппыИЭлементы;
		ИначеЕсли ИсходноеЗначение = ВидСравненияКомпоновкиДанных.ВИерархии
			Или ИсходноеЗначение = ВидСравненияКомпоновкиДанных.НеВИерархии Тогда
			Возврат ГруппыИЭлементы.Группы;
		КонецЕсли;
	КонецЕсли;
	Возврат ?(ЗначениеПоУмолчанию = Неопределено, ГруппыИЭлементы.Авто, ЗначениеПоУмолчанию);
КонецФункции

// Приводит значение типа ГруппыИЭлементы к типу ИспользованиеГруппИЭлементов.
//  Для значения Авто и других типов возвращает значение Неопределено.
//
Функция ПривестиЗначениеКТипуИспользованиеГруппИЭлементов(ИсходноеЗначение) Экспорт
	Если ИсходноеЗначение = ГруппыИЭлементы.Элементы Тогда
		Возврат ИспользованиеГруппИЭлементов.Элементы;
	ИначеЕсли ИсходноеЗначение = ГруппыИЭлементы.ГруппыИЭлементы Тогда
		Возврат ИспользованиеГруппИЭлементов.ГруппыИЭлементы;
	ИначеЕсли ИсходноеЗначение = ГруппыИЭлементы.Группы Тогда
		Возврат ИспользованиеГруппИЭлементов.Группы;
	ИначеЕсли ТипЗнч(ИсходноеЗначение) = Тип("ИспользованиеГруппИЭлементов") Тогда
		Возврат ИсходноеЗначение;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Локальные служебные процедуры и функции.

// Добавляет вложенные поля группировки.
Процедура ДобавитьПоляГруппировки(Структура, СписокПолей, БезПользовательскихПолей)
	
	Для каждого ЭлементСтруктуры Из Структура Цикл
		Если ТипЗнч(ЭлементСтруктуры) = Тип("ТаблицаКомпоновкиДанных") Тогда
			ДобавитьПоляГруппировки(ЭлементСтруктуры.Строки, СписокПолей, БезПользовательскихПолей);
			ДобавитьПоляГруппировки(ЭлементСтруктуры.Колонки, СписокПолей, БезПользовательскихПолей);
		ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ДиаграммаКомпоновкиДанных") Тогда
			ДобавитьПоляГруппировки(ЭлементСтруктуры.Серии, СписокПолей, БезПользовательскихПолей);
			ДобавитьПоляГруппировки(ЭлементСтруктуры.Точки, СписокПолей, БезПользовательскихПолей);
		Иначе
			Для каждого ТекущееПолеГруппировки Из ЭлементСтруктуры.ПоляГруппировки.Элементы Цикл
				ДоступноеПоле = ЭлементСтруктуры.Выбор.ДоступныеПоляВыбора.НайтиПоле(ТекущееПолеГруппировки.Поле);
				Если ДоступноеПоле <> Неопределено 
				  И (ДоступноеПоле.Родитель = Неопределено ИЛИ Не БезПользовательскихПолей ИЛИ ДоступноеПоле.Родитель.Поле <> Новый ПолеКомпоновкиДанных("UserFields")) Тогда
					СписокПолей.Добавить(Строка(ДоступноеПоле.Поле), ДоступноеПоле.Заголовок);
				КонецЕсли;
			КонецЦикла;
			ДобавитьПоляГруппировки(ЭлементСтруктуры.Структура, СписокПолей, БезПользовательскихПолей);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Добавляет вложенные группировки элемента структуры.
Процедура ДобавитьГруппировки(Структура, СписокГруппировок, ПоказыватьГруппировкиТаблиц = Истина)
	
	Для каждого ЭлементСтруктуры Из Структура Цикл
		Если ТипЗнч(ЭлементСтруктуры) = Тип("ТаблицаКомпоновкиДанных") Тогда
			ДобавитьГруппировки(ЭлементСтруктуры.Строки, СписокГруппировок);
			ДобавитьГруппировки(ЭлементСтруктуры.Колонки, СписокГруппировок);
		ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ДиаграммаКомпоновкиДанных") Тогда
			ДобавитьГруппировки(ЭлементСтруктуры.Серии, СписокГруппировок);
			ДобавитьГруппировки(ЭлементСтруктуры.Точки, СписокГруппировок);
		Иначе
			СписокГруппировок.Добавить(ЭлементСтруктуры);
			Если ПоказыватьГруппировкиТаблиц Тогда
				ДобавитьГруппировки(ЭлементСтруктуры.Структура, СписокГруппировок);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Находит выбранное поле компоновки данных по идентификатору.
Функция НайтиПолеВыбора(ЭлементНастроек, Идентификатор, Группа)
	
	НайденноеПолеВыбора = Неопределено;
	
	Для каждого ПолеВыбора Из Группа.Элементы Цикл
		Если Строка(ЭлементНастроек.ПолучитьИдентификаторПоОбъекту(ПолеВыбора)) = Идентификатор Тогда
			НайденноеПолеВыбора = ПолеВыбора;
			Прервать;
		КонецЕсли;
		Если ТипЗнч(ПолеВыбора) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
			НайденноеПолеВыбора = НайтиПолеВыбора(ЭлементНастроек, Идентификатор, ПолеВыбора);
			Если НайденноеПолеВыбора <> Неопределено Тогда
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат НайденноеПолеВыбора;
КонецФункции

// Находит общую настройку компоновки данных по идентификатору.
Функция НайтиЭлементНастройки(ЭлементНастройки, ИдентификаторПользовательскойНастройки)
	// Поиск элемента с заданным значением свойства ИдентификаторПользовательскойНастройки (ИПН).
	
	МассивГрупп = Новый Массив;
	МассивГрупп.Добавить(ЭлементНастройки.Элементы);
	
	Пока МассивГрупп.Количество() > 0 Цикл
		
		КоллекцияЭлементов = МассивГрупп.Получить(0);
		МассивГрупп.Удалить(0);
		
		Для Каждого ПодчиненныйЭлемент Из КоллекцияЭлементов Цикл
			Если ТипЗнч(ПодчиненныйЭлемент) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
				// Не содержит ИПН; Коллекция вложенных элементов не содержит ИПН.
			ИначеЕсли ТипЗнч(ПодчиненныйЭлемент) = Тип("ЗначениеПараметраКомпоновкиДанных") Тогда
				// Не содержит ИПН; Коллекция вложенных элементов может содержать ИПН.
				МассивГрупп.Добавить(ПодчиненныйЭлемент.ЗначенияВложенныхПараметров);
			ИначеЕсли ПодчиненныйЭлемент.ИдентификаторПользовательскойНастройки = ИдентификаторПользовательскойНастройки Тогда
				// Найден нужный элемент.
				Возврат ПодчиненныйЭлемент;
			Иначе
				// Содержит ИПН; Коллекция вложенных элементов может содержать ИПН.
				Если ТипЗнч(ПодчиненныйЭлемент) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
					МассивГрупп.Добавить(ПодчиненныйЭлемент.Элементы);
				ИначеЕсли ТипЗнч(ПодчиненныйЭлемент) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
					МассивГрупп.Добавить(ПодчиненныйЭлемент.ЗначенияВложенныхПараметров);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Неопределено;
КонецФункции

// Определяет полный путь к элементу компоновки данных.
//
// Параметры:
//   НастройкиКД - НастройкиКомпоновкиДанных - Корневой узел настроек, от которого строится полный путь.
//   ЭлементКД - Произвольный - Узел настроек, к которому строится полный путь.
//
// Возвращаемое значение:
//   Строка - полный путь к элементу. Может использоваться в функции НайтиЭлементПоПолномуПути().
//   Неопределено - если не удалось построить полный путь.
//
Функция ПолныйПутьКЭлементу(Знач НастройкиКД, Знач ЭлементКД) Экспорт
	Результат = Новый Массив;
	РодительКД = ЭлементКД;
	Пока РодительКД <> Неопределено И РодительКД <> НастройкиКД Цикл
		ЭлементКД = РодительКД;
		РодительКД = РодительКД.Родитель;
		ТипРодителя = ТипЗнч(РодительКД);
		Если ТипРодителя = Тип("ТаблицаКомпоновкиДанных") Тогда
			Индекс = РодительКД.Строки.Индекс(ЭлементКД);
			Если Индекс = -1 Тогда
				Индекс = РодительКД.Колонки.Индекс(ЭлементКД);
				ИмяКоллекции = "Колонки";
			Иначе
				ИмяКоллекции = "Строки";
			КонецЕсли;
		ИначеЕсли ТипРодителя = Тип("ДиаграммаКомпоновкиДанных") Тогда
			Индекс = РодительКД.Серии.Индекс(ЭлементКД);
			Если Индекс = -1 Тогда
				Индекс = РодительКД.Точки.Индекс(ЭлементКД);
				ИмяКоллекции = "Точки";
			Иначе
				ИмяКоллекции = "Серии";
			КонецЕсли;
		ИначеЕсли ТипРодителя = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных") Тогда
			ИмяКоллекции = "Настройки";
			Индекс = Неопределено;
		Иначе
			ИмяКоллекции = "Структура";
			Индекс = РодительКД.Структура.Индекс(ЭлементКД);
		КонецЕсли;
		Если Индекс = -1 Тогда
			Возврат Неопределено;
		КонецЕсли;
		Если Индекс <> Неопределено Тогда
			Результат.Вставить(0, Индекс);
		КонецЕсли;
		Результат.Вставить(0, ИмяКоллекции);
	КонецЦикла;
	Возврат СтрСоединить(Результат, "/");
КонецФункции

// Находит элемент компоновки данных по полному пути.
//
// Параметры:
//   НастройкиКД - НастройкиКомпоновкиДанных - Корневой узел настроек, в который вложен искомый элемент.
//   ПолныйПутьКЭлементу - Строка - полный путь к элементу. Может быть получена в функции ПолныйПутьКЭлементу().
//
// Возвращаемое значение:
//   ЭлементКД - Произвольный - Найденный узел настроек.
//
Функция НайтиЭлементПоПолномуПути(Знач НастройкиКД, Знач ПолныйПутьКЭлементу) Экспорт
	МассивИндексов = СтрРазделить(ПолныйПутьКЭлементу, "/", Ложь);
	ЭлементКД = НастройкиКД;
	Для Каждого Индекс Из МассивИндексов Цикл
		Если Индекс = "Строки" Тогда
			ЭлементКД = ЭлементКД.Строки;
		ИначеЕсли Индекс = "Колонки" Тогда
			ЭлементКД = ЭлементКД.Колонки;
		ИначеЕсли Индекс = "Серии" Тогда
			ЭлементКД = ЭлементКД.Серии;
		ИначеЕсли Индекс = "Точки" Тогда
			ЭлементКД = ЭлементКД.Точки;
		ИначеЕсли Индекс = "Структура" Тогда
			ЭлементКД = ЭлементКД.Структура;
		ИначеЕсли Индекс = "Настройки" Тогда
			ЭлементКД = ЭлементКД.Настройки;
		Иначе
			ЭлементКД = ЭлементКД[Число(Индекс)];
		КонецЕсли;
	КонецЦикла;
	Возврат ЭлементКД;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Для работы с механизмом периодичности.

// Возвращает дату начала периода.
Функция НачалоПериодаОтчета(ВидПериода, ДатаПериода) Экспорт
	НачалоПериода = ДатаПериода;
	
	Если ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.ПроизвольныйПериод") Тогда
		// Действие не требуется
	ИначеЕсли ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Год") Тогда
		НачалоПериода = НачалоГода(ДатаПериода);
	ИначеЕсли ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Полугодие") Тогда
		Если Месяц(ДатаПериода) >= 7 Тогда
			НачалоПериода = Дата(Год(ДатаПериода), 7, 1);
		Иначе
			НачалоПериода = Дата(Год(ДатаПериода), 1, 1);
		КонецЕсли;
	ИначеЕсли ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Квартал") Тогда
		НачалоПериода = НачалоКвартала(ДатаПериода);
	ИначеЕсли ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Месяц") Тогда
		НачалоПериода = НачалоМесяца(ДатаПериода);
	ИначеЕсли ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Декада") Тогда
		Если День(ДатаПериода) <= 10 Тогда
			НачалоПериода = Дата(Год(ДатаПериода), Месяц(ДатаПериода), 1);
		ИначеЕсли День(ДатаПериода) <= 20 Тогда
			НачалоПериода = Дата(Год(ДатаПериода), Месяц(ДатаПериода), 11);
		Иначе
			НачалоПериода = Дата(Год(ДатаПериода), Месяц(ДатаПериода), 21);
		КонецЕсли;
	ИначеЕсли ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Неделя") Тогда
		НачалоПериода = НачалоНедели(ДатаПериода);
	ИначеЕсли ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.День") Тогда
		НачалоПериода = НачалоДня(ДатаПериода);
	КонецЕсли;
	
	Возврат НачалоПериода;
	
КонецФункции

// Возвращает дату окончания периода.
Функция КонецПериодаОтчета(ВидПериода, ДатаПериода) Экспорт
	КонецПериода = ДатаПериода;
	
	Если ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.ПроизвольныйПериод") Тогда
		// Действие не требуется
	ИначеЕсли ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Год") Тогда
		КонецПериода = КонецГода(ДатаПериода);
	ИначеЕсли ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Полугодие") Тогда
		Если Месяц(ДатаПериода) >= 7 Тогда
			КонецПериода = КонецГода(ДатаПериода);
		Иначе
			КонецПериода = КонецДня(Дата(Год(ДатаПериода), 6, 30));
		КонецЕсли;
	ИначеЕсли ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Квартал") Тогда
		КонецПериода = КонецКвартала(ДатаПериода);
	ИначеЕсли ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Месяц") Тогда
		КонецПериода = КонецМесяца(ДатаПериода);
	ИначеЕсли ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Декада") Тогда
		Если День(ДатаПериода) <= 10 Тогда
			КонецПериода = КонецДня(Дата(Год(ДатаПериода), Месяц(ДатаПериода), 10));
		ИначеЕсли День(ДатаПериода) <= 20 Тогда
			КонецПериода = КонецДня(Дата(Год(ДатаПериода), Месяц(ДатаПериода), 20));
		Иначе
			КонецПериода = КонецМесяца(ДатаПериода);
		КонецЕсли;
	ИначеЕсли ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Неделя") Тогда
		КонецПериода = КонецНедели(ДатаПериода);
	ИначеЕсли ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.День") Тогда
		КонецПериода = КонецДня(ДатаПериода);
	КонецЕсли;
	
	Возврат КонецПериода;
	
КонецФункции

// Возвращает список периодов в диапазоне начала периода.
Функция СписокФиксированныхПериодов(Знач НачалоПериода, ВидПериода) Экспорт
	СписокПериодов = Новый СписокЗначений;
	
	Если НачалоПериода = '00010101' Тогда
		Возврат СписокПериодов;
	КонецЕсли;
	
	НачалоПериода = НачалоДня(НачалоПериода);
	ВыборОтносительногоПериода = (НачалоПериода = "ВыборОтносительногоПериода");
	ПоказыватьВсеОтносительныеПериоды = Ложь;
	
	#Если Клиент Тогда
		Сегодня = ОбщегоНазначенияКлиент.ДатаСеанса();
	#Иначе
		Сегодня = ТекущаяДатаСеанса();
	#КонецЕсли
	Сегодня = НачалоДня(Сегодня);
	
	НавигационныйПунктРанееПредставление = НСтр("ru = 'Ранее...'");
	НавигационныйПунктПозжеПредставление = НСтр("ru = 'Позже...'");
	
	Если ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.День") Тогда
		ТекущийДеньНедели   = ДеньНедели(Сегодня);
		ВыбранныйДеньНедели = ДеньНедели(НачалоПериода);
		
		// Вычисление начального и конечного периода по формуле. В 1 дне 86400 секунд.
		НачальныйДеньНедели = ТекущийДеньНедели - 5;
		КонечныйДеньНедели  = ТекущийДеньНедели + 1;
		Если ВыбранныйДеньНедели > КонечныйДеньНедели Тогда
			ВыбранныйДеньНедели = ВыбранныйДеньНедели - 7;
		КонецЕсли;
		
		Период = НачалоПериода - 86400 * (ВыбранныйДеньНедели - НачальныйДеньНедели);
		
		// Добавление навигационного пункта "<Ранее>..." для перехода к более ранним периодам.
		СписокПериодов.Добавить(Период - 86400 * 7, НавигационныйПунктРанееПредставление);
		
		// Добавление значений.
		Для Счетчик = 1 По 7 Цикл
			СписокПериодов.Добавить(Период, Формат(Период, "ДФ='dd MMMM yyyy, dddd'") + ?(Период = Сегодня, " - " + НСтр("ru = 'сегодня'"), ""));
			Период = Период + 86400;
		КонецЦикла;
		
		// Добавление навигационного пункта "<Позже>..." для перехода к более поздним периодам.
		СписокПериодов.Добавить(Период + 86400 * 6, НавигационныйПунктПозжеПредставление);
		
	ИначеЕсли ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Неделя") Тогда
		ТекущееНачалоНедели   = НачалоНедели(Сегодня);
		ВыбранноеНачалоНедели = НачалоНедели(НачалоПериода);
		
		// Вычисление начального и конечного периода по формуле. В 7 днях 604800 секунд.
		РазностьНедель = (ВыбранноеНачалоНедели - ТекущееНачалоНедели) / 604800;
		Коэффициент = (РазностьНедель - 2)/7;
		Коэффициент = Цел(Коэффициент - ?(Коэффициент < 0, 0.9, 0)); // Отрицательные числа округляются в большую часть.
		НачальнаяНеделя = ТекущееНачалоНедели + (2 + Коэффициент*7) * 604800;
		
		// Добавление навигационного пункта "<Ранее>..." для перехода к более ранним периодам.
		СписокПериодов.Добавить(НачальнаяНеделя - 7 * 604800, НавигационныйПунктРанееПредставление);
		
		// Добавление значений.
		Для Счетчик = 0 По 6 Цикл
			Период = НачальнаяНеделя + Счетчик * 604800;
			КонецПериода  = КонецНедели(Период);
			ПредставлениеПериода = Формат(Период, "ДФ=dd.MM") + " - " + Формат(КонецПериода, "ДЛФ=D") + " (" + НеделяГода(КонецПериода) + " " + НСтр("ru = 'неделя года'") + ")";
			Если Период = ТекущееНачалоНедели Тогда
				ПредставлениеПериода = ПредставлениеПериода + " - " + НСтр("ru = 'эта неделя'");
			КонецЕсли;
			СписокПериодов.Добавить(Период, ПредставлениеПериода);
		КонецЦикла;
		
		// Добавление навигационного пункта "<Позже>..." для перехода к более поздним периодам.
		СписокПериодов.Добавить(НачальнаяНеделя + 13 * 604800, НавигационныйПунктПозжеПредставление);
		
	ИначеЕсли ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Декада") Тогда
		ТекущийГод   = Год(Сегодня);
		ВыбранныйГод = Год(НачалоПериода);
		ТекущийМесяц   = Месяц(Сегодня);
		ВыбранныйМесяц = Месяц(НачалоПериода);
		ТекущийДень   = День(Сегодня);
		ВыбранныйДень = День(НачалоПериода);
		ТекущаяДекада   = ?(ТекущийДень   <= 10, 1, ?(ТекущийДень   <= 20, 2, 3));
		ВыбраннаяДекада = ?(ВыбранныйДень <= 10, 1, ?(ВыбранныйДень <= 20, 2, 3));
		ТекущаяДекадаАбсолютно   = ТекущийГод*36 + (ТекущийМесяц-1)*3 + (ТекущаяДекада-1);
		ВыбраннаяДекадаАбсолютно = ВыбранныйГод*36 + (ВыбранныйМесяц-1)*3 + (ВыбраннаяДекада-1);
		СтрокаДекада = НСтр("ru = 'декада'");
		
		// Вычисление начального и конечного периода по формуле.
		Коэффициент = (ВыбраннаяДекадаАбсолютно - ТекущаяДекадаАбсолютно - 2)/7;
		Коэффициент = Цел(Коэффициент - ?(Коэффициент < 0, 0.9, 0)); // Отрицательные числа округляются в большую часть.
		НачальнаяДекада = ТекущаяДекадаАбсолютно + 2 + Коэффициент*7;
		КонечнаяДекада  = НачальнаяДекада + 6;
		
		// Добавление навигационного пункта "<Ранее>..." для перехода к более ранним периодам.
		Декада = НачальнаяДекада - 7;
		Год = Цел(Декада/36);
		ДекадаВГоду = Декада - Год*36;
		МесяцВГоду = Цел(ДекадаВГоду/3) + 1;
		ДекадаВМесяце = ДекадаВГоду - (МесяцВГоду-1)*3 + 1;
		Период = Дата(Год, МесяцВГоду, (ДекадаВМесяце - 1) * 10 + 1);
		СписокПериодов.Добавить(Период, НавигационныйПунктРанееПредставление);
		
		// Добавление значений.
		Для Декада = НачальнаяДекада По КонечнаяДекада Цикл
			Год = Цел(Декада/36);
			ДекадаВГоду = Декада - Год*36;
			МесяцВГоду = Цел(ДекадаВГоду/3) + 1;
			ДекадаВМесяце = ДекадаВГоду - (МесяцВГоду-1)*3 + 1;
			Период = Дата(Год, МесяцВГоду, (ДекадаВМесяце - 1) * 10 + 1);
			Представление = Формат(Период, "ДФ='MMMM yyyy'") + ", " + Лев("III", ДекадаВМесяце) + " " + СтрокаДекада + ?(Декада = ТекущаяДекадаАбсолютно, " - " + НСтр("ru = 'эта декада'"), "");
			СписокПериодов.Добавить(Период, Представление);
		КонецЦикла;
		
		// Добавление навигационного пункта "<Позже>..." для перехода к более поздним периодам.
		Декада = КонечнаяДекада + 1;
		Год = Цел(Декада/36);
		ДекадаВГоду = Декада - Год*36;
		МесяцВГоду = Цел(ДекадаВГоду/3) + 1;
		ДекадаВМесяце = ДекадаВГоду - (МесяцВГоду-1)*3 + 1;
		Период = Дата(Год, МесяцВГоду, (ДекадаВМесяце - 1) * 10 + 1);
		СписокПериодов.Добавить(Период, НавигационныйПунктПозжеПредставление);
		
	ИначеЕсли ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Месяц") Тогда
		ТекущийГод   = Год(Сегодня);
		ВыбранныйГод = Год(НачалоПериода);
		ТекущийМесяц   = ТекущийГод*12   + Месяц(Сегодня);
		ВыбранныйМесяц = ВыбранныйГод*12 + Месяц(НачалоПериода);
		
		// Вычисление начального и конечного периода по формуле.
		Коэффициент = (ВыбранныйМесяц - ТекущийМесяц - 2)/7;
		Коэффициент = Цел(Коэффициент - ?(Коэффициент < 0, 0.9, 0)); // Отрицательные числа округляются в большую часть.
		НачальныйМесяц = ТекущийМесяц + 2 + Коэффициент*7;
		КонечныйМесяц  = НачальныйМесяц + 6;
		
		// Добавление навигационного пункта "<Ранее>..." для перехода к более ранним периодам.
		Месяц = НачальныйМесяц - 7;
		Год = Цел((Месяц - 1) / 12);
		МесяцВГоду = Месяц - Год * 12;
		Период = Дата(Год, МесяцВГоду, 1);
		СписокПериодов.Добавить(Период, НавигационныйПунктРанееПредставление);
		
		// Добавление значений.
		Для Месяц = НачальныйМесяц По КонечныйМесяц Цикл
			Год = Цел((Месяц - 1) / 12);
			МесяцВГоду = Месяц - Год * 12;
			Период = Дата(Год, МесяцВГоду, 1);
			СписокПериодов.Добавить(Период, Формат(Период, "ДФ='MMMM yyyy'") + ?(Год = ТекущийГод И ТекущийМесяц = Месяц, " - " + НСтр("ru = 'этот месяц'"), ""));
		КонецЦикла;
		
		// Добавление навигационного пункта "<Позже>..." для перехода к более поздним периодам.
		Месяц = КонечныйМесяц + 1;
		Год = Цел((Месяц - 1) / 12);
		МесяцВГоду = Месяц - Год * 12;
		Период = Дата(Год, МесяцВГоду, 1);
		СписокПериодов.Добавить(Период, НавигационныйПунктПозжеПредставление);
		
	ИначеЕсли ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Квартал") Тогда
		ТекущийГод = Год(Сегодня);
		ВыбранныйГод = Год(НачалоПериода);
		ТекущийКвартал   = 1 + Цел((Месяц(Сегодня)-1)/3);
		ВыбранныйКвартал = 1 + Цел((Месяц(НачалоПериода)-1)/3);
		ТекущийКварталАбсолютно   = ТекущийГод*4   + ТекущийКвартал   - 1;
		ВыбранныйКварталАбсолютно = ВыбранныйГод*4 + ВыбранныйКвартал - 1;
		СтрокаКвартал = НСтр("ru = 'квартал'");
		
		// Вычисление начального и конечного периода по формуле.
		Коэффициент = (ВыбранныйКварталАбсолютно - ТекущийКварталАбсолютно - 2)/7;
		Коэффициент = Цел(Коэффициент - ?(Коэффициент < 0, 0.9, 0)); // Отрицательные числа округляются в большую часть.
		НачальныйКвартал = ТекущийКварталАбсолютно + 2 + Коэффициент*7;
		КонечныйКвартал  = НачальныйКвартал + 6;
		
		// Добавление навигационного пункта "<Ранее>..." для перехода к более ранним периодам.
		Квартал = НачальныйКвартал - 7;
		Год = Цел(Квартал/4);
		КварталВГоду = Квартал - Год*4 + 1;
		МесяцВГоду = (КварталВГоду-1)*3 + 1;
		Период = Дата(Год, МесяцВГоду, 1);
		СписокПериодов.Добавить(Период, НавигационныйПунктРанееПредставление);
		
		// Добавление значений.
		Для Квартал = НачальныйКвартал По КонечныйКвартал Цикл
			Год = Цел(Квартал/4);
			КварталВГоду = Квартал - Год*4 + 1;
			МесяцВГоду = (КварталВГоду-1)*3 + 1;
			Период = Дата(Год, МесяцВГоду, 1);
			Представление = ?(КварталВГоду = 4, "IV", Лев("III", КварталВГоду)) + " " + СтрокаКвартал + " " + Формат(Период, "ДФ='yyyy'") + ?(Квартал = ТекущийКварталАбсолютно, " - " + НСтр("ru = 'этот квартал'"), "");
			СписокПериодов.Добавить(Период, Представление);
		КонецЦикла;
		
		// Добавление навигационного пункта "<Позже>..." для перехода к более поздним периодам.
		Квартал = КонечныйКвартал + 1;
		Год = Цел(Квартал/4);
		КварталВГоду = Квартал - Год*4 + 1;
		МесяцВГоду = (КварталВГоду-1)*3 + 1;
		Период = Дата(Год, МесяцВГоду, 1);
		СписокПериодов.Добавить(Период, НавигационныйПунктПозжеПредставление);
		
	ИначеЕсли ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Полугодие") Тогда
		ТекущийГод = Год(Сегодня);
		ВыбранныйГод = Год(НачалоПериода);
		ТекущееПолугодие   = 1 + Цел((Месяц(Сегодня)-1)/6);
		ВыбранноеПолугодие = 1 + Цел((Месяц(НачалоПериода)-1)/6);
		ТекущееПолугодиеАбсолютно   = ТекущийГод*2   + ТекущееПолугодие   - 1;
		ВыбранноеПолугодиеАбсолютно = ВыбранныйГод*2 + ВыбранноеПолугодие - 1;
		СтрокаПолугодие = НСтр("ru = 'полугодие'");
		
		// Вычисление начального и конечного периода по формуле.
		Коэффициент = (ВыбранноеПолугодиеАбсолютно - ТекущееПолугодиеАбсолютно - 2)/7;
		Коэффициент = Цел(Коэффициент - ?(Коэффициент < 0, 0.9, 0)); // Отрицательные числа округляются в большую часть.
		НачальноеПолугодие = ТекущееПолугодиеАбсолютно + 2 + Коэффициент*7;
		КонечноеПолугодие  = НачальноеПолугодие + 6;
		
		// Добавление навигационного пункта "<Ранее>..." для перехода к более ранним периодам.
		Полугодие = НачальноеПолугодие - 7;
		Год = Цел(Полугодие/2);
		ПолугодиеВГоду = Полугодие - Год*2 + 1;
		МесяцВГоду = (ПолугодиеВГоду-1)*6 + 1;
		Период = Дата(Год, МесяцВГоду, 1);
		СписокПериодов.Добавить(Период, НавигационныйПунктРанееПредставление);
		
		// Добавление значений.
		Для Полугодие = НачальноеПолугодие По КонечноеПолугодие Цикл
			Год = Цел(Полугодие/2);
			ПолугодиеВГоду = Полугодие - Год*2 + 1;
			МесяцВГоду = (ПолугодиеВГоду-1)*6 + 1;
			Период = Дата(Год, МесяцВГоду, 1);
			Представление = Лев("II", ПолугодиеВГоду) + " " + СтрокаПолугодие + " " + Формат(Период, "ДФ='yyyy'") + ?(Полугодие = ТекущееПолугодиеАбсолютно, " - " + НСтр("ru = 'это полугодие'"), "");
			СписокПериодов.Добавить(Период, Представление);
		КонецЦикла;
		
		// Добавление навигационного пункта "<Позже>..." для перехода к более поздним периодам.
		Полугодие = КонечноеПолугодие + 1;
		Год = Цел(Полугодие/2);
		ПолугодиеВГоду = Полугодие - Год*2 + 1;
		МесяцВГоду = (ПолугодиеВГоду-1)*6 + 1;
		Период = Дата(Год, МесяцВГоду, 1);
		СписокПериодов.Добавить(Период, НавигационныйПунктПозжеПредставление);
		
	ИначеЕсли ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Год") Тогда
		ТекущийГод = Год(Сегодня);
		ВыбранныйГод = Год(НачалоПериода);
		
		// Вычисление начального и конечного периода по формуле.
		Коэффициент = (ВыбранныйГод - ТекущийГод - 2)/7;
		Коэффициент = Цел(Коэффициент - ?(Коэффициент < 0, 0.9, 0)); // Отрицательные числа округляются в большую часть.
		НачальныйГод = ТекущийГод + 2 + Коэффициент*7;
		КонечныйГод = НачальныйГод + 6;
		
		// Добавление навигационного пункта "<Ранее>..." для перехода к более ранним периодам.
		СписокПериодов.Добавить(Дата(НачальныйГод-7, 1, 1), НавигационныйПунктРанееПредставление);
		
		// Добавление значений.
		Для Год = НачальныйГод По КонечныйГод Цикл
			СписокПериодов.Добавить(Дата(Год, 1, 1), Формат(Год, "ЧГ=") + ?(Год = ТекущийГод, " - " + НСтр("ru = 'этот год'"), ""));
		КонецЦикла;
		
		// Добавление навигационного пункта "<Позже>..." для перехода к более поздним периодам.
		СписокПериодов.Добавить(Дата(КонечныйГод+7, 1, 1), НавигационныйПунктПозжеПредставление);
		
	КонецЕсли;
	
	Возврат СписокПериодов;
КонецФункции

// Возвращает список периодов в диапазоне начала периода.
Функция СписокВычисляемыхПериодов(ВидПериода) Экспорт
	СписокПериодов = Новый СписокЗначений;
	
	Если ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.День") Тогда
		СписокПериодов.Добавить(ВариантСтандартногоПериода.Вчера);
		СписокПериодов.Добавить(ВариантСтандартногоПериода.Сегодня);
		СписокПериодов.Добавить(ВариантСтандартногоПериода.Завтра);
	ИначеЕсли ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Неделя") Тогда
		СписокПериодов.Добавить(ВариантСтандартногоПериода.ПрошлаяНеделя);
		СписокПериодов.Добавить(ВариантСтандартногоПериода.ПрошлаяНеделяДоТакогоЖеДняНедели);
		СписокПериодов.Добавить(ВариантСтандартногоПериода.Последние7Дней);
		СписокПериодов.Добавить(ВариантСтандартногоПериода.ЭтаНеделя);
		СписокПериодов.Добавить(ВариантСтандартногоПериода.СНачалаЭтойНедели);
		СписокПериодов.Добавить(ВариантСтандартногоПериода.ДоКонцаЭтойНедели);
		СписокПериодов.Добавить(ВариантСтандартногоПериода.СледующаяНеделя);
		СписокПериодов.Добавить(ВариантСтандартногоПериода.СледующаяНеделяДоТакогоЖеДняНедели);
		СписокПериодов.Добавить(ВариантСтандартногоПериода.Следующие7Дней);
	ИначеЕсли ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Декада") Тогда
		СписокПериодов.Добавить(ВариантСтандартногоПериода.ПрошлаяДекада);
		СписокПериодов.Добавить(ВариантСтандартногоПериода.ПрошлаяДекадаДоТакогоЖеНомераДня);
		СписокПериодов.Добавить(ВариантСтандартногоПериода.ЭтаДекада);
		СписокПериодов.Добавить(ВариантСтандартногоПериода.СНачалаЭтойДекады);
		СписокПериодов.Добавить(ВариантСтандартногоПериода.ДоКонцаЭтойДекады);
		СписокПериодов.Добавить(ВариантСтандартногоПериода.СледующаяДекада);
		СписокПериодов.Добавить(ВариантСтандартногоПериода.СледующаяДекадаДоТакогоЖеНомераДня);
	ИначеЕсли ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Месяц") Тогда
		СписокПериодов.Добавить(ВариантСтандартногоПериода.ПрошлыйМесяц);
		СписокПериодов.Добавить(ВариантСтандартногоПериода.ПрошлыйМесяцДоТакойЖеДаты);
		СписокПериодов.Добавить(ВариантСтандартногоПериода.Месяц, НСтр("ru = 'С такой же даты прошлого месяца'"));
		СписокПериодов.Добавить(ВариантСтандартногоПериода.ЭтотМесяц);
		СписокПериодов.Добавить(ВариантСтандартногоПериода.СНачалаЭтогоМесяца);
		СписокПериодов.Добавить(ВариантСтандартногоПериода.ДоКонцаЭтогоМесяца);
		СписокПериодов.Добавить(ВариантСтандартногоПериода.СледующийМесяц);
		СписокПериодов.Добавить(ВариантСтандартногоПериода.СледующийМесяцДоТакойЖеДаты);
	ИначеЕсли ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Квартал") Тогда
		СписокПериодов.Добавить(ВариантСтандартногоПериода.ПрошлыйКвартал);
		СписокПериодов.Добавить(ВариантСтандартногоПериода.ПрошлыйКварталДоТакойЖеДаты);
		СписокПериодов.Добавить(ВариантСтандартногоПериода.ЭтотКвартал);
		СписокПериодов.Добавить(ВариантСтандартногоПериода.СНачалаЭтогоКвартала);
		СписокПериодов.Добавить(ВариантСтандартногоПериода.ДоКонцаЭтогоКвартала);
		СписокПериодов.Добавить(ВариантСтандартногоПериода.СледующийКвартал);
		СписокПериодов.Добавить(ВариантСтандартногоПериода.СледующийКварталДоТакойЖеДаты);
	ИначеЕсли ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Полугодие") Тогда
		СписокПериодов.Добавить(ВариантСтандартногоПериода.ПрошлоеПолугодие);
		СписокПериодов.Добавить(ВариантСтандартногоПериода.ЭтоПолугодие);
		СписокПериодов.Добавить(ВариантСтандартногоПериода.СледующееПолугодие);
		СписокПериодов.Добавить(ВариантСтандартногоПериода.СНачалаЭтогоПолугодия);
		СписокПериодов.Добавить(ВариантСтандартногоПериода.ДоКонцаЭтогоПолугодия);
		СписокПериодов.Добавить(ВариантСтандартногоПериода.ПрошлоеПолугодиеДоТакойЖеДаты);
		СписокПериодов.Добавить(ВариантСтандартногоПериода.СледующееПолугодиеДоТакойЖеДаты);
	ИначеЕсли ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Год") Тогда
		СписокПериодов.Добавить(ВариантСтандартногоПериода.ПрошлыйГод);
		СписокПериодов.Добавить(ВариантСтандартногоПериода.ПрошлыйГодДоТакойЖеДаты);
		СписокПериодов.Добавить(ВариантСтандартногоПериода.ЭтотГод);
		СписокПериодов.Добавить(ВариантСтандартногоПериода.СНачалаЭтогоГода);
		СписокПериодов.Добавить(ВариантСтандартногоПериода.ДоКонцаЭтогоГода);
		СписокПериодов.Добавить(ВариантСтандартногоПериода.СледующийГод);
		СписокПериодов.Добавить(ВариантСтандартногоПериода.СледующийГодДоТакойЖеДаты);
	КонецЕсли;
	
	Возврат СписокПериодов;
КонецФункции

// Возвращает представление периода, используя его вид и указанное значение.
Функция ПредставлениеСтандартногоПериода(СтандартныйПериод, ВидПериода) Экспорт
	
	Если СтандартныйПериод.Вариант = ВариантСтандартногоПериода.Месяц Тогда
		Возврат НСтр("ru = 'С такой же даты прошлого месяца'");
	ИначеЕсли СтандартныйПериод.Вариант <> ВариантСтандартногоПериода.ПроизвольныйПериод Тогда
		Возврат Строка(СтандартныйПериод.Вариант);
	КонецЕсли;
	
	Если ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.ПроизвольныйПериод") Тогда
		Возврат Формат(СтандартныйПериод.ДатаНачала, "ДФ='dd MMMM yyyy'") + " - " + Формат(СтандартныйПериод.ДатаОкончания, "ДФ='dd MMMM yyyy'");
	КонецЕсли;
	
	СписокПериодов = СписокФиксированныхПериодов(СтандартныйПериод.ДатаНачала, ВидПериода);
	ЭлементСписка = СписокПериодов.НайтиПоЗначению(СтандартныйПериод.ДатаНачала);
	Если ЭлементСписка <> Неопределено Тогда
		Возврат ЭлементСписка.Представление;
	КонецЕсли;
	
	Возврат "";
КонецФункции

// Возвращает вид периода.
Функция ПолучитьВидПериода(НачалоПериода, КонецПериода, ДоступныеПериоды = Неопределено) Экспорт
	
	ВидПериода = Неопределено;
	Если НачалоПериода = НачалоДня(НачалоПериода)
		И КонецПериода = КонецДня(КонецПериода) Тогда
		
		РазностьДней = (КонецПериода - НачалоПериода + 1) / (60*60*24);
		Если РазностьДней = 1 Тогда
			
			ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.День");
			
		ИначеЕсли РазностьДней = 7 Тогда
			
			Если НачалоПериода = НачалоНедели(НачалоПериода) Тогда
				ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Неделя");
			КонецЕсли;
			
		ИначеЕсли РазностьДней <= 11 Тогда
			
			Если (День(НачалоПериода) = 1 И День(КонецПериода) = 10)
				ИЛИ (День(НачалоПериода) = 11 И День(КонецПериода) = 20)
				ИЛИ (День(НачалоПериода) = 21 И КонецПериода = КонецМесяца(НачалоПериода)) Тогда
				ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Декада");
			КонецЕсли;
			
		ИначеЕсли РазностьДней <= 31 Тогда
			
			Если НачалоПериода = НачалоМесяца(НачалоПериода) И КонецПериода = КонецМесяца(НачалоПериода) Тогда
				ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Месяц");
			КонецЕсли;
			
		ИначеЕсли РазностьДней <= 92 Тогда
			
			Если НачалоПериода = НачалоКвартала(НачалоПериода) И КонецПериода = КонецКвартала(НачалоПериода) Тогда
				ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Квартал");
			КонецЕсли;
			
		ИначеЕсли РазностьДней <= 190 Тогда
			
			Если Месяц(НачалоПериода) + 5 = Месяц(КонецПериода)
				И НачалоПериода = НачалоМесяца(НачалоПериода)
				И КонецПериода = КонецМесяца(КонецПериода)
				И (НачалоПериода = НачалоГода(НачалоПериода) ИЛИ КонецПериода = КонецГода(НачалоПериода)) Тогда
				ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Полугодие");
			КонецЕсли;
			
		ИначеЕсли РазностьДней <= 366 Тогда
			
			Если НачалоПериода = НачалоГода(НачалоПериода) И КонецПериода = КонецГода(НачалоПериода) Тогда
				ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Год");
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Если ВидПериода = Неопределено Тогда
		ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.ПроизвольныйПериод");
	КонецЕсли;
	
	Если ДоступныеПериоды <> Неопределено И ДоступныеПериоды.НайтиПоЗначению(ВидПериода) = Неопределено Тогда
		ВидПериода = ДоступныеПериоды[0].Значение;
	КонецЕсли;
	
	Возврат ВидПериода;
	
КонецФункции

// Возвращает вид периода. В отличии от функции ПолучитьВидПериода на вход принимает СтандартныйПериод.
Функция ПолучитьВидСтандартногоПериода(СтандартныйПериод, ДоступныеПериоды = Неопределено) Экспорт
	
	Если СтандартныйПериод.Вариант = ВариантСтандартногоПериода.ПроизвольныйПериод Тогда
		
		Возврат ПолучитьВидПериода(СтандартныйПериод.ДатаНачала, СтандартныйПериод.ДатаОкончания, ДоступныеПериоды);
		
	ИначеЕсли СтандартныйПериод.Вариант = ВариантСтандартногоПериода.ЭтотГод
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.ПрошлыйГод
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.СледующийГод
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.СНачалаЭтогоГода
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.ДоКонцаЭтогоГода
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.ПрошлыйГодДоТакойЖеДаты
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.СледующийГодДоТакойЖеДаты Тогда
		
		Возврат ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Год");
		
	ИначеЕсли СтандартныйПериод.Вариант = ВариантСтандартногоПериода.ЭтоПолугодие
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.ПрошлоеПолугодие
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.СледующееПолугодие
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.СНачалаЭтогоПолугодия
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.ДоКонцаЭтогоПолугодия
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.ПрошлоеПолугодиеДоТакойЖеДаты
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.СледующееПолугодиеДоТакойЖеДаты Тогда
		
		Возврат ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Полугодие");
		
	ИначеЕсли СтандартныйПериод.Вариант = ВариантСтандартногоПериода.ЭтотКвартал
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.ПрошлыйКвартал
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.СледующийКвартал
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.СНачалаЭтогоКвартала
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.ДоКонцаЭтогоКвартала
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.ПрошлыйКварталДоТакойЖеДаты
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.СледующийКварталДоТакойЖеДаты Тогда
		
		Возврат ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Квартал");
		
	ИначеЕсли СтандартныйПериод.Вариант = ВариантСтандартногоПериода.ЭтотМесяц
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.ПрошлыйМесяц
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.СледующийМесяц
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.Месяц
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.СНачалаЭтогоМесяца
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.ДоКонцаЭтогоМесяца
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.ПрошлыйМесяцДоТакойЖеДаты
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.СледующийМесяцДоТакойЖеДаты Тогда
		
		Возврат ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Месяц");
		
	ИначеЕсли СтандартныйПериод.Вариант = ВариантСтандартногоПериода.ЭтаДекада
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.ПрошлаяДекада
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.СледующаяДекада
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.СНачалаЭтойДекады
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.ДоКонцаЭтойДекады
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.ПрошлаяДекадаДоТакогоЖеНомераДня
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.СледующаяДекадаДоТакогоЖеНомераДня Тогда
		
		Возврат ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Декада");
		
	ИначеЕсли СтандартныйПериод.Вариант = ВариантСтандартногоПериода.ЭтаНеделя
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.ПрошлаяНеделя
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.СледующаяНеделя
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.СНачалаЭтойНедели
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.ДоКонцаЭтойНедели
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.Последние7Дней
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.Следующие7Дней
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.ПрошлаяНеделяДоТакогоЖеДняНедели
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.СледующаяНеделяДоТакогоЖеДняНедели Тогда
		
		Возврат ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Неделя");
		
	ИначеЕсли СтандартныйПериод.Вариант = ВариантСтандартногоПериода.Сегодня
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.Вчера
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.Завтра Тогда
		
		Возврат ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.День");
		
	КонецЕсли;
	
КонецФункции

// Возвращает доступные периоды в порядке возрастания периодичности.
Функция ПолучитьСписокДоступныхПериодов() Экспорт
	
	СписокДоступныхПериодов = Новый Массив;
	СписокДоступныхПериодов.Добавить(ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.День"));
	СписокДоступныхПериодов.Добавить(ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Неделя"));
	СписокДоступныхПериодов.Добавить(ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Декада"));
	СписокДоступныхПериодов.Добавить(ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Месяц"));
	СписокДоступныхПериодов.Добавить(ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Квартал"));
	СписокДоступныхПериодов.Добавить(ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Полугодие"));
	СписокДоступныхПериодов.Добавить(ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Год"));
	СписокДоступныхПериодов.Добавить(ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.ПроизвольныйПериод"));
	
	Возврат СписокДоступныхПериодов;
	
КонецФункции

// Приводит значение перечисления ДоступныеПериодыОтчета к варианту стандартного периода.
Функция ПривестиВидПериодаКСтандартному(ВидПериода) Экспорт
	Если ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.День") Тогда
		Возврат ВариантСтандартногоПериода.Сегодня;
	ИначеЕсли ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Неделя") Тогда
		Возврат ВариантСтандартногоПериода.ЭтаНеделя;
	ИначеЕсли ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Декада") Тогда
		Возврат ВариантСтандартногоПериода.ЭтаДекада;
	ИначеЕсли ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Месяц") Тогда
		Возврат ВариантСтандартногоПериода.ЭтотМесяц;
	ИначеЕсли ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Квартал") Тогда
		Возврат ВариантСтандартногоПериода.ЭтотКвартал;
	ИначеЕсли ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Полугодие") Тогда
		Возврат ВариантСтандартногоПериода.ЭтоПолугодие;
	ИначеЕсли ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Год") Тогда
		Возврат ВариантСтандартногоПериода.ЭтотГод;
	КонецЕсли;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Унификация формы отчета и формы настроек отчета.

Функция ПредставлениеЭлементаУсловногоОформления(ЭлементКД) Экспорт
	ПредставлениеОформления = ПредставлениеОформления(ЭлементКД.Оформление);
	Если ПредставлениеОформления = "" Тогда
		ПредставлениеОформления = НСтр("ru = 'Не оформлять'");
	КонецЕсли;
	
	ПредставлениеПолей = Строка(ЭлементКД.Поля);
	Если ПредставлениеПолей = "" Тогда
		ПредставлениеПолей = НСтр("ru = 'Все поля'");
	Иначе
		ПредставлениеПолей = НСтр("ru = 'Поля:'") + " " + ПредставлениеПолей;
	КонецЕсли;
	
	ПредставлениеОтбора = ПредставлениеОтбора(ЭлементКД.Отбор);
	Если ПредставлениеОтбора = "" Тогда
		Разделитель = "";
	Иначе
		Разделитель = "; ";
		ПредставлениеОтбора = НСтр("ru = 'Условие:'") + " " + ПредставлениеОтбора;
	КонецЕсли;
	
	Возврат ПредставлениеОформления + " (" + ПредставлениеПолей + Разделитель + ПредставлениеОтбора + ")";
КонецФункции

Функция ПредставлениеОформления(ОформлениеКД)
	Представление = "";
	Для Каждого ЭлементКД Из ОформлениеКД.Элементы Цикл
		Если ЭлементКД.Использование Тогда
			ДоступныйПараметрКД = ОформлениеКД.ДоступныеПараметры.НайтиПараметр(ЭлементКД.Параметр);
			Если ДоступныйПараметрКД <> Неопределено И ЗначениеЗаполнено(ДоступныйПараметрКД.Заголовок) Тогда
				ПредставлениеКлюча = ДоступныйПараметрКД.Заголовок;
			Иначе
				ПредставлениеКлюча = Строка(ЭлементКД.Параметр);
			КонецЕсли;
			
			Если ТипЗнч(ЭлементКД.Значение) = Тип("Цвет") Тогда
				ПредставлениеЗначения = ПредставлениеЦвета(ЭлементКД.Значение);
			Иначе
				ПредставлениеЗначения = Строка(ЭлементКД.Значение);
			КонецЕсли;
			
			Представление = Представление
				+ ?(Представление = "", "", ", ")
				+ ПредставлениеКлюча
				+ ?(ПредставлениеЗначения = "", "", ": " + ПредставлениеЗначения);
		КонецЕсли;
	КонецЦикла;
	Возврат Представление;
КонецФункции

Функция ПредставлениеЦвета(Цвет)
	Если Цвет.Вид = ВидЦвета.ЭлементСтиля Тогда
		Представление = Строка(Цвет);
		Представление = Сред(Представление, СтрНайти(Представление, ":")+1);
		Представление = ИмяВПредставление(Представление);
	ИначеЕсли Цвет.Вид = ВидЦвета.WebЦвет
		Или Цвет.Вид = ВидЦвета.WindowsЦвет Тогда
		Представление = СтрЛевДоСимвола(Строка(Цвет), " (");
	ИначеЕсли Цвет.Вид = ВидЦвета.Абсолютный Тогда
		Представление = Строка(Цвет);
		Если Представление = "0, 0, 0" Тогда
			Представление = НСтр("ru = 'Черный'");
		ИначеЕсли Представление = "255, 255, 255" Тогда
			Представление = НСтр("ru = 'Белый'");
		КонецЕсли;
	ИначеЕсли Цвет.Вид = ВидЦвета.АвтоЦвет Тогда
		Представление = НСтр("ru = 'Авто'");
	Иначе
		Представление = "";
	КонецЕсли;
	Возврат Представление;
КонецФункции

Функция ИмяВПредставление(Знач ИсходнаяСтрока) Экспорт
	Результат = "";
	ЭтоПервыйСимвол = Истина;
	Для НомерСимвола = 1 По СтрДлина(ИсходнаяСтрока) Цикл
		КодСимвола = КодСимвола(ИсходнаяСтрока, НомерСимвола);
		Символ = Символ(КодСимвола);
		Если ЭтоПервыйСимвол Тогда
			Если Не ПустаяСтрока(Символ) Тогда
				Результат = Результат + Символ;
				ЭтоПервыйСимвол = Ложь;
			КонецЕсли;
		Иначе
			Если (КодСимвола >= 65 И КодСимвола <= 90)
				Или (КодСимвола >= 1040 И КодСимвола <= 1071) Тогда
				Символ = " " + НРег(Символ);
			ИначеЕсли Символ = "_" Тогда
				Символ = " ";
			КонецЕсли;
			Результат = Результат + Символ;
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
КонецФункции

Функция ПредставлениеОтбора(УзелКД, НаборСтрокКД = Неопределено)
	Если НаборСтрокКД = Неопределено Тогда
		НаборСтрокКД = УзелКД.Элементы;
	КонецЕсли;
	
	Представление = "";
	
	Для Каждого ЭлементКД Из НаборСтрокКД Цикл
		
		Если ТипЗнч(ЭлементКД) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			
			ПредставлениеГруппы = Строка(ЭлементКД.ТипГруппы);
			ПредставлениеВложенных = ПредставлениеОтбора(УзелКД, ЭлементКД.Элементы);
			Если ПредставлениеВложенных = "" Тогда
				Продолжить;
			КонецЕсли;
			ПредставлениеЭлемента = ПредставлениеГруппы + "(" + ПредставлениеВложенных + ")";
			
		ИначеЕсли ТипЗнч(ЭлементКД) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			
			ДоступноеПолеОтбораКД = УзелКД.ДоступныеПоляОтбора.НайтиПоле(ЭлементКД.ЛевоеЗначение);
			Если ДоступноеПолеОтбораКД = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДоступноеПолеОтбораКД.Заголовок) Тогда
				ПредставлениеПоля = ДоступноеПолеОтбораКД.Заголовок;
			Иначе
				ПредставлениеПоля = Строка(ЭлементКД.ЛевоеЗначение);
			КонецЕсли;
			
			ПредставлениеЗначения = Строка(ЭлементКД.ПравоеЗначение);
			
			Если ЭлементКД.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
				ПредставлениеУсловия = "=";
			ИначеЕсли ЭлементКД.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно Тогда
				ПредставлениеУсловия = "<>";
			ИначеЕсли ЭлементКД.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше Тогда
				ПредставлениеУсловия = ">";
			ИначеЕсли ЭлементКД.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно Тогда
				ПредставлениеУсловия = ">=";
			ИначеЕсли ЭлементКД.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше Тогда
				ПредставлениеУсловия = "<";
			ИначеЕсли ЭлементКД.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно Тогда
				ПредставлениеУсловия = "<=";
			
			ИначеЕсли ЭлементКД.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии Тогда
				ПредставлениеУсловия = НСтр("ru = 'В группе'");
			ИначеЕсли ЭлементКД.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВИерархии Тогда
				ПредставлениеУсловия = НСтр("ru = 'Не в группе'");
			ИначеЕсли ЭлементКД.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Тогда
				ПредставлениеУсловия = НСтр("ru = 'В списке'");
			ИначеЕсли ЭлементКД.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке Тогда
				ПредставлениеУсловия = НСтр("ru = 'Не в списке'");
			ИначеЕсли ЭлементКД.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии Тогда
				ПредставлениеУсловия = НСтр("ru = 'В списке включая подчиненные'");
			ИначеЕсли ЭлементКД.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии Тогда
				ПредставлениеУсловия = НСтр("ru = 'Не в списке включая подчиненные'");
			
			ИначеЕсли ЭлементКД.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит Тогда
				ПредставлениеУсловия = НСтр("ru = 'Содержит'");
			ИначеЕсли ЭлементКД.ВидСравнения = ВидСравненияКомпоновкиДанных.НеСодержит Тогда
				ПредставлениеУсловия = НСтр("ru = 'Не содержит'");
			ИначеЕсли ЭлементКД.ВидСравнения = ВидСравненияКомпоновкиДанных.Подобно Тогда
				ПредставлениеУсловия = НСтр("ru = 'Соответствует шаблону'");
			ИначеЕсли ЭлементКД.ВидСравнения = ВидСравненияКомпоновкиДанных.НеПодобно Тогда
				ПредставлениеУсловия = НСтр("ru = 'Не соответствует шаблону'");
			ИначеЕсли ЭлементКД.ВидСравнения = ВидСравненияКомпоновкиДанных.НачинаетсяС Тогда
				ПредставлениеУсловия = НСтр("ru = 'Начинается с'");
			ИначеЕсли ЭлементКД.ВидСравнения = ВидСравненияКомпоновкиДанных.НеНачинаетсяС Тогда
				ПредставлениеУсловия = НСтр("ru = 'Не начинается с'");
			ИначеЕсли ЭлементКД.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено Тогда
				ПредставлениеУсловия = НСтр("ru = 'Заполнено'");
				ПредставлениеЗначения = "";
			ИначеЕсли ЭлементКД.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено Тогда
				ПредставлениеУсловия = НСтр("ru = 'Не заполнено'");
				ПредставлениеЗначения = "";
			КонецЕсли;
			
			ПредставлениеЭлемента = СокрЛП(ПредставлениеПоля + " " + ПредставлениеУсловия + " " + ПредставлениеЗначения);
			
		Иначе
			Продолжить;
		КонецЕсли;
		
		Представление = Представление + ?(Представление = "", "", ", ") + ПредставлениеЭлемента;
		
	КонецЦикла;
	
	Возврат Представление;
КонецФункции

Функция ПредставленияОбъектаКД(УзелКД, ЭлементКД, СвойстваНастройки = Неопределено) Экспорт
	Результат = Новый Структура("Тип, Подтип, ПользовательскаяНастройкаКД, ДоступнаяНастройкаКД,
		|Представление, ПредставлениеПоУмолчанию, ВыводитьТолькоФлажок");
	Если СвойстваНастройки <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(Результат, СвойстваНастройки);
	КонецЕсли;
	Если Результат.Тип = Неопределено Тогда
		Результат.Тип = ТипНастройкиСтрокой(ТипЗнч(ЭлементКД));
	КонецЕсли;
	Если Результат.ДоступнаяНастройкаКД = Неопределено Тогда
		Если Результат.Тип = "ЗначениеПараметраНастроек" И УзелКД.ДоступныеПараметры <> Неопределено Тогда
			Результат.ДоступнаяНастройкаКД = УзелКД.ДоступныеПараметры.НайтиПараметр(ЭлементКД.Параметр);
		ИначеЕсли Результат.Тип = "ЭлементОтбора" И УзелКД.ДоступныеПоляОтбора <> Неопределено Тогда
			Результат.ДоступнаяНастройкаКД = УзелКД.ДоступныеПоляОтбора.НайтиПоле(ЭлементКД.ЛевоеЗначение);
		КонецЕсли;
	КонецЕсли;
	
	// Представление "По умолчанию".
	Результат.ПредставлениеПоУмолчанию = ПредставлениеПоУмолчанию(УзелКД, ЭлементКД, Результат);
	
	// Чтение представления, заданного вручную.
	СтруктураПредставлений = Новый Структура("Представление, ПредставлениеПользовательскойНастройки", "", "");
	ЗаполнитьЗначенияСвойств(СтруктураПредставлений, ЭлементКД);
	
	Результат.ВыводитьТолькоФлажок = ЗначениеЗаполнено(СтруктураПредставлений.Представление);
	Если ЗначениеЗаполнено(СтруктураПредставлений.ПредставлениеПользовательскойНастройки) Тогда
		Результат.Представление = СтруктураПредставлений.ПредставлениеПользовательскойНастройки;
	ИначеЕсли ЗначениеЗаполнено(СтруктураПредставлений.Представление) И СтруктураПредставлений.Представление <> "1" Тогда
		Результат.Представление = СтруктураПредставлений.Представление;
	КонецЕсли;
	
	// Если ничего не задано, то "По умолчанию".
	Если Не ЗначениеЗаполнено(Результат.Представление) Тогда
		Результат.Представление = Результат.ПредставлениеПоУмолчанию;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Функция ПредставлениеПоУмолчанию(УзелКД, ЭлементКД, СвойстваНастройки) Экспорт
	Тип = СвойстваНастройки.Тип;
	Если Тип = Неопределено Тогда
		Тип = ТипНастройкиСтрокой(ТипЗнч(ЭлементКД));
	КонецЕсли;
	Подтип = СвойстваНастройки.Подтип;
	ПользовательскаяНастройкаКД = СвойстваНастройки.ЭлементКД;
	Если ПользовательскаяНастройкаКД = Неопределено Тогда
		ПользовательскаяНастройкаКД = ЭлементКД;
	КонецЕсли;
	ДоступнаяНастройкаКД = СвойстваНастройки.ДоступнаяНастройкаКД;
	
	Представление = "";
	
	Если ЗначениеЗаполнено(СвойстваНастройки.Подтип) Тогда
		
		Если СвойстваНастройки.Подтип = "ДиаграммаСерии" Тогда
			
			Представление = НСтр("ru = 'Серии'");
			
		ИначеЕсли СвойстваНастройки.Подтип = "ДиаграммаТочки" Тогда
			
			Представление = НСтр("ru = 'Точки'");
			
		ИначеЕсли СвойстваНастройки.Подтип = "ТаблицаСтроки" Тогда
			
			Представление = НСтр("ru = 'Строки'");
			
		ИначеЕсли СвойстваНастройки.Подтип = "ТаблицаКолонки" Тогда
			
			Представление = НСтр("ru = 'Колонки'");
			
		Иначе
			
			Представление = Строка(Подтип);
			
		КонецЕсли;
		
	ИначеЕсли Тип = "Отбор" Тогда
		
		Представление = НСтр("ru = 'Отбор'");
		
	ИначеЕсли Тип = "ГруппаЭлементовОтбора" Тогда
		
		Представление = Строка(ПользовательскаяНастройкаКД.ТипГруппы);
		
	ИначеЕсли Тип = "ЭлементОтбора" Тогда
		
		Если ДоступнаяНастройкаКД <> Неопределено Тогда
			Представление = ДоступнаяНастройкаКД.Заголовок;
		КонецЕсли;
		Если ПустаяСтрока(Представление) Тогда
			Представление = ИмяВПредставление(Строка(ЭлементКД.ЛевоеЗначение));
		КонецЕсли;
		
	ИначеЕсли Тип = "ЗначениеПараметраНастроек" Тогда
		
		Если ДоступнаяНастройкаКД <> Неопределено Тогда
			Представление = ДоступнаяНастройкаКД.Заголовок;
		КонецЕсли;
		Если ПустаяСтрока(Представление) Тогда
			Представление = ИмяВПредставление(Строка(ЭлементКД.Параметр));
		КонецЕсли;
		
	ИначеЕсли Тип = "Порядок" Тогда
		
		Представление = НСтр("ru = 'Сортировка'");
		
	ИначеЕсли Тип = "ВыбранныеПоля" Тогда
		
		Представление = НСтр("ru = 'Поля'");
		
	ИначеЕсли Тип = "УсловноеОформление" Тогда
		
		Представление = НСтр("ru = 'Оформление'");
		
	ИначеЕсли Тип = "ЭлементУсловногоОформления" Тогда
		
		Представление = ПредставлениеЭлементаУсловногоОформления(ПользовательскаяНастройкаКД);
		
	ИначеЕсли Тип = "Группировка"
		Или Тип = "ГруппировкаТаблицы"
		Или Тип = "ГруппировкаДиаграммы" Тогда
		
		Представление = СокрЛП(Строка(ЭлементКД.ПоляГруппировки));
		Если ПустаяСтрока(Представление) Тогда
			Представление = НСтр("ru = '<Детальные записи>'");
		КонецЕсли;
		
	ИначеЕсли Тип = "Таблица" Тогда
		
		Представление = НСтр("ru = 'Таблица'");
		
	ИначеЕсли Тип = "Диаграмма" Тогда
		
		Представление = НСтр("ru = 'Диаграмма'");
		
	ИначеЕсли Тип = "НастройкиВложенногоОбъекта" Тогда
		
		Представление = Строка(ПользовательскаяНастройкаКД);
		Если ПустаяСтрока(Представление) Тогда
			Представление = НСтр("ru = 'Вложенная группировка'");
		КонецЕсли;
		
	ИначеЕсли Тип = "СтруктураНастроек" Тогда
		
		Представление = НСтр("ru = 'Структура'");
		
	Иначе
		
		Представление = Строка(Тип);
		
	КонецЕсли;
	
	Возврат Представление;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Прочее

Функция ТипНастройкиСтрокой(Тип) Экспорт
	Если Тип = Тип("НастройкиКомпоновкиДанных") Тогда
		Возврат "Настройки";
	ИначеЕсли Тип = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных") Тогда
		Возврат "НастройкиВложенногоОбъекта";
	
	ИначеЕсли Тип = Тип("ОтборКомпоновкиДанных") Тогда
		Возврат "Отбор";
	ИначеЕсли Тип = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
		Возврат "ЭлементОтбора";
	ИначеЕсли Тип = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
		Возврат "ГруппаЭлементовОтбора";
	
	ИначеЕсли Тип = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
		Возврат "ЗначениеПараметраНастроек";
	
	ИначеЕсли Тип = Тип("ГруппировкаКомпоновкиДанных") Тогда
		Возврат "Группировка";
	ИначеЕсли Тип = Тип("ПоляГруппировкиКомпоновкиДанных") Тогда
		Возврат "ПоляГруппировки";
	ИначеЕсли Тип = Тип("КоллекцияПолейГруппировкиКомпоновкиДанных") Тогда
		Возврат "КоллекцияПолейГруппировки";
	ИначеЕсли Тип = Тип("ПолеГруппировкиКомпоновкиДанных") Тогда
		Возврат "ПолеГруппировки";
	ИначеЕсли Тип = Тип("АвтоПолеГруппировкиКомпоновкиДанных") Тогда
		Возврат "АвтоПолеГруппировки";
	
	ИначеЕсли Тип = Тип("ВыбранныеПоляКомпоновкиДанных") Тогда
		Возврат "ВыбранныеПоля";
	ИначеЕсли Тип = Тип("ВыбранноеПолеКомпоновкиДанных") Тогда
		Возврат "ВыбранноеПоле";
	ИначеЕсли Тип = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
		Возврат "ГруппаВыбранныхПолей";
	ИначеЕсли Тип = Тип("АвтоВыбранноеПолеКомпоновкиДанных") Тогда
		Возврат "АвтоВыбранноеПоле";
	
	ИначеЕсли Тип = Тип("ПорядокКомпоновкиДанных") Тогда
		Возврат "Порядок";
	ИначеЕсли Тип = Тип("ЭлементПорядкаКомпоновкиДанных") Тогда
		Возврат "ЭлементПорядка";
	ИначеЕсли Тип = Тип("АвтоЭлементПорядкаКомпоновкиДанных") Тогда
		Возврат "АвтоЭлементПорядка";
	
	ИначеЕсли Тип = Тип("УсловноеОформлениеКомпоновкиДанных") Тогда
		Возврат "УсловноеОформление";
	ИначеЕсли Тип = Тип("ЭлементУсловногоОформленияКомпоновкиДанных") Тогда
		Возврат "ЭлементУсловногоОформления";
	
	ИначеЕсли Тип = Тип("СтруктураНастроекКомпоновкиДанных") Тогда
		Возврат "СтруктураНастроек";
	ИначеЕсли Тип = Тип("КоллекцияЭлементовСтруктурыНастроекКомпоновкиДанных") Тогда
		Возврат "КоллекцияЭлементовСтруктурыНастроек";
	
	ИначеЕсли Тип = Тип("ТаблицаКомпоновкиДанных") Тогда
		Возврат "Таблица";
	ИначеЕсли Тип = Тип("ГруппировкаТаблицыКомпоновкиДанных") Тогда
		Возврат "ГруппировкаТаблицы";
	ИначеЕсли Тип = Тип("КоллекцияЭлементовСтруктурыТаблицыКомпоновкиДанных") Тогда
		Возврат "КоллекцияЭлементовСтруктурыТаблицы";
	
	ИначеЕсли Тип = Тип("ДиаграммаКомпоновкиДанных") Тогда
		Возврат "Диаграмма";
	ИначеЕсли Тип = Тип("ГруппировкаДиаграммыКомпоновкиДанных") Тогда
		Возврат "ГруппировкаДиаграммы";
	ИначеЕсли Тип = Тип("КоллекцияЭлементовСтруктурыДиаграммыКомпоновкиДанных") Тогда
		Возврат "КоллекцияЭлементовСтруктурыДиаграммы";
	
	ИначеЕсли Тип = Тип("ЗначенияПараметровДанныхКомпоновкиДанных") Тогда
		Возврат "ЗначенияПараметровДанных";
	
	Иначе
		Возврат "";
	КонецЕсли;
КонецФункции

Функция СкопироватьРекурсивно(Узел, ЧтоКопировать, КудаВставить, Индекс, Соответствие) Экспорт
	ТипЭлемента = ТипЗнч(ЧтоКопировать);
	ПараметрыКопирования = ПараметрыКопирования(ТипЭлемента, КудаВставить);
	
	Если ПараметрыКопирования.НужноУказыватьТипЭлемента Тогда
		Если Индекс = Неопределено Тогда
			НоваяСтрока = КудаВставить.Добавить(ТипЭлемента);
		Иначе
			Индекс = Индекс + 1;
			НоваяСтрока = КудаВставить.Вставить(Индекс, ТипЭлемента);
		КонецЕсли;
	Иначе
		Если Индекс = Неопределено Тогда
			НоваяСтрока = КудаВставить.Добавить();
		Иначе
			Индекс = Индекс + 1;
			НоваяСтрока = КудаВставить.Вставить(Индекс);
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьСвойстваРекурсивно(Узел, НоваяСтрока, ЧтоКопировать, Соответствие, ПараметрыКопирования);
	
	Возврат НоваяСтрока;
КонецФункции

Функция ПараметрыКопирования(ТипЭлемента, Коллекция)
	Результат = Новый Структура;
	Результат.Вставить("НужноУказыватьТипЭлемента", Ложь);
	Результат.Вставить("КопируетсяДеревоФормы", Ложь);
	Результат.Вставить("ИсключаяСвойства", Неопределено);
	Результат.Вставить("ЕстьНастройки", Ложь);
	Результат.Вставить("ЕстьЭлементы", Ложь);
	Результат.Вставить("ЕстьВыбор", Ложь);
	Результат.Вставить("ЕстьОтбор", Ложь);
	Результат.Вставить("ЕстьПараметрыВывода", Ложь);
	Результат.Вставить("ЕстьПараметрыДанных", Ложь);
	Результат.Вставить("ЕстьПользовательскиеПоля", Ложь);
	Результат.Вставить("ЕстьПоляГруппировки", Ложь);
	Результат.Вставить("ЕстьПорядок", Ложь);
	Результат.Вставить("ЕстьСтруктура", Ложь);
	Результат.Вставить("ЕстьУсловноеОформление", Ложь);
	Результат.Вставить("ЕстьКолонкиИСтроки", Ложь);
	Результат.Вставить("ЕстьСерииИТочки", Ложь);
	Результат.Вставить("ЕстьЗначенияВложенныхПараметров", Ложь);
	Результат.Вставить("ЕстьПоляИОформление", Ложь);
	
	Если ТипЭлемента = Тип("ДанныеФормыЭлементДерева") Тогда
		
		Результат.КопируетсяДеревоФормы = Истина;
		
	ИначеЕсли ТипЭлемента = Тип("ГруппаВыбранныхПолейКомпоновкиДанных")
		Или ТипЭлемента = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
		
		Результат.НужноУказыватьТипЭлемента = Истина;
		Результат.ИсключаяСвойства = "Родитель";
		Результат.ЕстьЭлементы = Истина;
		
	ИначеЕсли ТипЭлемента = Тип("ВыбранноеПолеКомпоновкиДанных")
		Или ТипЭлемента = Тип("АвтоВыбранноеПолеКомпоновкиДанных")
		Или ТипЭлемента = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
		
		Результат.ИсключаяСвойства = "Родитель";
		Результат.НужноУказыватьТипЭлемента = Истина;
		
	ИначеЕсли ТипЭлемента = Тип("ПолеГруппировкиКомпоновкиДанных")
		Или ТипЭлемента = Тип("АвтоПолеГруппировкиКомпоновкиДанных")
		Или ТипЭлемента = Тип("ЭлементПорядкаКомпоновкиДанных")
		Или ТипЭлемента = Тип("АвтоЭлементПорядкаКомпоновкиДанных") Тогда
		
		Результат.НужноУказыватьТипЭлемента = Истина;
		
	ИначеЕсли ТипЭлемента = Тип("ЭлементУсловногоОформленияКомпоновкиДанных") Тогда
		
		Результат.ЕстьОтбор = Истина;
		Результат.ЕстьПоляИОформление = Истина;
		
	ИначеЕсли ТипЭлемента = Тип("ГруппировкаКомпоновкиДанных")
		Или ТипЭлемента = Тип("ГруппировкаТаблицыКомпоновкиДанных")
		Или ТипЭлемента = Тип("ГруппировкаДиаграммыКомпоновкиДанных")Тогда
		
		Результат.ИсключаяСвойства = "Родитель";
		ТипКоллекции = ТипЗнч(Коллекция);
		Если ТипКоллекции = Тип("КоллекцияЭлементовСтруктурыНастроекКомпоновкиДанных") Тогда
			Результат.НужноУказыватьТипЭлемента = Истина;
			ТипЭлемента = Тип("ГруппировкаКомпоновкиДанных"); // Подмена типа на поддерживаемый.
		КонецЕсли;
		
		Результат.ЕстьВыбор = Истина;
		Результат.ЕстьОтбор = Истина;
		Результат.ЕстьПараметрыВывода = Истина;
		Результат.ЕстьПоляГруппировки = Истина;
		Результат.ЕстьПорядок = Истина;
		Результат.ЕстьСтруктура = Истина;
		Результат.ЕстьУсловноеОформление = Истина;
		
	ИначеЕсли ТипЭлемента = Тип("ТаблицаКомпоновкиДанных") Тогда
		
		Результат.ИсключаяСвойства = "Родитель";
		Результат.НужноУказыватьТипЭлемента = Истина;
		
		Результат.ЕстьВыбор = Истина;
		Результат.ЕстьКолонкиИСтроки = Истина;
		Результат.ЕстьПараметрыВывода = Истина;
		
	ИначеЕсли ТипЭлемента = Тип("ДиаграммаКомпоновкиДанных") Тогда
		
		Результат.ИсключаяСвойства = "Родитель";
		Результат.НужноУказыватьТипЭлемента = Истина;
		
		Результат.ЕстьВыбор = Истина;
		Результат.ЕстьСерииИТочки = Истина;
		Результат.ЕстьПараметрыВывода = Истина;
		
	ИначеЕсли ТипЭлемента = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных") Тогда
		
		Результат.ИсключаяСвойства = "Родитель";
		Результат.НужноУказыватьТипЭлемента = Истина;
		Результат.ЕстьНастройки = Истина;
		
		Результат.ЕстьВыбор = Истина;
		Результат.ЕстьОтбор = Истина;
		Результат.ЕстьПараметрыВывода = Истина;
		Результат.ЕстьПараметрыДанных = Истина;
		Результат.ЕстьПользовательскиеПоля = Истина;
		Результат.ЕстьПоляГруппировки = Истина;
		Результат.ЕстьПорядок = Истина;
		Результат.ЕстьСтруктура = Истина;
		Результат.ЕстьУсловноеОформление = Истина;
		
	Иначе
		
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Копирование элементов ""%1"" не поддерживается'"),
			ТипЭлемента);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЗаполнитьСвойстваРекурсивно(Узел, ЧтоЗаполнить, ЧемЗаполнить, Соответствие = Неопределено, ПараметрыКопирования = Неопределено) Экспорт
	Если Соответствие = Неопределено Тогда
		Соответствие = Новый Соответствие;
	КонецЕсли;
	Если ПараметрыКопирования = Неопределено Тогда
		ПараметрыКопирования = ПараметрыКопирования(ТипЗнч(ЧемЗаполнить), Неопределено);
	КонецЕсли;
	
	Если ПараметрыКопирования.ИсключаяСвойства <> "*" Тогда
		ЗаполнитьЗначенияСвойств(ЧтоЗаполнить, ЧемЗаполнить, , ПараметрыКопирования.ИсключаяСвойства);
	КонецЕсли;
	
	Если ПараметрыКопирования.КопируетсяДеревоФормы Тогда
		
		Соответствие.Вставить(ЧемЗаполнить, ЧтоЗаполнить);
		
		КоллекцияВложенных = ЧемЗаполнить.ПолучитьЭлементы();
		Если КоллекцияВложенных.Количество() > 0 Тогда
			НоваяКоллекцияВложенных = ЧтоЗаполнить.ПолучитьЭлементы();
			Для Каждого ПодчиненнаяСтрока Из КоллекцияВложенных Цикл
				СкопироватьРекурсивно(Узел, ПодчиненнаяСтрока, НоваяКоллекцияВложенных, Неопределено, Соответствие);
			КонецЦикла;
		КонецЕсли;
		
	Иначе
		
		СтарыйИдентификатор = Узел.ПолучитьИдентификаторПоОбъекту(ЧемЗаполнить);
		НовыйИдентификатор = Узел.ПолучитьИдентификаторПоОбъекту(ЧтоЗаполнить);
		Соответствие.Вставить(СтарыйИдентификатор, НовыйИдентификатор);
		
		Если ПараметрыКопирования.ЕстьНастройки Тогда
			ЧтоЗаполнить = ЧтоЗаполнить.Настройки;
			ПодчиненнаяСтрока = ПодчиненнаяСтрока.Настройки;
		КонецЕсли;
		
		Если ПараметрыКопирования.ЕстьЭлементы Тогда
			//   Элементы (КоллекцияВыбранныхПолейКомпоновкиДанных,
			//       КоллекцияЭлементовОтбораКомпоновкиДанных)
			КоллекцияВложенных = ЧемЗаполнить.Элементы;
			Если КоллекцияВложенных.Количество() > 0 Тогда
				НоваяКоллекцияВложенных = ЧтоЗаполнить.Элементы;
				Для Каждого ПодчиненнаяСтрока Из КоллекцияВложенных Цикл
					СкопироватьРекурсивно(Узел, ПодчиненнаяСтрока, НоваяКоллекцияВложенных, Неопределено, Соответствие);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Если ПараметрыКопирования.ЕстьВыбор Тогда
			//   Выбор (ВыбранныеПоляКомпоновкиДанных)
			//   Выбор.Элементы (КоллекцияВыбранныхПолейКомпоновкиДанных)
			ЗаполнитьЗначенияСвойств(ЧтоЗаполнить.Выбор, ЧемЗаполнить.Выбор, , "ДоступныеПоляВыбора, Элементы");
			КоллекцияВложенных = ЧемЗаполнить.Выбор.Элементы;
			Если КоллекцияВложенных.Количество() > 0 Тогда
				НоваяКоллекцияВложенных = ЧтоЗаполнить.Выбор.Элементы;
				Для Каждого ПодчиненнаяСтрока Из КоллекцияВложенных Цикл
					СкопироватьРекурсивно(Узел, ПодчиненнаяСтрока, НоваяКоллекцияВложенных, Неопределено, Соответствие);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Если ПараметрыКопирования.ЕстьОтбор Тогда
			//   Отбор (ОтборКомпоновкиДанных)
			//   Отбор.Элементы (КоллекцияЭлементовОтбораКомпоновкиДанных)
			ЗаполнитьЗначенияСвойств(ЧтоЗаполнить.Отбор, ЧемЗаполнить.Отбор, , "ДоступныеПоляОтбора, Элементы");
			КоллекцияВложенных = ЧемЗаполнить.Отбор.Элементы;
			Если КоллекцияВложенных.Количество() > 0 Тогда
				НоваяКоллекцияВложенных = ЧтоЗаполнить.Отбор.Элементы;
				Для Каждого ПодчиненнаяСтрока Из КоллекцияВложенных Цикл
					СкопироватьРекурсивно(Узел, ПодчиненнаяСтрока, НоваяКоллекцияВложенных, Неопределено, Новый Соответствие);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Если ПараметрыКопирования.ЕстьПараметрыВывода Тогда
			//   ПараметрыВывода (ЗначенияПараметровВыводаКомпоновкиДанных,
			//       ЗначенияПараметровВыводаГруппировкиКомпоновкиДанных,
			//       ЗначенияПараметровВыводаГруппировкиТаблицыКомпоновкиДанных,
			//       ЗначенияПараметровВыводаГруппировкиДиаграммыКомпоновкиДанных,
			//       ЗначенияПараметровВыводаТаблицыКомпоновкиДанных,
			//       ЗначенияПараметровВыводаДиаграммыКомпоновкиДанных)
			//   ПараметрыВывода.Элементы (КоллекцияЗначенийПараметровКомпоновкиДанных)
			КоллекцияВложенных = ЧемЗаполнить.ПараметрыВывода.Элементы;
			Если КоллекцияВложенных.Количество() > 0 Тогда
				УзелВложенных = ЧтоЗаполнить.ПараметрыВывода;
				Для Каждого ПодчиненнаяСтрока Из КоллекцияВложенных Цикл
					ЗначениеПараметраКД = УзелВложенных.НайтиЗначениеПараметра(ПодчиненнаяСтрока.Параметр);
					Если ЗначениеПараметраКД <> Неопределено Тогда
						ЗаполнитьЗначенияСвойств(ЗначениеПараметраКД, ПодчиненнаяСтрока);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Если ПараметрыКопирования.ЕстьПараметрыДанных Тогда
			//   ПараметрыДанных (ЗначенияПараметровДанныхКомпоновкиДанных)
			//   ПараметрыДанных.Элементы (КоллекцияЗначенийПараметровКомпоновкиДанных)
			КоллекцияВложенных = ЧемЗаполнить.ПараметрыДанных.Элементы;
			Если КоллекцияВложенных.Количество() > 0 Тогда
				НоваяКоллекцияВложенных = ЧтоЗаполнить.ПараметрыДанных.Элементы;
				Для Каждого ПодчиненнаяСтрока Из КоллекцияВложенных Цикл
					СкопироватьРекурсивно(Узел, ПодчиненнаяСтрока, НоваяКоллекцияВложенных, Неопределено, Соответствие);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Если ПараметрыКопирования.ЕстьПользовательскиеПоля Тогда
			//   ПользовательскиеПоля (ПользовательскиеПоляКомпоновкиДанных)
			//   ПользовательскиеПоля.Элементы (КоллекцияПользовательскихПолейКомпоновкиДанных)
			КоллекцияВложенных = ЧемЗаполнить.ПользовательскиеПоля.Элементы;
			Если КоллекцияВложенных.Количество() > 0 Тогда
				НоваяКоллекцияВложенных = ЧтоЗаполнить.ПользовательскиеПоля.Элементы;
				Для Каждого ПодчиненнаяСтрока Из КоллекцияВложенных Цикл
					СкопироватьРекурсивно(Узел, ПодчиненнаяСтрока, НоваяКоллекцияВложенных, Неопределено, Соответствие);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Если ПараметрыКопирования.ЕстьПоляГруппировки Тогда
			//   ПоляГруппировки (ПоляГруппировкиКомпоновкиДанных)
			//   ПоляГруппировки.Элементы (КоллекцияПолейГруппировкиКомпоновкиДанных)
			КоллекцияВложенных = ЧемЗаполнить.ПоляГруппировки.Элементы;
			Если КоллекцияВложенных.Количество() > 0 Тогда
				НоваяКоллекцияВложенных = ЧтоЗаполнить.ПоляГруппировки.Элементы;
				Для Каждого ПодчиненнаяСтрока Из КоллекцияВложенных Цикл
					СкопироватьРекурсивно(Узел, ПодчиненнаяСтрока, НоваяКоллекцияВложенных, Неопределено, Новый Соответствие);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Если ПараметрыКопирования.ЕстьПорядок Тогда
			//   Порядок (ПорядокКомпоновкиДанных)
			//   Порядок.Элементы (КоллекцияЭлементовПорядкаКомпоновкиДанных)
			ЗаполнитьЗначенияСвойств(ЧтоЗаполнить.Порядок, ЧемЗаполнить.Порядок, , "ДоступныеПоляПорядка, Элементы");
			КоллекцияВложенных = ЧемЗаполнить.Порядок.Элементы;
			Если КоллекцияВложенных.Количество() > 0 Тогда
				НоваяКоллекцияВложенных = ЧтоЗаполнить.Порядок.Элементы;
				Для Каждого ПодчиненнаяСтрока Из КоллекцияВложенных Цикл
					СкопироватьРекурсивно(Узел, ПодчиненнаяСтрока, НоваяКоллекцияВложенных, Неопределено, Соответствие);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Если ПараметрыКопирования.ЕстьСтруктура Тогда
			//   Структура (КоллекцияЭлементовСтруктурыНастроекКомпоновкиДанных,
			//       КоллекцияЭлементовСтруктурыДиаграммыКомпоновкиДанных,
			//       КоллекцияЭлементовСтруктурыТаблицыКомпоновкиДанных).
			ЗаполнитьЗначенияСвойств(ЧтоЗаполнить.Структура, ЧемЗаполнить.Структура);
			КоллекцияВложенных = ЧемЗаполнить.Структура;
			Если КоллекцияВложенных.Количество() > 0 Тогда
				НоваяКоллекцияВложенных = ЧтоЗаполнить.Структура;
				Для Каждого ПодчиненнаяСтрока Из КоллекцияВложенных Цикл
					СкопироватьРекурсивно(Узел, ПодчиненнаяСтрока, НоваяКоллекцияВложенных, Неопределено, Соответствие);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Если ПараметрыКопирования.ЕстьУсловноеОформление Тогда
			//   УсловноеОформление (УсловноеОформлениеКомпоновкиДанных)
			//   УсловноеОформление.Элементы (КоллекцияЭлементовУсловногоОформленияКомпоновкиДанных)
			ЗаполнитьЗначенияСвойств(ЧтоЗаполнить.УсловноеОформление, ЧемЗаполнить.УсловноеОформление, , "ДоступныеПоляОтбора, ДоступныеПоляПолей, Элементы");
			КоллекцияВложенных = ЧемЗаполнить.УсловноеОформление.Элементы;
			Если КоллекцияВложенных.Количество() > 0 Тогда
				НоваяКоллекцияВложенных = ЧтоЗаполнить.УсловноеОформление.Элементы;
				Для Каждого ПодчиненнаяСтрока Из КоллекцияВложенных Цикл
					СкопироватьРекурсивно(Узел, ПодчиненнаяСтрока, НоваяКоллекцияВложенных, Неопределено, Соответствие);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Если ПараметрыКопирования.ЕстьКолонкиИСтроки Тогда
			//   Колонки (КоллекцияЭлементовСтруктурыТаблицыКомпоновкиДанных).
			КоллекцияВложенных = ЧемЗаполнить.Колонки;
			НоваяКоллекцияВложенных = ЧтоЗаполнить.Колонки;
			СтарыйИдентификатор = Узел.ПолучитьИдентификаторПоОбъекту(КоллекцияВложенных);
			НовыйИдентификатор = Узел.ПолучитьИдентификаторПоОбъекту(НоваяКоллекцияВложенных);
			Соответствие.Вставить(СтарыйИдентификатор, НовыйИдентификатор);
			Для Каждого ПодчиненнаяСтрока Из КоллекцияВложенных Цикл
				СкопироватьРекурсивно(Узел, ПодчиненнаяСтрока, НоваяКоллекцияВложенных, Неопределено, Соответствие);
			КонецЦикла;
			//   Строки (КоллекцияЭлементовСтруктурыТаблицыКомпоновкиДанных).
			КоллекцияВложенных = ЧемЗаполнить.Строки;
			НоваяКоллекцияВложенных = ЧтоЗаполнить.Строки;
			СтарыйИдентификатор = Узел.ПолучитьИдентификаторПоОбъекту(КоллекцияВложенных);
			НовыйИдентификатор = Узел.ПолучитьИдентификаторПоОбъекту(НоваяКоллекцияВложенных);
			Соответствие.Вставить(СтарыйИдентификатор, НовыйИдентификатор);
			Для Каждого ПодчиненнаяСтрока Из КоллекцияВложенных Цикл
				СкопироватьРекурсивно(Узел, ПодчиненнаяСтрока, НоваяКоллекцияВложенных, Неопределено, Соответствие);
			КонецЦикла;
		КонецЕсли;
		
		Если ПараметрыКопирования.ЕстьСерииИТочки Тогда
			//   Серии (КоллекцияЭлементовСтруктурыДиаграммыКомпоновкиДанных).
			КоллекцияВложенных = ЧемЗаполнить.Серии;
			НоваяКоллекцияВложенных = ЧтоЗаполнить.Серии;
			СтарыйИдентификатор = Узел.ПолучитьИдентификаторПоОбъекту(КоллекцияВложенных);
			НовыйИдентификатор = Узел.ПолучитьИдентификаторПоОбъекту(НоваяКоллекцияВложенных);
			Соответствие.Вставить(СтарыйИдентификатор, НовыйИдентификатор);
			Для Каждого ПодчиненнаяСтрока Из КоллекцияВложенных Цикл
				СкопироватьРекурсивно(Узел, ПодчиненнаяСтрока, НоваяКоллекцияВложенных, Неопределено, Соответствие);
			КонецЦикла;
			//   Точки (КоллекцияЭлементовСтруктурыДиаграммыКомпоновкиДанных).
			КоллекцияВложенных = ЧемЗаполнить.Точки;
			НоваяКоллекцияВложенных = ЧтоЗаполнить.Точки;
			СтарыйИдентификатор = Узел.ПолучитьИдентификаторПоОбъекту(КоллекцияВложенных);
			НовыйИдентификатор = Узел.ПолучитьИдентификаторПоОбъекту(НоваяКоллекцияВложенных);
			Соответствие.Вставить(СтарыйИдентификатор, НовыйИдентификатор);
			Для Каждого ПодчиненнаяСтрока Из КоллекцияВложенных Цикл
				СкопироватьРекурсивно(Узел, ПодчиненнаяСтрока, НоваяКоллекцияВложенных, Неопределено, Соответствие);
			КонецЦикла;
		КонецЕсли;
		
		Если ПараметрыКопирования.ЕстьЗначенияВложенныхПараметров Тогда
			//   ЗначенияВложенныхПараметров (КоллекцияЗначенийПараметровКомпоновкиДанных).
			Для Каждого ПодчиненнаяСтрока Из ЧемЗаполнить.ЗначенияВложенныхПараметров Цикл
				СкопироватьРекурсивно(Узел, ПодчиненнаяСтрока, ЧтоЗаполнить.ЗначенияВложенныхПараметров, Неопределено, Соответствие);
			КонецЦикла;
		КонецЕсли;
		
		Если ПараметрыКопирования.ЕстьПоляИОформление Тогда
			Для Каждого ОформляемоеПоле Из ЧемЗаполнить.Поля.Элементы Цикл
				ЗаполнитьЗначенияСвойств(ЧтоЗаполнить.Поля.Элементы.Добавить(), ОформляемоеПоле);
			КонецЦикла;
			Для Каждого Источник Из ЧемЗаполнить.Оформление.Элементы Цикл
				Приемник = ЧтоЗаполнить.Оформление.НайтиЗначениеПараметра(Источник.Параметр);
				Если Приемник <> Неопределено Тогда
					ЗаполнитьЗначенияСвойств(Приемник, Источник, , "Родитель");
					Если Источник.ЗначенияВложенныхПараметров = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					Для Каждого ВложенныйИсточник Из Источник.ЗначенияВложенныхПараметров Цикл
						ВложенныйПриемник = ЧтоЗаполнить.Оформление.НайтиЗначениеПараметра(Источник.Параметр);
						Если ВложенныйПриемник <> Неопределено Тогда
							ЗаполнитьЗначенияСвойств(ВложенныйПриемник, ВложенныйИсточник, , "Родитель");
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ЧтоЗаполнить;
КонецФункции

Функция ПриДобавленииЭлементаНужноУказыватьТип(ТипЭлемента) Экспорт
	Если ТипЭлемента = Тип("ГруппаВыбранныхПолейКомпоновкиДанных")
		Или ТипЭлемента = Тип("ГруппаЭлементовОтбораКомпоновкиДанных")
		Или ТипЭлемента = Тип("ВыбранноеПолеКомпоновкиДанных")
		Или ТипЭлемента = Тип("ЭлементОтбораКомпоновкиДанных")
		Или ТипЭлемента = Тип("ПолеГруппировкиКомпоновкиДанных")
		Или ТипЭлемента = Тип("ЭлементПорядкаКомпоновкиДанных")
		Или ТипЭлемента = Тип("АвтоВыбранноеПолеКомпоновкиДанных")
		Или ТипЭлемента = Тип("АвтоПолеГруппировкиКомпоновкиДанных")
		Или ТипЭлемента = Тип("АвтоЭлементПорядкаКомпоновкиДанных")
		Или ТипЭлемента = Тип("ГруппировкаКомпоновкиДанных")
		Или ТипЭлемента = Тип("ТаблицаКомпоновкиДанных")
		Или ТипЭлемента = Тип("ДиаграммаКомпоновкиДанных")
		Или ТипЭлемента = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных") Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

Функция ПриДобавленииВКоллекциюНужноУказыватьТипЭлемента(ТипКоллекции) Экспорт
	Если ТипКоллекции = Тип("КоллекцияЭлементовСтруктурыТаблицыКомпоновкиДанных")
		Или ТипКоллекции = Тип("КоллекцияЭлементовСтруктурыДиаграммыКомпоновкиДанных")
		Или ТипКоллекции = Тип("КоллекцияЭлементовУсловногоОформленияКомпоновкиДанных") Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
КонецФункции

Функция ДобавитьУникальноеЗначениеВСписок(СписокЗначений, Значение, Представление, Использование) Экспорт
	Если Не ЗначениеЗаполнено(Значение) И Не ЗначениеЗаполнено(Представление) Тогда
		Возврат Неопределено;
	КонецЕсли;
	ЭлементСписка = СписокЗначений.НайтиПоЗначению(Значение);
	Если ЭлементСписка = Неопределено Тогда
		ЭлементСписка = СписокЗначений.Добавить();
		ЭлементСписка.Значение = Значение;
	КонецЕсли;
	Если ЗначениеЗаполнено(Представление) Тогда
		ЭлементСписка.Представление = Представление;
	ИначеЕсли Не ЗначениеЗаполнено(ЭлементСписка.Представление) Тогда
		ЭлементСписка.Представление = Строка(Значение);
	КонецЕсли;
	Если Использование И Не ЭлементСписка.Пометка Тогда
		ЭлементСписка.Пометка = Истина;
	КонецЕсли;
	Возврат ЭлементСписка;
КонецФункции

Функция ЗначенияСписком(Значения) Экспорт
	Если ТипЗнч(Значения) = Тип("СписокЗначений") Тогда
		Возврат Значения;
	Иначе
		СписокЗначений = Новый СписокЗначений;
		Если ТипЗнч(Значения) = Тип("Массив") Тогда
			СписокЗначений.ЗагрузитьЗначения(Значения);
		ИначеЕсли Значения <> Неопределено Тогда
			СписокЗначений.Добавить(Значения);
		КонецЕсли;
		Возврат СписокЗначений;
	КонецЕсли;
КонецФункции

Функция ОписанияТиповСовпадают(ОписаниеТипов1, ОписаниеТипов2) Экспорт
	Если ОписаниеТипов1 = Неопределено Или ОписаниеТипов2 = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	Если ОписаниеТипов1 = ОписаниеТипов2 Или Строка(ОписаниеТипов1) = Строка(ОписаниеТипов2) Тогда
		Возврат Истина;
	КонецЕсли;
	
	#Если Сервер Тогда
		Если ОбщегоНазначения.ЗначениеВСтрокуXML(ОписаниеТипов1) = ОбщегоНазначения.ЗначениеВСтрокуXML(ОписаниеТипов2) Тогда
			Возврат Истина;
		КонецЕсли;
	#КонецЕсли
	
	Возврат Ложь;
КонецФункции

Функция ДополнитьСписок(СписокПриемник, СписокИсточник, КонтролироватьТип = Неопределено, Заменять = Истина) Экспорт
	Если СписокПриемник = Неопределено Или СписокИсточник = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("Всего", 0);
	Результат.Вставить("Добавлено", 0);
	Результат.Вставить("Обновлено", 0);
	Результат.Вставить("Пропущено", 0);

	Если КонтролироватьТип = Неопределено Тогда
		КонтролироватьТип = Не ОписанияТиповСовпадают(СписокПриемник.ТипЗначения, СписокИсточник.ТипЗначения);
	КонецЕсли;
	Если КонтролироватьТип Тогда
		ОписаниеТиповПриемника = СписокПриемник.ТипЗначения;
	КонецЕсли;
	Для Каждого ЭлементИсточник Из СписокИсточник Цикл
		Результат.Всего = Результат.Всего + 1;
		Значение = ЭлементИсточник.Значение;
		Если КонтролироватьТип И Не ОписаниеТиповПриемника.СодержитТип(ТипЗнч(Значение)) Тогда
			Результат.Пропущено = Результат.Пропущено + 1;
			Продолжить;
		КонецЕсли;
		ЭлементПриемник = СписокПриемник.НайтиПоЗначению(Значение);
		Если ЭлементПриемник = Неопределено Тогда
			Результат.Добавлено = Результат.Добавлено + 1;
			ЭлементПриемник = СписокПриемник.Добавить();
			ЭлементПриемник.Значение = Значение;
		Иначе
			Если Не Заменять Тогда
				Результат.Пропущено = Результат.Пропущено + 1;
				Продолжить;
			Иначе
				Результат.Обновлено = Результат.Обновлено + 1;
			КонецЕсли;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ЭлементПриемник, ЭлементИсточник);
	КонецЦикла;
	Возврат Результат;
КонецФункции

Функция ЗначениеВМассив(Значение) Экспорт
	Если ТипЗнч(Значение) = Тип("Массив") Тогда
		Возврат Значение;
	Иначе
		Массив = Новый Массив;
		Массив.Добавить(Значение);
		Возврат Массив;
	КонецЕсли;
КонецФункции

Функция АнализТипов(ИсходноеОписаниеТипов, ПривестиКФорме) Экспорт
	Результат = Новый Структура;
	Результат.Вставить("СодержитТипТип",        Ложь);
	Результат.Вставить("СодержитТипДата",       Ложь);
	Результат.Вставить("СодержитТипБулево",     Ложь);
	Результат.Вставить("СодержитТипСтрока",     Ложь);
	Результат.Вставить("СодержитТипЧисло",      Ложь);
	Результат.Вставить("СодержитТипПериод",     Ложь);
	Результат.Вставить("СодержитТипУИД",        Ложь);
	Результат.Вставить("СодержитТипХранилище",  Ложь);
	Результат.Вставить("СодержитОбъектныеТипы", Ложь);
	
	Результат.Вставить("ОграниченнойДлины",     Истина);
	
	Результат.Вставить("КоличествоТипов",            0);
	Результат.Вставить("КоличествоПримитивныхТипов", 0);
	
	Результат.Вставить("ОбъектныеТипы", Новый Массив);
	
	Если ПривестиКФорме Тогда
		ДобавляемыеТипы = Новый Массив;
		ВычитаемыеТипы = Новый Массив;
	КонецЕсли;
	
	МассивТипов = ИсходноеОписаниеТипов.Типы();
	Для Каждого Тип Из МассивТипов Цикл
		Если Тип = Тип("ПолеКомпоновкиДанных") Тогда
			Если ПривестиКФорме Тогда
				ВычитаемыеТипы.Добавить(Тип);
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		#Если Сервер Тогда
			Если Тип = Тип("СправочникСсылка.ВнешниеПользователи")
				И Не ПолучитьФункциональнуюОпцию("ИспользоватьВнешнихПользователей") Тогда
				Если ПривестиКФорме Тогда
					ВычитаемыеТипы.Добавить(Тип);
				КонецЕсли;
				Продолжить;
			КонецЕсли;
		#КонецЕсли
		
		Результат.КоличествоТипов = Результат.КоличествоТипов + 1;
		
		Если Тип = Тип("Тип") Тогда
			Результат.СодержитТипТип = Истина;
		ИначеЕсли Тип = Тип("Дата") Тогда
			Результат.СодержитТипДата = Истина;
			Результат.КоличествоПримитивныхТипов = Результат.КоличествоПримитивныхТипов + 1;
		ИначеЕсли Тип = Тип("Булево") Тогда
			Результат.СодержитТипБулево = Истина;
			Результат.КоличествоПримитивныхТипов = Результат.КоличествоПримитивныхТипов + 1;
		ИначеЕсли Тип = Тип("Число") Тогда
			Результат.СодержитТипЧисло = Истина;
			Результат.КоличествоПримитивныхТипов = Результат.КоличествоПримитивныхТипов + 1;
		ИначеЕсли Тип = Тип("СтандартныйПериод") Тогда
			Результат.СодержитТипПериод = Истина;
		ИначеЕсли Тип = Тип("Строка") Тогда
			Результат.СодержитТипСтрока = Истина;
			Результат.КоличествоПримитивныхТипов = Результат.КоличествоПримитивныхТипов + 1;
			Если ИсходноеОписаниеТипов.КвалификаторыСтроки.Длина = 0
				И ИсходноеОписаниеТипов.КвалификаторыСтроки.ДопустимаяДлина = ДопустимаяДлина.Переменная Тогда
				Результат.ОграниченнойДлины = Ложь;
			КонецЕсли;
		ИначеЕсли Тип = Тип("УникальныйИдентификатор") Тогда
			Результат.СодержитТипУИД = Истина;
		ИначеЕсли Тип = Тип("ХранилищеЗначения") Тогда
			Результат.СодержитТипХранилище = Истина;
		Иначе
			Результат.СодержитОбъектныеТипы = Истина;
			Результат.ОбъектныеТипы.Добавить(Тип);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПривестиКФорме Тогда
		Если ДобавляемыеТипы.Количество() = 0 И ВычитаемыеТипы.Количество() = 0 Тогда
			ОписаниеТиповДляФормы = ИсходноеОписаниеТипов;
		Иначе
			ОписаниеТиповДляФормы = Новый ОписаниеТипов(ИсходноеОписаниеТипов, ДобавляемыеТипы, ВычитаемыеТипы);
		КонецЕсли;
		
		Результат.Вставить("ОписаниеТиповИсходное", ИсходноеОписаниеТипов);
		Результат.Вставить("ОписаниеТиповДляФормы", ОписаниеТиповДляФормы);
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Функция ПривестиИдентификаторКИмени(Идентификатор) Экспорт
	Возврат СтрЗаменить(СтрЗаменить(Строка(Идентификатор), "-", ""), ".", "_");
КонецФункции

Функция СтрЛевДоСимвола(Строка, Разделитель, Остаток = Неопределено)
	Позиция = СтрНайти(Строка, Разделитель);
	Если Позиция = 0 Тогда
		СтрокаДоТочки = Строка;
		Остаток = "";
	Иначе
		СтрокаДоТочки = Лев(Строка, Позиция - 1);
		Остаток = Сред(Строка, Позиция + 1);
	КонецЕсли;
	Возврат СтрокаДоТочки;
КонецФункции

Функция СписокВыбораВидовСравнения(ОписаниеТипов) Экспорт
	ИнформацияОТипах = АнализТипов(ОписаниеТипов, Ложь);
	
	Список = Новый СписокЗначений;
	
	Если ИнформацияОТипах.ОграниченнойДлины Тогда
		
		Список.Добавить(ВидСравненияКомпоновкиДанных.Равно);
		Список.Добавить(ВидСравненияКомпоновкиДанных.НеРавно);
		
		Список.Добавить(ВидСравненияКомпоновкиДанных.ВСписке);
		Список.Добавить(ВидСравненияКомпоновкиДанных.НеВСписке);
		
		Если ИнформацияОТипах.СодержитОбъектныеТипы Тогда
			
			Список.Добавить(ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии); // НСтр("ru = 'В списке включая подчиненные'")
			Список.Добавить(ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии); // НСтр("ru = 'Не в списке включая подчиненные'").
			
			Список.Добавить(ВидСравненияКомпоновкиДанных.ВИерархии); // НСтр("ru = 'В группе'")
			Список.Добавить(ВидСравненияКомпоновкиДанных.НеВИерархии); // НСтр("ru = 'Не в группе'")
			
		КонецЕсли;
		
		Если ИнформацияОТипах.КоличествоПримитивныхТипов > 0 Тогда
			
			Список.Добавить(ВидСравненияКомпоновкиДанных.Меньше);
			Список.Добавить(ВидСравненияКомпоновкиДанных.МеньшеИлиРавно);
			
			Список.Добавить(ВидСравненияКомпоновкиДанных.Больше);
			Список.Добавить(ВидСравненияКомпоновкиДанных.БольшеИлиРавно);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИнформацияОТипах.СодержитТипСтрока Тогда
		
		Список.Добавить(ВидСравненияКомпоновкиДанных.Содержит);
		Список.Добавить(ВидСравненияКомпоновкиДанных.НеСодержит);
		
		Список.Добавить(ВидСравненияКомпоновкиДанных.Подобно);
		Список.Добавить(ВидСравненияКомпоновкиДанных.НеПодобно);
		
		Список.Добавить(ВидСравненияКомпоновкиДанных.НачинаетсяС);
		Список.Добавить(ВидСравненияКомпоновкиДанных.НеНачинаетсяС);
		
	КонецЕсли;
	
	Если ИнформацияОТипах.ОграниченнойДлины Тогда
		
		Список.Добавить(ВидСравненияКомпоновкиДанных.Заполнено);
		Список.Добавить(ВидСравненияКомпоновкиДанных.НеЗаполнено);
		
	КонецЕсли;
	
	Возврат Список;
КонецФункции

Процедура УдалитьКлючиСтруктуры(Структура, Ключи) Экспорт
	Если ТипЗнч("Ключи") = Тип("Строка") Тогда
		Ключи = СтрРазделить(Ключи, ",", Ложь);
	КонецЕсли;
	Для Каждого ИмяКлюча Из Ключи Цикл
		Структура.Удалить(СокрЛП(ИмяКлюча));
	КонецЦикла;
КонецПроцедуры

Функция НайтиСтрокиТаблицы(ТаблицаРеквизит, ДанныеСтроки) Экспорт
	Если ТипЗнч(ТаблицаРеквизит) = Тип("ДанныеФормыКоллекция") Тогда // Таблица значений.
		Возврат ТаблицаРеквизит.НайтиСтроки(ДанныеСтроки);
	ИначеЕсли ТипЗнч(ТаблицаРеквизит) = Тип("ДанныеФормыДерево") Тогда // Дерево значений.
		Возврат НайтиРекурсивно(ТаблицаРеквизит.ПолучитьЭлементы(), ДанныеСтроки);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

Функция НайтиРекурсивно(НаборСтрок, ДанныеСтроки, Найденные = Неопределено)
	Если Найденные = Неопределено Тогда
		Найденные = Новый Массив;
	КонецЕсли;
	Для Каждого СтрокаТаблицы Из НаборСтрок Цикл
		ЗначенияСовпадают = Истина;
		Для Каждого КлючИЗначение Из ДанныеСтроки Цикл
			Если СтрокаТаблицы[КлючИЗначение.Ключ] <> КлючИЗначение.Значение Тогда
				ЗначенияСовпадают = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ЗначенияСовпадают Тогда
			Найденные.Добавить(СтрокаТаблицы);
		КонецЕсли;
		НайтиРекурсивно(СтрокаТаблицы.ПолучитьЭлементы(), ДанныеСтроки, Найденные);
	КонецЦикла;
	Возврат Найденные;
КонецФункции

Процедура ПривестиЗначениеКТипу(Значение, ОписаниеТипов) Экспорт
	Если Не ОписаниеТипов.СодержитТип(ТипЗнч(Значение)) Тогда
		Значение = ОписаниеТипов.ПривестиЗначение();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти
