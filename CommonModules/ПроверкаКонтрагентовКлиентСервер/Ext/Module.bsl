////////////////////////////////////////////////////////////////////////////////
// Проверка одного или нескольких контрагентов при помощи веб-сервиса ФНС.
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Процедура - Установить текст подсказки в документе.
//
// Параметры:
//  ПараметрыПрорисовки	 - Структура - Описание см ПроверкаКонтрагентов.ДополнитьОписание.
//  СостояниеПроверки	 - Перечисления.СостоянияПроверкиКонтрагентов - Указывает, в каком состояние проверка:
//		завершилась, не завершилась, выполняется или отсутствует доступ к веб-сервису.
//
Процедура УстановитьТекстПодсказкиВДокументе(ПараметрыПрорисовки, СостояниеПроверки) Экспорт
	
	// Определение цвета и текста
	ПодсказкаВДокументе = ПодсказкаВДокументе(ПараметрыПрорисовки, СостояниеПроверки);
	
	// Цвет рамки
	Если ПараметрыПрорисовки.ЭлементРодитель <> Неопределено Тогда
		ЭлементРодитель	= ПараметрыПрорисовки.ЭлементРодитель;
		ЭлементРодитель.ЦветФона = ПодсказкаВДокументе.ЦветФона;
	КонецЕсли;
	
	// Текст расширенной подсказки.
	Элемент = ПараметрыПрорисовки.Элемент;
	Элемент.РасширеннаяПодсказка.Заголовок = ПодсказкаВДокументе.Текст;
	Элемент.ОтображениеПодсказки = ОтображениеПодсказки.Кнопка;
		
КонецПроцедуры

// Процедура - Вывод панели проверки в отчете.
//
// Параметры:
//  Форма	 				- УправляемаяФорма - Форма отчета, для которого выводится результат проверки контрагента.
//  ВидПанелиПроверки		- Строка - Текущее состояние проверки, соответствующее виду панели,
//		может принимать одно из следующих значений:
// 			"ВсеКонтрагентыКорректные"			- Устанавливает вид панели проверки, для случая,
//				когда все контрагенты корректны.
// 			"НайденыНекорректныеКонтрагенты"	- Устанавливает вид панели проверки, для случая,
//				когда найдены некорректные контрагенты.
// 			"ПроверкаВПроцессеВыполнения"		- Устанавливает вид панели проверки, для случая,
//				когда проверка контрагента еще выполняется.
// 			"НетДоступаКСервису"				- Устанавливает вид панели проверки, для случая,
//				когда доступ к сервису проверки отсутствует.
// 			Пустая строка						- Панель проверки контрагентов не видна.
Процедура УстановитьВидПанелиПроверкиКонтрагентовВОтчете(Форма, ВидПанелиПроверки = "") Экспорт
	
	// Если в отчете не добавлена панель результата проверки контрагентов, то данные действия не требуются.
	Если Форма.Элементы.Найти("ПроверкаКонтрагента") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Истина;
	Форма.Элементы.ПроверкаКонтрагента.Видимость = Ложь;
	РаботаСКонтрагентамиКлиентСерверПереопределяемый.УстановитьВидПанелиПроверкиКонтрагентовВОтчете(Форма, СтандартнаяОбработка, ВидПанелиПроверки);
	
	// Если действия по отображению результата проверки переопределили, то стандартную обработку не выполняем.
	Если НЕ СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	Если Форма.РеквизитыПроверкиКонтрагентов.ПроверкаИспользуется Тогда
		
		Если ЗначениеЗаполнено(ВидПанелиПроверки) Тогда 
			
			Форма.Элементы.ПроверкаКонтрагента.Видимость = Истина;
			Форма.Элементы.ПроверкаКонтрагента.ТекущаяСтраница = Форма.Элементы[ВидПанелиПроверки];
			
			Если ВидПанелиПроверки = "НайденыНекорректныеКонтрагенты" Тогда
				
				Форма.ПроверкаКонтрагентовПереключательРежимаОтображения = ?(Форма.РеквизитыПроверкиКонтрагентов.ВыведеныВсеСтроки, "Все", "Недействующие");
				
			КонецЕсли;
			
		Иначе
			
			Форма.Элементы.ПроверкаКонтрагента.Видимость = Ложь;
			
		КонецЕсли;
		
	Иначе
		Форма.Элементы.ПроверкаКонтрагента.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Функция - Определяет, есть ли у формы документа контрагент в шапке.
//
// Параметры:
//  Форма	- УправляемаяФорма - Форма документа, в котором выполняется проверка контрагентов.
// Возвращаемое значение:
//  Булево - Истина, если это документ с контрагентом в шапке.
//
Функция ЭтоДокументСКонтрагентомВШапке(Форма) Экспорт
	
	Результат = РезультатОпределенияВидаДокумента();
	РаботаСКонтрагентамиКлиентСерверПереопределяемый.ОпределитьВидДокумента(Форма, Результат);
	
	Возврат Результат.КонтрагентНаходитсяВШапке;

КонецФункции

// Функция - Определяет, является ли форма документа формой счета-фактуры.
//
// Параметры:
//  Источник	- Произвольный - Источник обработки оповещения.
// Возвращаемое значение:
//  Булево - Истина, если источник является счетом-фактурой.
//
Функция ЭтоСчетФактура(Источник) Экспорт
	
	ЯвляетсяСчетомФактурой = Ложь;
	
	Результат = РезультатОпределенияВидаДокумента();
	РаботаСКонтрагентамиКлиентСерверПереопределяемый.ОпределитьВидДокумента(Источник, Результат);
	ЯвляетсяСчетомФактурой = Результат.ЯвляетсяСчетомФактурой;
		
	Возврат ЯвляетсяСчетомФактурой;

КонецФункции

// Функция - Определяет, есть ли в форме документа счет-фактура в подвале.
//
// Параметры:
//  Форма	- УправляемаяФорма - Форма документа, в котором выполняется проверка контрагентов.
// Возвращаемое значение:
//  Булево - Истина, есть ли в форме документа счет-фактура в подвале есть.
//
Функция ЭтоДокументСоСчетомФактуройВПодвале(Форма) Экспорт
	
	Результат = РезультатОпределенияВидаДокумента();
	РаботаСКонтрагентамиКлиентСерверПереопределяемый.ОпределитьВидДокумента(Форма, Результат);
	
	Возврат Результат.СчетФактураНаходитсяВПодвале;

КонецФункции

// Функция - Определяет, есть ли в форме документа табличные части с контрагентами.
//
// Параметры:
//  Форма	- УправляемаяФорма - Форма документа, в котором выполняется проверка контрагентов.
// Возвращаемое значение:
//  Булево - Истина, есть ли в форме документа есть табличные части с контрагентами.
//
Функция ЭтоДокументСКонтрагентомВТабличнойЧасти(Форма) Экспорт
	
	Результат = РезультатОпределенияВидаДокумента();
	РаботаСКонтрагентамиКлиентСерверПереопределяемый.ОпределитьВидДокумента(Форма, Результат);
	
	Возврат Результат.КонтрагентНаходитсяВТабличнойЧасти;

КонецФункции

// Функция - Определяет, является ли источник контрагентом.
//
// Параметры:
//  Источник - Произвольный - Источник обработки оповещения.
// Возвращаемое значение:
//   - 
//
Функция ЭтоКонтрагент(Источник) Экспорт
	
	Возврат ТипЗнч(Источник) = Тип("СправочникСсылка." + СвойстваСправочникаКонтрагенты().Имя);
	
КонецФункции

// Функция - Определяет имя колонки с признаком, корректный ли это контрагент.
//
// Параметры:
//  ТаблицаФормы - ТаблицаФормы - Таблица формы, в которой располагается колонка с контрагентом.
// Возвращаемое значение:
// Строка - Имя колонки с признаком, корректный ли это контрагент.
//
Функция ИмяПоляКартинки(ТаблицаФормы) Экспорт
	Возврат ТаблицаФормы.Имя + "ЭтоНекорректныйКонтрагент";
КонецФункции

// Функция - Подсказка в документе.
//
// Параметры:
//  ПараметрыПрорисовки	 - Структура - Параметры прорисовки результата проверки контрагента в документе.
// 		Ключи: "КонтрагентЗаполнен", "СостояниеКонтрагента", "КонтрагентовНесколько".
//  СостояниеПроверки	 - Перечисления.СостоянияПроверкиКонтрагентов - Указывает, в каком состояние проверка:
//		завершилась, не завершилась, выполняется или отсутствует доступ к веб-сервису.
// Возвращаемое значение:
//  Структура - Данные, подготовленные для отображения в форме документа.
//		Определяет цвет и текст надписи о результате проверки.
//		Ключи: "Текст", "ЦветФона".
//
Функция ПодсказкаВДокументе(ПараметрыПрорисовки, СостояниеПроверки) Экспорт
	
	КонтрагентЗаполнен	 	= ПараметрыПрорисовки.КонтрагентЗаполнен;
	СостояниеКонтрагента 	= ПараметрыПрорисовки.СостояниеКонтрагента;
	КонтрагентовНесколько 	= ПараметрыПрорисовки.КонтрагентовНесколько;
	
	ЦветФона = Новый Цвет();
	Подстроки = Новый Массив;
	
	РекламаСервиса = Новый ФорматированнаяСтрока(НСтр("ru = 'В программе появилась возможность использовать веб-сервис ФНС для проверки регистрации контрагентов в ЕГРН'"));
	
	Если СостояниеПроверки = ПредопределенноеЗначение("Перечисление.СостоянияПроверкиКонтрагентов.ПроверкаНеИспользуется") Тогда
		// Выводим предложение на подключение.
		Подстроки.Добавить(РекламаСервиса);
	ИначеЕсли СостояниеПроверки = ПредопределенноеЗначение("Перечисление.СостоянияПроверкиКонтрагентов.ПроверкаВПроцессе") Тогда
	    // Проверка не завершилась
		Подстроки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Выполняется проверка контрагентов согласно данным ФНС'")));
													  
	ИначеЕсли СостояниеПроверки = ПредопределенноеЗначение("Перечисление.СостоянияПроверкиКонтрагентов.НетДоступаКВебСервису") Тогда
		// Нет доступа к сервису
		
		Подстроки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Не удалось произвести проверку контрагентов: 
                                                      |сервис ФНС временно недоступен'")));
													  
	ИначеЕсли СостояниеПроверки = ПредопределенноеЗначение("Перечисление.СостоянияПроверкиКонтрагентов.ПроверкаВыполнена") Тогда
		// Проверка завершилась
		
		Цвета = ПроверкаКонтрагентовВызовСервераПовтИсп.ЦветаРезультатовПроверки();
		
		ЦветНекорректногоКонтрагента 	= Цвета.ЦветФонаНекорректногоКонтрагентаВДокументе;
		ЦветКорректногоКонтрагента 		= Цвета.ЦветФонаКорректногоКонтрагентаВДокументе;
		
		Если НЕ КонтрагентЗаполнен Тогда
			// Не заполнен контрагент
			Подстроки.Добавить(НСтр("ru = 'Проверка контрагента по базе ФНС не выполнена: не заполнен контрагент'"));
		ИначеЕсли НЕ ЗначениеЗаполнено(СостояниеКонтрагента) Тогда
			Подстроки.Добавить(РекламаСервиса);
		ИначеЕсли СостояниеКонтрагента = ПредопределенноеЗначение("Перечисление.СостоянияСуществованияКонтрагента.КонтрагентНеПодлежитПроверке") Тогда
			// Иностранный контрагент
			Подстроки.Добавить(НСтр("ru = 'Проверка контрагента по базе ФНС не выполнена: проверке подлежат только российские контрагенты'"));
		ИначеЕсли СостояниеКонтрагента = ПредопределенноеЗначение("Перечисление.СостоянияСуществованияКонтрагента.ПустойИННИлиКПП") Тогда
			// Контрагенты с пустым ИНН и КПП не проверяются.
			Подстроки.Добавить(НСтр("ru = 'Проверка контрагента по базе ФНС не выполнена: не заполнен ИНН/КПП'"));
		ИначеЕсли ПроверкаКонтрагентовКлиентСерверПовтИсп.ЭтоСостояниеНедействующегоКонтрагента(СостояниеКонтрагента) Тогда
			// Недействующий контрагент
			Если КонтрагентовНесколько Тогда
				// Выводим обобщенно
				Подстроки.Добавить(НСтр("ru = 'Обнаружены недействующие контрагенты по данным ФНС'"));
			Иначе
				// Выводим конкретное состояние.
				Подстроки.Добавить(Строка(СостояниеКонтрагента));
			КонецЕсли;
			ЦветФона = ЦветНекорректногоКонтрагента; 
		ИначеЕсли СостояниеКонтрагента = ПредопределенноеЗначение("Перечисление.СостоянияСуществованияКонтрагента.КонтрагентСодержитОшибкиВДанных") Тогда
			// Контрагент с ошибками в ИНН/КПП или дате.
			Подстроки.Добавить(НСтр("ru = 'Проверка контрагента по базе ФНС не выполнена: обнаружены ошибки в заполнении ИНН/КПП/даты документа'"));
			ЦветФона = ЦветНекорректногоКонтрагента;
		ИначеЕсли СостояниеКонтрагента = ПредопределенноеЗначение("Перечисление.СостоянияСуществованияКонтрагента.КонтрагентЕстьВБазеФНС") Тогда
			// Действующий корректный контрагент.
			Если КонтрагентовНесколько Тогда
				// Выводим обобщенно 
				Подстроки.Добавить(НСтр("ru = 'Проверка контрагентов по данным ФНС выполнена успешно'"));
			Иначе
				// Выводим конкретное состояние.
				Подстроки.Добавить(Строка(СостояниеКонтрагента));
			КонецЕсли;
			ЦветФона = ЦветКорректногоКонтрагента;
		КонецЕсли;
		
	КонецЕсли;
	
	Подстроки.Добавить(Символы.ПС);
	Подстроки.Добавить(ПроверкаКонтрагентовКлиентСерверПовтИсп.СсылкаНаИнструкцию());
	
	Результат = Новый Структура;
	Результат.Вставить("Текст", 	Новый ФорматированнаяСтрока(Подстроки));
	Результат.Вставить("ЦветФона",  ЦветФона);
	
	РаботаСКонтрагентамиКлиентСерверПереопределяемый.ПослеФормированияПодсказкиВДокументе(Результат, СостояниеКонтрагента, Цвета);
	
	Возврат Результат; 
		
КонецФункции

// Функция - Получение счета-фактуры, находящегося в подвале документа-основания, чья форма передана в качестве
//           параметра.
//
// Параметры:
//  Форма		 - УправляемаяФорма - Форма документа-основания, для которой необходимо получить счет-фактуру.
// Возвращаемое значение:
//  ДокументСсылка - Счет-фактура, полученная для данного документа-основания.
//
Функция СчетФактура(Форма) Экспорт
	
	СчетФактура = Неопределено;
	Если ЭтоДокументСоСчетомФактуройВПодвале(Форма) Тогда
		РаботаСКонтрагентамиКлиентСерверПереопределяемый.ПолучитьСчетФактуру(Форма, СчетФактура);
	КонецЕсли;
	
	Возврат СчетФактура;
	
КонецФункции

// Функция - Свойства справочника контрагенты.
//	Предназначена для определения имени справочника, имени реквизитов ИНН и КПП.
//
// Возвращаемое значение:
// Структура - Структура с ключами Имя, ИНН и КПП справочника контрагенты.
//
Функция СвойстваСправочникаКонтрагенты() Экспорт
	
	СвойстваСправочника = Новый Структура;
	СвойстваСправочника.Вставить("Имя");
	СвойстваСправочника.Вставить("ИНН");
	СвойстваСправочника.Вставить("КПП");
	
	РаботаСКонтрагентамиКлиентСерверПереопределяемый.ОпределитьСвойстваСправочникаКонтрагенты(СвойстваСправочника);
	
	Возврат СвойстваСправочника;
	
КонецФункции

// Процедура - Вывод нужной панели проверки контрагентов в отчете.
//
// Параметры:
//  Форма	 - УправляемаяФорма - Форма отчета, в котором выполняется проверка контрагентов.
//
Процедура ВывестиНужнуюПанельПроверкиКонтрагентовВОтчете(Форма) Экспорт

	Если Форма.РеквизитыПроверкиКонтрагентов.ПроверкаИспользуется Тогда
		
		Если Форма.РеквизитыПроверкиКонтрагентов.ЕстьДоступКВебСервисуФНС Тогда
			
			Если Форма.РеквизитыПроверкиКонтрагентов.ПроверкаВыполнялась Тогда
				
				НедействующиеКонтрагенты = Форма.ПроверкаКонтрагентовНедействующиеКонтрагенты;
				
				КонтрагентыСПустымСостоянием = НедействующиеКонтрагенты.НайтиСтроки(Новый Структура("Состояние", 
					ПредопределенноеЗначение("Перечисление.СостоянияСуществованияКонтрагента.ПустаяСсылка")));
				Если НедействующиеКонтрагенты.Количество() = 0 Тогда 
					УстановитьВидПанелиПроверкиКонтрагентовВОтчете(Форма, "ВсеКонтрагентыКорректные");
				ИначеЕсли НедействующиеКонтрагенты.Количество() > 0 И КонтрагентыСПустымСостоянием.Количество() = НедействующиеКонтрагенты.Количество() Тогда
					// Ни один контрагенты не проверен.
					УстановитьВидПанелиПроверкиКонтрагентовВОтчете(Форма, "НетДоступаКСервису");
				ИначеЕсли НедействующиеКонтрагенты.Количество() > 0 Тогда
					// Контрагенты проверены
					УстановитьВидПанелиПроверкиКонтрагентовВОтчете(Форма, "НайденыНекорректныеКонтрагенты");
				КонецЕсли;
				
			Иначе
				// Проверка не выполнилась, например, потому что в отчете не было ни одной записи.
				УстановитьВидПанелиПроверкиКонтрагентовВОтчете(Форма);
			КонецЕсли;
			
		Иначе
			 УстановитьВидПанелиПроверкиКонтрагентовВОтчете(Форма, "НетДоступаКСервису");
		КонецЕсли;
		
	Иначе
		УстановитьВидПанелиПроверкиКонтрагентовВОтчете(Форма);
	КонецЕсли;

КонецПроцедуры

// Функция - Параметры фонового задания.
//
// Параметры:
//  Параметр		 - Структура - Если изменения произошли в табличной части. 
//		В записи с ключем ИмяТаблицы указывается ИмяТаблицы, в записи с ключем Идентификатор указывается Идентификатор
//		строки,  в которой произошло изменение контрагента или даты.
//					- Строка - Имя элемента управления формы, в случае если произошло изменение в контрагенте, находящегося в шапке.
//					- Дата - Дата документа, в случае если произошло изменение даты.
//					- ТаблицаФормы - Если изменения произошли в табличной части.
//					- ПолеФормы - Если изменился контрагент в определенном поле произошли в табличной части.
//					- СправочникСсылка.<Контрагенты> - Если произошла запись контрагента и сработало оповещение.
//					- ДокументСсылка.<СчетФактура> - Если произошла запись счета-фактуры и сработало оповещение.
//					- Булево - определяет, нужно ли сохранять результат проверки 
//		сразу в фоновом задании или после выхода из него.
//  Результат	 - 	 - 
// Возвращаемое значение:
//   - 
//
Функция ПараметрыФоновогоЗадания(Параметр, Знач Результат = Неопределено) Экспорт
	
	Если Результат = Неопределено Тогда
		Результат = Новый Структура();
	КонецЕсли;
	
	Если ТипЗнч(Параметр) = Тип("Структура") Тогда
		
		Результат = Параметр;
	
	ИначеЕсли ТипЗнч(Параметр) = Тип("ТаблицаФормы") Тогда 
		
		ИмяТаблицы 		= Параметр.Имя;
		Идентификатор 	= Параметр.ТекущиеДанные.ПолучитьИдентификатор();
		
		СвойстваТаблицы = Новый Структура();
		СвойстваТаблицы.Вставить("ИмяТаблицы", 	ИмяТаблицы);
		СвойстваТаблицы.Вставить("Идентификатор", Идентификатор);
		
		// Сохраняем структуру, так как с клиента на сервер нельзя передавать таблицу.
		Результат.Вставить("ИзменившаясяТаблица", СвойстваТаблицы);
		
	ИначеЕсли ТипЗнч(Параметр) = Тип("ПолеФормы") Тогда
		
		// Сохраняем имя, так как с клиента на сервер нельзя передавать поле.
		Результат.Вставить("ИзменившеесяПоле", Параметр.Имя); 
		
	ИначеЕсли ЭтоКонтрагент(Параметр) Тогда
		
		Результат.Вставить("ИзменившийсяКонтрагент", Параметр);
		
	ИначеЕсли ТипЗнч(Параметр) = Тип("Дата") Тогда
		
		Результат.Вставить("ИзменившаясяДата", Параметр);
		
	ИначеЕсли ТипЗнч(Параметр) = Тип("Булево") Тогда
	
		Результат.Вставить("СохранятьРезультатСразуПослеПроверки", Параметр);
		
	ИначеЕсли ТипЗнч(Параметр) = Тип("Строка") Тогда
		
		// Ничего не делаем
		
	ИначеЕсли ЭтоСчетФактура(Параметр) Тогда
		
		Результат.Вставить("ИзменившийсяСчетФактура", Параметр);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция - Получение объекта (ДанныеФормыСтруктура) и ссылки(ДокументСсылка, СправочникСсылка) документа или
//           справочника,  в котором выполняется проверка контрагента, по форме.
// 		Обязательна к заполнению.
// Параметры:
//  Форма		 - УправляемаяФорма - Форма документа или справочника, в котором выполняется проверка контрагента.
// Возвращаемое значение:
//  Структура - Объект и Ссылка, полученные по форме документа.
//		Ключи: "Объект" (Тип ДанныеФормыСтруктура) и "Ссылка" (Тип ДокументСсылка, СправочникСсылка).
Функция ОбъектИСсылкаПоФорме(Форма) Экспорт
	
	Результат = Новый Структура("Объект, Ссылка");
	РаботаСКонтрагентамиКлиентСерверПереопределяемый.ПолучитьОбъектИСсылкуПоФорме(Форма, Результат);
	
	Возврат Результат;
	
КонецФункции

// Процедура - Отображение результата проверки контрагента в справочнике.
//
// Параметры:
//  Форма	 - УправляемаяФорма - Карточка проверяемого контрагента.
Процедура ОтобразитьРезультатПроверкиКонтрагентаВСправочнике(Форма) Экспорт
	
	Если Форма.РеквизитыПроверкиКонтрагентов.ПроверкаИспользуется Тогда
		ПредставлениеРезультатаПроверки = ПредставлениеРезультатаПроверкиКонтрагента(Форма);
	Иначе
		ПредставлениеРезультатаПроверки = "";
	КонецЕсли;
	
	РаботаСКонтрагентамиКлиентСерверПереопределяемый.ОтобразитьРезультатПроверкиКонтрагентаВСправочнике(Форма, ПредставлениеРезультатаПроверки);
	
КонецПроцедуры

#КонецОбласти

#Область ВспомогательныеПроцедурыИФункции

Процедура ПроверитьКонтрагентаИзКарточки(Форма, ДополнительныеПараметры = Неопределено) Экспорт
	
	СвойстваСправочникаКонтрагенты = СвойстваСправочникаКонтрагенты();

	// Определение объекта и ссылки.
	ОбъектИСсылкаПоФорме 	= ОбъектИСсылкаПоФорме(Форма);
	КонтрагентОбъект 		= ОбъектИСсылкаПоФорме.Объект;
	КонтрагентСсылка 		= ОбъектИСсылкаПоФорме.Ссылка;
	
	ИНН = КонтрагентОбъект[СвойстваСправочникаКонтрагенты.ИНН];
	КПП = КонтрагентОбъект[СвойстваСправочникаКонтрагенты.КПП];
	
	Форма.РеквизитыПроверкиКонтрагентов.АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, Форма.УникальныйИдентификатор);
	Форма.РеквизитыПроверкиКонтрагентов.СостояниеКонтрагента = ПредопределенноеЗначение("Перечисление.СостоянияСуществованияКонтрагента.ПустаяСсылка");
	Форма.РеквизитыПроверкиКонтрагентов.ФоновоеЗаданиеЗапущено = Истина;
	
	// Запуск фонового задания для проверки контрагента.
	ПараметрыЗапуска = Новый Структура;
	ПараметрыЗапуска.Вставить("Контрагент", 	КонтрагентСсылка);
	ПараметрыЗапуска.Вставить("ИНН", 			ИНН);
	ПараметрыЗапуска.Вставить("КПП", 			КПП);
	ПараметрыЗапуска.Вставить("СохранятьРезультатСразуПослеПроверки", 	ТипЗнч(ДополнительныеПараметры) = Тип("Булево") И ДополнительныеПараметры);
	ПараметрыЗапуска.Вставить("АдресХранилища", Форма.РеквизитыПроверкиКонтрагентов.АдресХранилища);
	ПараметрыЗапуска.Вставить("ДополнительныеПараметры", Новый Структура);
	
	РаботаСКонтрагентамиКлиентСерверПереопределяемый.ДополнитьПараметрыЗапускаФоновогоЗадания(ПараметрыЗапуска.ДополнительныеПараметры, Форма);
	
	ПроверкаКонтрагентовВызовСервера.ПроверитьКонтрагентаПриИзменении(ПараметрыЗапуска);
	
КонецПроцедуры

Функция РезультатОпределенияВидаДокумента()
	
	Параметры = Новый Структура;
	
	Параметры.Вставить("КонтрагентНаходитсяВШапке", 			Ложь);
	Параметры.Вставить("КонтрагентНаходитсяВТабличнойЧасти", 	Ложь);
	Параметры.Вставить("СчетФактураНаходитсяВПодвале", 			Ложь);
	Параметры.Вставить("ЯвляетсяСчетомФактурой", 				Ложь);
	
	Возврат Параметры;
	
КонецФункции

Функция ПредставлениеРезультатаПроверкиКонтрагента(Форма)
	
	СостояниеКонтрагента = Форма.РеквизитыПроверкиКонтрагентов.СостояниеКонтрагента;
	
	Результат = "";
	
	Если ПроверкаКонтрагентовКлиентСерверПовтИсп.ЭтоСостояниеНедействующегоКонтрагента(СостояниеКонтрагента, Ложь, Ложь)
		ИЛИ ПроверкаКонтрагентовКлиентСерверПовтИсп.ЭтоСостояниеДействующегоКонтрагента(СостояниеКонтрагента, Ложь, Ложь) Тогда
		
		ЦветТекста 			= ЦветНадписиРезультатаПроверкиПоСостояниюКонтрагента(СостояниеКонтрагента);
		СтрокаСРезультатом  = СтрокаСРезультатомПроверкиКонтрагента(Форма);
		
		// Формируем строку
		МассивПодстрок = Новый Массив;
		МассивПодстрок.Добавить(Новый ФорматированнаяСтрока(
			СтрокаСРезультатом,,
			ЦветТекста,, 
			ПроверкаКонтрагентовКлиентСерверПовтИсп.ПутьКИнструкции()));
		
		Результат = Новый ФорматированнаяСтрока(МассивПодстрок);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СтрокаСРезультатомПроверкиКонтрагента(Форма)
	
	СостояниеКонтрагента 			= Форма.РеквизитыПроверкиКонтрагентов.СостояниеКонтрагента;
	СвойстваСправочникаКонтрагенты 	= СвойстваСправочникаКонтрагенты();

	// Определение объекта и ссылки.
	ОбъектИСсылкаПоФорме 	= ОбъектИСсылкаПоФорме(Форма);
	КонтрагентОбъект 		= ОбъектИСсылкаПоФорме.Объект;
	
	ДлинаИНН = СтрДлина(КонтрагентОбъект[СвойстваСправочникаКонтрагенты.ИНН]);
	ЭтоФизическоеЛицо = ДлинаИНН = 12;
	
	СостояниеКонтрагента = Форма.РеквизитыПроверкиКонтрагентов.СостояниеКонтрагента;
	
	Если ЭтоФизическоеЛицо 
		И СостояниеКонтрагента = ПредопределенноеЗначение("Перечисление.СостоянияСуществованияКонтрагента.НеДействуетИлиИзмененКПП") Тогда
		СтрокаСРезультатом = НСтр("ru = 'Не действует'");
	Иначе
		СтрокаСРезультатом = Строка(СостояниеКонтрагента);
	КонецЕсли;
	
	Возврат СтрокаСРезультатом;
	
КонецФункции

Функция ЦветНадписиРезультатаПроверкиПоСостояниюКонтрагента(СостояниеКонтрагента)
	
	Цвета = ПроверкаКонтрагентовВызовСервераПовтИсп.ЦветаРезультатовПроверки();
	
	Если СостояниеКонтрагента = ПредопределенноеЗначение("Перечисление.СостоянияСуществованияКонтрагента.НеДействуетИлиИзмененКПП") Тогда
		ЦветТекста = Цвета.ЦветТекстаКонтрагентаПрекратившегоДеятельность;
	ИначеЕсли СостояниеКонтрагента = ПредопределенноеЗначение("Перечисление.СостоянияСуществованияКонтрагента.КонтрагентОтсутствуетВБазеФНС")
		ИЛИ СостояниеКонтрагента = ПредопределенноеЗначение("Перечисление.СостоянияСуществованияКонтрагента.КППНеСоответствуетДаннымБазыФНС") Тогда
		ЦветТекста = Цвета.ЦветТекстаНекорректногоКонтрагента;
	ИначеЕсли СостояниеКонтрагента = ПредопределенноеЗначение("Перечисление.СостоянияСуществованияКонтрагента.КонтрагентЕстьВБазеФНС") Тогда
		ЦветТекста = Цвета.ЦветТекстаКонтрагентаДействующего;
	КонецЕсли;
	
	Возврат ЦветТекста;
	
КонецФункции

#КонецОбласти