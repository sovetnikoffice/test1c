
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ПриВходеВПрограмму = Параметры.ПриВходеВПрограмму;
	
	Если ЗначениеЗаполнено(Параметры.Пользователь) Тогда
		Пользователь = Параметры.Пользователь;
	Иначе
		Пользователь = Пользователи.АвторизованныйПользователь();
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	Если Не ПользователиСлужебный.ВозможноИзменитьПароль(Пользователь, ДополнительныеПараметры) Тогда
		ТекстОшибки = ДополнительныеПараметры.ТекстОшибки;
		Возврат;
	КонецЕсли;
	ЭтоТекущийПользовательИБ = ДополнительныеПараметры.ЭтоТекущийПользовательИБ;
	
	ИдентификаторПользователяИБ = ДополнительныеПараметры.ИдентификаторПользователяИБ;
	
	Если ПриВходеВПрограмму Тогда
		Если ДополнительныеПараметры.ПарольУстановлен Тогда
			КлючНазначенияФормы = "СменаПароляПриВходеВПрограмму";
		Иначе
			КлючНазначенияФормы = "УстановкаПароляПриВходеВПрограмму";
			Элементы.ПояснениеПриВходе.Заголовок =
				НСтр("ru = 'Для входа в программу нужно установить пароль.'")
		КонецЕсли;
	Иначе
		Если Не ДополнительныеПараметры.ЭтоТекущийПользовательИБ
		 Или Не ДополнительныеПараметры.ПарольУстановлен Тогда
			
			КлючНазначенияФормы = "УстановкаПароля";
		КонецЕсли;
		Элементы.ПояснениеПриВходе.Видимость = Ложь;
		Элементы.ФормаЗакрытьФорму.Заголовок = НСтр("ru = 'Отмена'");
	КонецЕсли;
	
	СтандартныеПодсистемыСервер.УстановитьКлючНазначенияФормы(ЭтотОбъект, КлючНазначенияФормы, , Ложь);
	
	Если Не ДополнительныеПараметры.ЭтоТекущийПользовательИБ
	 Или Не ДополнительныеПараметры.ПарольУстановлен Тогда
		
		Элементы.СтарыйПарольНадпись.Видимость = Ложь;
		Элементы.СтарыйПароль.Видимость = Ложь;
		АвтоЗаголовок = Ложь;
		Заголовок = НСтр("ru = 'Установка пароля'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Отказ = Истина;
		ПодключитьОбработчикОжидания("ПоказатьТекстОшибкиИСообщитьОЗакрытии", 0.1, Истина);
	Иначе
		ПроверитьПодтверждениеПароля();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПарольПриИзменении(Элемент)
	
	ПоследнееПодтверждение = "";
	ПроверитьПодтверждениеПароля();
	
КонецПроцедуры

&НаКлиенте
Процедура ПарольИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	ПроверитьПодтверждениеПароля(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьНовыйПарольПриИзменении(Элемент)
	
	ПоказыватьНовыйПарольПриИзмененииНаСервере();
	ПроверитьПодтверждениеПароля();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СоздатьПароль(Команда)
	
	Подтверждение = "";
	ПоследнееПодтверждение = "";
	
	СоздатьПарольНаСервере();
	ПроверитьПодтверждениеПароля();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПароль(Команда)
	
	ТекстПредупреждения = НСтр("ru = 'Подтверждение пароля указано некорректно.'");
	
	Если ПоказыватьНовыйПароль
	   И НовыйПароль <> ПоследнееПодтверждение
	   И ЭтоТекущийПользовательИБ Тогда
		
		ПоказыватьНовыйПароль = Ложь;
		Подтверждение = "";
		ПоследнееПодтверждение = "";
		ПоказыватьНовыйПарольПриИзмененииНаСервере();
		ПроверитьПодтверждениеПароля();
		ТекущийЭлемент = Элементы.Подтверждение;
		Если ЗначениеЗаполнено(НовыйПароль) Тогда
			ПоказатьПредупреждение(, ТекстПредупреждения);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ПоказыватьНовыйПароль И НовыйПароль <> Подтверждение Тогда
		ТекущийЭлемент = Элементы.Подтверждение;
		Элементы.Подтверждение.ВыделенныйТекст = Элементы.Подтверждение.ТекстРедактирования;
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	Если Не ЭтоТекущийПользовательИБ
	   И СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().РазделениеВключено
	   И ПарольПользователяСервиса = Неопределено Тогда
		
		СтандартныеПодсистемыКлиент.ПриЗапросеПароляДляАутентификацииВСервисе(
			Новый ОписаниеОповещения("УстановитьПарольЗавершение", ЭтотОбъект),
			ЭтотОбъект,
			ПарольПользователяСервиса);
	Иначе
		УстановитьПарольЗавершение(Null, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФорму(Команда)
	
	Закрыть();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПоказатьТекстОшибкиИСообщитьОЗакрытии()
	
	ПоказатьПредупреждение(Новый ОписаниеОповещения(
		"ПоказатьТекстОшибкиИСообщитьОЗакрытииЗавершение", ЭтотОбъект), ТекстОшибки);
	
КонецПроцедуры

&НаКлиенте
Процедура БездействиеПриЗакрытии() Экспорт
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьТекстОшибкиИСообщитьОЗакрытииЗавершение(Контекст) Экспорт
	
	Если ЭтотОбъект.ОписаниеОповещенияОЗакрытии <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ЭтотОбъект.ОписаниеОповещенияОЗакрытии);
		ЭтотОбъект.ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("БездействиеПриЗакрытии", ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодтверждениеПароля(ПолеПароля = Неопределено)
	
	Если ПоказыватьНовыйПароль И Не ЭтоТекущийПользовательИБ Тогда
		ПарольСовпадает = Истина;
	
	ИначеЕсли ПолеПароля = Элементы.НовыйПароль
	      Или ПолеПароля = Элементы.НовыйПароль2 Тогда
		
		ПарольСовпадает = (ПолеПароля.ТекстРедактирования = Подтверждение);
		
	ИначеЕсли ПолеПароля = Элементы.Подтверждение Тогда
		ПарольСовпадает = (НовыйПароль = ПолеПароля.ТекстРедактирования);
		
	ИначеЕсли ПоказыватьНовыйПароль Тогда
		ПарольСовпадает = (НовыйПароль = ПоследнееПодтверждение);
	Иначе
		ПарольСовпадает = (НовыйПароль = Подтверждение);
	КонецЕсли;
	
	Элементы.ГруппаОшибки.ТекущаяСтраница = ?(ПарольСовпадает,
		Элементы.СтраницаПустая, Элементы.СтраницаОшибка);
	
КонецПроцедуры

&НаСервере
Процедура ПоказыватьНовыйПарольПриИзмененииНаСервере()
	
	Элементы.ПодтверждениеПароляНадпись.Доступность = Не ПоказыватьНовыйПароль Или ЭтоТекущийПользовательИБ;
	Элементы.Подтверждение.Доступность = Не ПоказыватьНовыйПароль;
	
	Элементы.НовыйПароль.Видимость  = Не ПоказыватьНовыйПароль;
	Элементы.НовыйПароль2.Видимость =    ПоказыватьНовыйПароль;
	
	Если ПоказыватьНовыйПароль Тогда
		ПоследнееПодтверждение = Подтверждение;
		Подтверждение = "";
	Иначе
		Подтверждение = ПоследнееПодтверждение;
		ПоследнееПодтверждение = "";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьПарольНаСервере()
	
	Если ТипЗнч(Пользователь) = Тип("СправочникСсылка.ВнешниеПользователи") Тогда
		НастройкиВхода = ПользователиСлужебныйПовтИсп.Настройки().ВнешниеПользователи;
	Иначе
		НастройкиВхода = ПользователиСлужебныйПовтИсп.Настройки().Пользователи;
	КонецЕсли;
	
	Если НастройкиВхода.МинимальнаяДлинаПароля > 8 Тогда
		МинимальнаяДлинаПароля = НастройкиВхода.МинимальнаяДлинаПароля;
	Иначе
		МинимальнаяДлинаПароля = 8;
	КонецЕсли;
	
	ПараметрыПароля = ПользователиСлужебный.ПараметрыПароля(МинимальнаяДлинаПароля, Истина);
	
	НовыйПароль = ПользователиСлужебный.СоздатьПароль(ПараметрыПароля);
	
	ПоказыватьНовыйПароль = Истина;
	ПоказыватьНовыйПарольПриИзмененииНаСервере();
	
КонецПроцедуры

// Продолжение процедуры УстановитьПароль.
&НаКлиенте
Процедура УстановитьПарольЗавершение(НовыйПарольПользователяСервиса, Контекст) Экспорт
	
	Если НовыйПарольПользователяСервиса = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НовыйПарольПользователяСервиса <> Null Тогда
		ПарольПользователяСервиса = НовыйПарольПользователяСервиса;
	КонецЕсли;
	
	ТекстОшибки = "";
	Если УстановитьПарольНаСервере(ТекстОшибки) Тогда
		Закрыть(Новый Структура("УстановленПустойПароль", НовыйПароль = ""));
	Иначе
		ПоказатьПредупреждение(, ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция УстановитьПарольНаСервере(ТекстОшибки)
	
	ДополнительныеПараметры = Новый Структура;
	Если Не ПользователиСлужебный.ВозможноИзменитьПароль(Пользователь, ДополнительныеПараметры) Тогда
		ТекстОшибки = ДополнительныеПараметры.ТекстОшибки;
		Возврат Ложь;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ДополнительныеПараметры.ЭтоТекущийПользовательИБ
	   И ДополнительныеПараметры.ПарольУстановлен Тогда
		
		СтарыйПарольСовпадает = Ложь;
		ПользователиСлужебный.СохраняемоеЗначениеСтрокиПароля(СтарыйПароль,
			ИдентификаторПользователяИБ, СтарыйПарольСовпадает);
		Если Не СтарыйПарольСовпадает Тогда
			ТекстОшибки = НСтр("ru = 'Старый пароль указан неверно.'");
			СтарыйПароль = "";
			ТекущийЭлемент = Элементы.СтарыйПароль;
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(Пользователь) = Тип("СправочникСсылка.ВнешниеПользователи") Тогда
		НастройкиВхода = ПользователиСлужебныйПовтИсп.Настройки().ВнешниеПользователи;
	Иначе
		НастройкиВхода = ПользователиСлужебныйПовтИсп.Настройки().Пользователи;
	КонецЕсли;
	
	Если ПользователиСлужебныйПовтИсп.Настройки().ОбщиеНастройкиВхода Тогда
		МинимальнаяДлинаПароля = НастройкиВхода.МинимальнаяДлинаПароля;
		Если НастройкиВхода.ПарольДолженОтвечатьТребованиямСложности И МинимальнаяДлинаПароля < 7 Тогда
			МинимальнаяДлинаПароля = 7;
		КонецЕсли;
		Если СтрДлина(НовыйПароль) < МинимальнаяДлинаПароля Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Количество символов нового пароля должно быть не менее %1.'"),
				Формат(МинимальнаяДлинаПароля, "ЧГ="));
			Возврат Ложь;
		КонецЕсли;
		Если НастройкиВхода.ПарольДолженОтвечатьТребованиямСложности
		   И Не ПользователиСлужебный.ПарольОтвечаетТребованиямСложности(НовыйПароль) Тогда
			
			ТекстОшибки = НСтр("ru = 'Пароль не отвечает требованиям сложности.'")
				+ Символы.ПС + Символы.ПС
				+ Элементы.НовыйПароль.Подсказка;
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	СохраняемоеЗначениеПароля = ПользователиСлужебный.СохраняемоеЗначениеСтрокиПароля(НовыйПароль);
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить(Метаданные.НайтиПоТипу(ТипЗнч(Пользователь)).ПолноеИмя());
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("Ссылка", Пользователь);
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СведенияОПользователях");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("Пользователь", Пользователь);
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		НаборЗаписей = РегистрыСведений.СведенияОПользователях.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Пользователь.Установить(Пользователь);
		НаборЗаписей.Прочитать();
		Если НаборЗаписей.Количество() = 0 Тогда
			СведенияОПользователе = НаборЗаписей.Добавить();
			СведенияОПользователе.Пользователь = Пользователь;
		Иначе
			СведенияОПользователе = НаборЗаписей[0];
		КонецЕсли;
		СведенияОПользователе.ДатаНачалаИспользованияПароля = Неопределено;
		Если ПриВходеВПрограмму Тогда
			СведенияОПользователе.ПотребоватьСменуПароляПриВходе = Ложь;
		КонецЕсли;
		ИспользованныеПароли = СведенияОПользователе.ИспользованныеПароли.Получить();
		Если ИспользованныеПароли = Неопределено Тогда
			ИспользованныеПароли = Новый Массив;
		КонецЕсли;
		
		Если ПользователиСлужебныйПовтИсп.Настройки().ОбщиеНастройкиВхода
		   И ЗначениеЗаполнено(НастройкиВхода.ЗапретитьПовторениеПароляСредиПоследних) Тогда
			
			Если ИспользованныеПароли.Найти(СохраняемоеЗначениеПароля) <> Неопределено Тогда
				ТекстОшибки = НСтр("ru = 'Новый пароль использовался ранее.'");
				ОтменитьТранзакцию();
				Возврат Ложь;
			КонецЕсли;
			ИспользованныеПароли.Добавить(СохраняемоеЗначениеПароля);
			Пока ИспользованныеПароли.Количество() > НастройкиВхода.ЗапретитьПовторениеПароляСредиПоследних Цикл
				ИспользованныеПароли.Удалить(0);
			КонецЦикла;
		Иначе
			ИспользованныеПароли.Очистить();
		КонецЕсли;
		СведенияОПользователе.ИспользованныеПароли = Новый ХранилищеЗначения(ИспользованныеПароли);
		НаборЗаписей.Записать();
		
		ОписаниеПользователяИБ = Новый Структура;
		ОписаниеПользователяИБ.Вставить("Действие", "Записать");
		ОписаниеПользователяИБ.Вставить("Пароль", НовыйПароль);
		
		ТекущийОбъект = Пользователь.ПолучитьОбъект();
		ТекущийОбъект.ДополнительныеСвойства.Вставить("ОписаниеПользователяИБ", ОписаниеПользователяИБ);
		Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
			Если ЭтоТекущийПользовательИБ Тогда
				ТекущийОбъект.ДополнительныеСвойства.Вставить("ПарольПользователяСервиса", СтарыйПароль);
			Иначе
				ТекущийОбъект.ДополнительныеСвойства.Вставить("ПарольПользователяСервиса", ПарольПользователяСервиса);
			КонецЕсли;
			ТекущийОбъект.ДополнительныеСвойства.Вставить("СинхронизироватьССервисом", Истина);
		КонецЕсли;
		Попытка
			ТекущийОбъект.Записать();
		Исключение
			ПарольПользователяСервиса = Неопределено;
			ВызватьИсключение;
		КонецПопытки;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Пользователи.Ошибка смены пароля'",
			     ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.НайтиПоТипу(ТипЗнч(Пользователь)),
			Пользователь,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось сменить пароль пользователя ""%1"" по причине:
				           |%2'"),
				Пользователь, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке)));
		ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти
