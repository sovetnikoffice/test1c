
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ИмяАдминистратораИБ = ПользователиИнформационнойБазы.ТекущийПользователь().Имя;
	
	СтрокаСоединения = СтрокаСоединенияИнформационнойБазы();
	ФайловаяБаза = СтрНайти(СтрокаСоединения, "File=");
	ПервыйСимволПути = ФайловаяБаза + 6;
	СтрокаСоединения = Сред(СтрокаСоединения, ПервыйСимволПути);
	ПоследнийСимволПути = СтрНайти(СтрокаСоединения, ";");
	СтрокаСоединения = Лев(СтрокаСоединения, ПоследнийСимволПути - 2);
	КаталогИБ = СтрокаСоединения;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаВыполнить(Команда)
	ОчиститьСообщения();
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Состояние(НСтр("ru = 'Выполняется удаление фрагментов кода из модулей конфигурации'"));
	Результат = ВырезатьФрагментыПодсистем();
	Если Результат.ЧислоЗамен > 0 Тогда 
		Состояние(НСтр("ru = 'Загрузка модулей из текстовых файлов'"));	
		ЗагрузитьМодулиВКонфигурацию();
	КонецЕсли;	
	Если Не ПустаяСтрока(Результат.Ошибки) Тогда
		Документ = Новый ТекстовыйДокумент();
		Документ.УстановитьТекст(Результат.Ошибки);
		Документ.Показать(НСтр("ru = 'Пропущенные модули'"));
	КонецЕсли;
	ПоказатьПредупреждение(, НСтр("ru = 'Было проведено замен:'") + " " + Результат.ЧислоЗамен);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадатьКаталогВыгрузки(Команда)
	
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок = НСтр("ru = 'Укажите каталог с выгруженными модулями конфигурации'");
	
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		КаталогВыгрузкиМодулей      = ДиалогОткрытияФайла.Каталог;
		ЗаданКаталогВыгрузкиМодулей = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОчиститьКаталогСМодулями()
	УдалитьФайлы(КаталогВыгрузкиМодулей, "*");
КонецПроцедуры

&НаСервере
Функция ВырезатьФрагментыПодсистем()
	
	Если Не ЗаданКаталогВыгрузкиМодулей Тогда
		ТекущаяДата = ТекущаяДатаСеанса();
		ИмяКаталога = КаталогВременныхФайлов() + "\ВыгрузкаМодулей" + Формат(ТекущаяДата, "ДФ=ddMMyyyyHHmmss");
		СоздатьКаталог(ИмяКаталога);
		КаталогВыгрузкиМодулей = ИмяКаталога;
		
		ОчиститьКаталогСМодулями();
		ВыгрузитьМодулиКонфигурации();
	КонецЕсли;
	
	ЧислоЗамен = 0;
	Ошибки = "";
	ПодсистемыДляУдаления = СписокПодсистемДляУдаления();
	Если ПодсистемыДляУдаления.Количество() > 0 Тогда
		
		МассивФайлов = НайтиФайлы(КаталогВыгрузкиМодулей, "*.txt");
		ТекстФайла = Новый ТекстовыйДокумент;
		
		Для Каждого Файл Из МассивФайлов Цикл 		
			
			ТекстСообщения = НСтр("ru = 'Выполняется удаление фрагментов кода в модуле [ИмяФайлаМодуля]'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ИмяФайлаМодуля]", Файл.Имя);
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация,,, ТекстСообщения);
			
			ТекстФайла.Прочитать(Файл.ПолноеИмя);
			СтрокаТекста = ТекстФайла.ПолучитьТекст();
			Для Каждого ИмяПодсистемы Из ПодсистемыДляУдаления Цикл
				ВырезатьФрагментыПодсистемыВТексте(Файл.Имя, ИмяПодсистемы, СтрокаТекста, ЧислоЗамен, Ошибки);
			КонецЦикла;				
			ТекстФайла.УстановитьТекст(СтрокаТекста);
			ТекстФайла.Записать(Файл.ПолноеИмя);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Новый Структура("ЧислоЗамен,Ошибки", ЧислоЗамен, Ошибки);
		
КонецФункции

&НаСервере
Процедура ВырезатьФрагментыПодсистемыВТексте(ИмяФайлаМодуля, ИмяПодсистемы, СтрокаТекста, ЧислоЗамен, Ошибки)
	
	НачалоФрагмента = НайтиНачалоФрагмента(СтрокаТекста, ИмяПодсистемы);
	Пока НачалоФрагмента > 0 Цикл
		
		ПозицияКонцаФрагмента = НайтиКонецФрагмента(СтрокаТекста, ИмяПодсистемы);
		Если ПозицияКонцаФрагмента = 0 Тогда
			ТекстСообщения = НСтр("ru = '[ИмяФайлаМодуля]: для открывающей скобки [НачалоФрагмента] не обнаружена закрывающая скобка.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "[НачалоФрагмента]", "// " + ИмяПодсистемы);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ИмяФайлаМодуля]", ИмяФайлаМодуля);
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,,, ТекстСообщения);
			Ошибки = Ошибки + Символы.ПС + ТекстСообщения;
			Возврат;
		КонецЕсли; 				
		
		Если ПозицияКонцаФрагмента < НачалоФрагмента Тогда
			ТекстСообщения = НСтр("ru = '[ИмяФайлаМодуля]: для открывающей скобки [НачалоФрагмента] закрывающая скобка расположена выше по тексту.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "[НачалоФрагмента]", "// " + ИмяПодсистемы);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ИмяФайлаМодуля]", ИмяФайлаМодуля);
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,,, ТекстСообщения);
			Ошибки = Ошибки + Символы.ПС + ТекстСообщения;
			Возврат;
		КонецЕсли; 	

		ДлинаНачалаФрагмента = СтрДлина("// " + ИмяПодсистемы);
		ПромежуточнаяСтрока = Сред(СтрокаТекста, НачалоФрагмента + ДлинаНачалаФрагмента + 1, ПозицияКонцаФрагмента - (НачалоФрагмента + ДлинаНачалаФрагмента) + 1);
		Если НайтиНачалоФрагмента(ПромежуточнаяСтрока, ИмяПодсистемы) > 0 Тогда 
			ТекстСообщения = НСтр("ru = '[ИмяФайлаМодуля]: внутри открывающейся скобки [НачалоФрагмента] есть еще одна открывающаяся скобка, до закрывающейся.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "[НачалоФрагмента]", "// " + ИмяПодсистемы);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ИмяФайлаМодуля]", ИмяФайлаМодуля);
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,,, ТекстСообщения);
			Ошибки = Ошибки + Символы.ПС + ТекстСообщения;
			Возврат;
		КонецЕсли;	
		
		ПозицияПоследнегоСимвола = ПозицияКонцаФрагмента + СтрДлина("// Конец " + ИмяПодсистемы);
		ВырезатьФрагмент(СтрокаТекста, НачалоФрагмента - 1, ПозицияПоследнегоСимвола);
		ЧислоЗамен = ЧислоЗамен + 1;
		
		НачалоФрагмента = НайтиНачалоФрагмента(СтрокаТекста, ИмяПодсистемы);
		
	КонецЦикла;
	
КонецПроцедуры	

&НаСервере
Функция НайтиНачалоФрагмента(Знач СтрокаТекста, Знач ИмяПодсистемы)
	
	СтрокаТекста 	= НРег(СтрокаТекста);
	ИмяПодсистемы 	= НРег(ИмяПодсистемы);
	
	ПервыйВариант = "// " + ИмяПодсистемы;
	ВторойВариант = "//" + ИмяПодсистемы;
	
	Если СтрНайти(СтрокаТекста, ПервыйВариант) = 0 И СтрНайти(СтрокаТекста, ВторойВариант) = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	Для Итерация = 1 По СтрДлина(СтрокаТекста) Цикл
		Если Сред(СтрокаТекста, Итерация, СтрДлина(ПервыйВариант)) = (ПервыйВариант) Тогда 
			Если Не ПустаяСтрока(Сред(СтрокаТекста, Итерация + СтрДлина(ПервыйВариант), 1)) Тогда 
				Продолжить;
			КонецЕсли;
			Возврат Итерация;
		КонецЕсли;
		
		Если Сред(СтрокаТекста, Итерация, СтрДлина(ВторойВариант)) = (ВторойВариант) Тогда 
			Если Не ПустаяСтрока(Сред(СтрокаТекста, Итерация + СтрДлина(ВторойВариант), 1)) Тогда 
				Продолжить;
			КонецЕсли;	
			Возврат Итерация;
		КонецЕсли;
	КонецЦикла;	
	
	Возврат 0;
	
КонецФункции

&НаСервере
Функция НайтиКонецФрагмента(Знач СтрокаТекста, Знач ИмяПодсистемы)
	
	СтрокаТекста 	= НРег(СтрокаТекста);
	ИмяПодсистемы 	= НРег(ИмяПодсистемы);
	
	ПервыйВариант = "// конец " + ИмяПодсистемы;
	ВторойВариант = "//конец " + ИмяПодсистемы;
	
	Если СтрНайти(СтрокаТекста, ПервыйВариант) = 0 И СтрНайти(СтрокаТекста, ВторойВариант) = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	Для Итерация = 1 По СтрДлина(СтрокаТекста) Цикл
		
		Если Сред(СтрокаТекста, Итерация, СтрДлина(ПервыйВариант)) = (ПервыйВариант) Тогда 
			Если Не ПустаяСтрока(Сред(СтрокаТекста, Итерация + СтрДлина(ПервыйВариант), 1)) Тогда 
				Продолжить;
			КонецЕсли;
			Возврат Итерация;
		КонецЕсли;
		
		Если Сред(СтрокаТекста, Итерация, СтрДлина(ВторойВариант)) = (ВторойВариант) Тогда 
			Если Не ПустаяСтрока(Сред(СтрокаТекста, Итерация + СтрДлина(ВторойВариант), 1)) Тогда 
				Продолжить;
			КонецЕсли;
			Возврат Итерация;
		КонецЕсли;
	КонецЦикла;
	
	Возврат 0;
	
КонецФункции

&НаСервере
Процедура ВырезатьФрагмент(СтрокаТекста, Начало, Конец)
	СтрокаТекста = Лев(СтрокаТекста, Начало) + Сред(СтрокаТекста, Конец);	
КонецПроцедуры	

&НаСервере
Процедура ЗагрузитьМодулиВКонфигурацию()
		
	СтрокаЗапускаПлатформы = КаталогПрограммы() + "1cv8.exe";
	
	КаталогКонфигурации = КаталогИБ;
	Пользователь = ИмяАдминистратораИБ;
	Пароль = ПарольАдминистратораИБ;
	КоманднаяСтрока = СтрокаЗапускаПлатформы + " DESIGNER /F"""
		+ КаталогКонфигурации + """ /N"""
		+ Пользователь + """ /P""" + Пароль
		+ """ /LoadConfigFiles """ + КаталогВыгрузкиМодулей
		+ """ -Module";
				  
	ЗапуститьПриложение(КоманднаяСтрока,,Истина);
	
КонецПроцедуры

&НаСервере
Процедура ВыгрузитьМодулиКонфигурации()

	СтрокаЗапускаПлатформы = КаталогПрограммы() + "1cv8.exe";
	КаталогКонфигурации = КаталогИБ;
	Пользователь = ИмяАдминистратораИБ;
	Пароль = ПарольАдминистратораИБ;
	КоманднаяСтрока = СтрокаЗапускаПлатформы + " DESIGNER /F"""
		+ КаталогКонфигурации + """ /N"""
		+ Пользователь + """ /P""" + Пароль
		+ """ /DumpConfigFiles """ + КаталогВыгрузкиМодулей
		+ """ -Module";
				  
	ЗапуститьПриложение(КоманднаяСтрока,,Истина);

КонецПроцедуры

&НаСервере
Функция СписокВсехПодсистем()
	
	СписокПодсистем = Новый Массив;
	
	ТекстМакета = РеквизитФормыВЗначение("Объект").ПолучитьМакет("ЭлектронныйВопросник");
	ВременныйФайл = ПолучитьИмяВременногоФайла(".xml");
	ТекстМакета.Записать(ВременныйФайл);
	
	ЧтениеХМЛ = Новый ЧтениеXML;
	ЧтениеХМЛ.ОткрытьФайл(ВременныйФайл);
	
	Пока ЧтениеХМЛ.Прочитать() Цикл
		
		Если ЧтениеХМЛ.ЛокальноеИмя = "Подсистема" 
			И ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			
			ИмяПодсистемы = ЧтениеХМЛ.ПолучитьАтрибут("Имя");
			СписокПодсистем.Добавить(ИмяПодсистемы);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СписокПодсистем;
	
КонецФункции

&НаСервере
Функция СписокПодсистемДляУдаления();
	
	СписокПодсистем = СписокВсехПодсистем();
	СписокИспользуемыхПодсистем = СписокИспользуемыхПодсистем();
	
	ПодсистемыДляУдаления = Новый Массив;
	Для Каждого ИмяПодсистемы Из СписокПодсистем Цикл
		Если СписокИспользуемыхПодсистем.Найти(ИмяПодсистемы) = Неопределено Тогда 
			ПодсистемыДляУдаления.Добавить("СтандартныеПодсистемы." + ИмяПодсистемы);
		КонецЕсли;
	КонецЦикла;
		
	Возврат ПодсистемыДляУдаления;
	
КонецФункции

&НаСервере
Функция СписокИспользуемыхПодсистем()
	
	Результат = Новый Массив;
	СтандартныеПодсистемы = Метаданные.Подсистемы.Найти("СтандартныеПодсистемы");
	Если СтандартныеПодсистемы = Неопределено Тогда
		ВызватьИсключение Нстр("ru = 'Ошибка внедрения БСП. Группа подсистем ""СтандартныеПодсистемы"" не найдена в метаданных конфигурации базы данных.'");
	Иначе
		СписокПодсистем = СтандартныеПодсистемы.Подсистемы;
		ПолучитьСписокПодсистемИзДерева(Результат, СписокПодсистем, "")
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ПолучитьСписокПодсистемИзДерева(СписокПодсистем, ВложенныеПодсистемы, ПутьКПодсистеме)
	
	Если ВложенныеПодсистемы.Количество() > 0 Тогда
		Для Каждого Подсистема Из ВложенныеПодсистемы Цикл
			РезервныйПуть = ПутьКПодсистеме;
			ПутьКПодсистеме = ПутьКПодсистеме + "." + Строка(Подсистема.Имя);
			ПолучитьСписокПодсистемИзДерева(СписокПодсистем, Подсистема.Подсистемы, ПутьКПодсистеме);
			СписокПодсистем.Добавить(Сред(ПутьКПодсистеме, 2));
			ПутьКПодсистеме = РезервныйПуть;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры	

&НаСервере
Функция СобытиеЖурналаРегистрации()
	
	Возврат НСтр("ru = 'Помощник внедрения БСП'", Метаданные.ОсновнойЯзык.КодЯзыка);
	
КонецФункции

#КонецОбласти
