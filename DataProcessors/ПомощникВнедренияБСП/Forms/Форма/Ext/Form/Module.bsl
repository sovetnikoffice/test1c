
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ПроверитьВерсиюИРежимСовместимостиПлатформы();
	
	ПроверитьВерсиюБСП();
	
	ЗапуститьИЗавершить = Параметры.ЗапуститьИЗавершить;
	Объект.КаталогВыгрузкиМодулей = Параметры.КаталогВыгрузкиМодулей;
	
	ПарольУстановлен = ПользователиИнформационнойБазы.ТекущийПользователь().ПарольУстановлен;
	
	ПутьКФормам = РеквизитФормыВЗначение("Объект").Метаданные().ПолноеИмя() + ".Форма";
	
	КонфигурацияПотребитель = Метаданные.КраткаяИнформация;
	НомерЭтапа = 1;
	НомерТекущегоВопроса = 0;
	НомерТекущейПодсистемы = 0;
	КоличествоПодсистем = 0;
	
	КоличествоОшибокОтчетТаблицы 		= 0;
	КоличествоОшибокОтчетаОВнедрении 	= 0;
	КоличествоОшибок 					= 0; 
	КоличествоУточнений 				= 0;

	ВывестиКоличествоОшибокИУточнений();
	
	Если Не ЗапуститьИЗавершить Тогда
		Объект.КаталогВыгрузкиМодулей  = КаталогВременныхФайлов()+"ВыгрузкаМодулей";
	КонецЕсли;
	
	Если СтрНайти(Строка(ТипЗнч(РеквизитФормыВЗначение("Объект"))), "Внешняя") > 0 Тогда
		ПутьКФайлуОбработки = РеквизитФормыВЗначение("Объект").ИспользуемоеИмяФайла;
	Иначе
		ПутьКФайлуОбработки = "";
	КонецЕсли;
	
	УстановитьОтображениеЗаголовковГрупп(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	СтрокаСоединения = СтрокаСоединенияИнформационнойБазы();
	ФайловаяБаза = (Найти(СтрокаСоединения, "File=") = 0);
	Если ФайловаяБаза Тогда
		СообщениеОбОшибке = НСтр("ru ='Помощник внедрения БСП предназначен для использования с файловой базой.'");
		СообщитьПользователю(СообщениеОбОшибке);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если ПарольУстановлен Тогда
		СообщениеОбОшибке = НСтр("ru = 'Помощник внедрения БСП предназначен только для сеанса программы без пароля.'");
		СообщитьПользователю(СообщениеОбОшибке);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
#Если ВебКлиент Тогда
	СообщениеОбОшибке = НСтр("ru ='Помощник внедрения БСП не предназначен для работы в веб-клиенте.'");
	СообщитьПользователю(СообщениеОбОшибке);
	Отказ = Истина;
	Возврат;
#КонецЕсли
	
	Если ТипЗнч(СтруктураПроверкиВерсии) = Тип("Структура") Тогда
		
		ТекстВопроса = НСтр("ru ='Помощник внедрения БСП предназначен для версии %1. Текущая версия БСП в конфигурации %2.
			|Для корректной проверки внедрения рекомендуется использовать помощник внедрения БСП версии %2. Продолжить?'");
		ТекстВопроса = СтрЗаменить(ТекстВопроса, "%1", СтруктураПроверкиВерсии.ПроверяемаяВерсияБСП);
		ТекстВопроса = СтрЗаменить(ТекстВопроса, "%2", СтруктураПроверкиВерсии.ВерсияБСПВМетаданных);
		ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса,РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
		
	Иначе
		
		ПриОткрытииЗавершение(КодВозвратаДиалога.Да, Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Закрыть();
		Возврат;
	КонецЕсли;
	
	Если Не ЗапуститьИЗавершить Тогда
		ВыгрузитьМодули(Истина);
	КонецЕсли;
	
	Если Не ПустаяСтрока(ПутьКФайлуОбработки) Тогда
		// Помещаем обработку во временное хранилище.
		АдресХранилища = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ПутьКФайлуОбработки));
		ИмяОбработки = ПодключитьВнешнююОбработку(АдресХранилища);
	КонецЕсли;
	
	Если Не ПустаяСтрока(ПутьКФайлу) Тогда
		Файл = Новый Файл(ПутьКФайлу);
		Если Файл = Неопределено ИЛИ Не Файл.Существует() Тогда
			ПутьКФайлу = "";
		Иначе	
			Элементы.ПутьКФайлу.Доступность = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ПутьКФайлуПриИзменении("");
	
	Если ЗапуститьИЗавершить Тогда
		НомерЭтапа = 2;
		ОбработкаНачальногоВыбора();
		Если ПроверитьВводФайла() Тогда
			СформироватьОтчет();
		КонецЕсли;
		ПоказатьТаблицуОтчет(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ВыборОбъектовМетаданных" Тогда
		
		ОбъектныйОтвет.Очистить();
		ЗаполнитьЗначениями(Параметр);
		
	ИначеЕсли ИмяСобытия = "Запись_ПомощникВнедренияБСП_ВводДополнительныхПараметровВнедрения" Тогда
		
		НомерСтроки = Элементы.СводкаПоВнедрениюПодсистем.ТекущиеДанные.НомерПП;
		ВывестиСводкуПоПодсистемам(НомерСтроки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если Не ПустаяСтрока(ПутьКФайлу) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПустаяСтрока(ПутьКВременномуФайлуДанных) И Не ЗаданВопросПриЗакрытииФормы Тогда
		ТекстВопроса = НСтр("ru = 'Имеются несохраненные проектные решения по внедрению БСП. Сохранить? 
		|
		|Нажмите ""Да"" для сохранения проектных решений в файл и завершения работы помощника.
		|Нажмите ""Нет"" для завершения работы помощника без сохранения принятых решений.
		|Нажмите ""Отмена"" для продолжения работы с помощником.'");
		
		Отказ = Истина;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, ,КодВозвратаДиалога.Да);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
		Диалог.Заголовок  = НСтр("ru = 'Выбор файла данных'");
		Диалог.Фильтр = "Документ XML (*xml)|*.xml";
		Если Диалог.Выбрать() Тогда
			КопироватьФайл(ПутьКВременномуФайлуДанных, Диалог.ПолноеИмяФайла);
		КонецЕсли;
		
		УдалитьФайлы(ПутьКВременномуФайлуДанных);
		
	ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ЗаданВопросПриЗакрытииФормы = Истина;
	Закрыть();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
Процедура НомерЭтапаПриИзменении(Элемент)
	
	СтраницыВыбора = Элементы.СтраницыВыбораФайлаИПоясняющейНадписи.ПодчиненныеЭлементы;
	Если НомерЭтапа = 1 Тогда
		Элементы.СтраницыВыбораФайлаИПоясняющейНадписи.ТекущаяСтраница = СтраницыВыбора.СтраницаПоясненийПервогоЭтапа;
	ИначеЕсли НомерЭтапа = 2 Тогда
		Элементы.СтраницыВыбораФайлаИПоясняющейНадписи.ТекущаяСтраница = СтраницыВыбора.СтраницаПоясненийВторогоЭтапа;
	ИначеЕсли НомерЭтапа = 3 Тогда
		Элементы.СтраницыВыбораФайлаИПоясняющейНадписи.ТекущаяСтраница = СтраницыВыбора.СтраницаПоясненийТретьегоЭтапа;
	КонецЕсли;
	ПутьКФайлуПриИзменении("");
	
КонецПроцедуры

&НаКлиенте
Процедура ПутьКФайлуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ПутьКФайлу = ПолучитьПутьФайла(Истина, Истина);
 	ПутьКФайлуПриИзменении("");
КонецПроцедуры

&НаКлиенте
Процедура ПутьКФайлу1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ПутьКФайлу = ПолучитьПутьФайла();
	ПутьКФайлуПриИзменении("");
КонецПроцедуры

&НаКлиенте
Процедура ПутьКФайлу2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ПутьКФайлу = ПолучитьПутьФайла();
КонецПроцедуры

&НаКлиенте
Процедура ПутьКФайлу3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ПутьКФайлу = ПолучитьПутьФайла(Ложь);
	ПутьКФайлуПриИзменении("");
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьСписокПодсистемИзФайлаПриИзменении(Элемент)
	Элементы.ПутьКФайлу.Доступность = ЗагрузитьСписокПодсистемИзФайла;
КонецПроцедуры

&НаКлиенте
Процедура ПутьКФайлуПриИзменении(Элемент)
	Если ПустаяСтрока(ПутьКФайлу) Тогда
		ЗагрузитьСписокПодсистемИзФайла = Ложь;
		Элементы.НадписьПояснениеКнопкиДалее1.Заголовок = НСтр("ru = 'Нажмите ""Далее"" для зачитывания данных внедрения БСП из конфигурации и перехода к параметрам внедрения'");
	Иначе
		ЗагрузитьСписокПодсистемИзФайла = Истина;
		Элементы.НадписьПояснениеКнопкиДалее1.Заголовок = НСтр("ru = 'Нажмите ""Далее"" для перехода к параметрам внедрения'");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПутьКФайлу1ПриИзменении(Элемент)
	ПутьКФайлуПриИзменении(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура СводкаПоВнедрениюПодсистемВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	НомерСтроки = Элемент.ТекущиеДанные.НомерПП;;
	ИмяПодсистемы =Элементы.СводкаПоВнедрениюПодсистем.ТекущиеДанные.НаименованиеПодсистемы;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ИмяПодсистемы", ИмяПодсистемы);
	ПараметрыФормы.Вставить("ПутьКФайлу", ПутьКФайлу);
	ПараметрыФормы.Вставить("ПутьКВременномуФайлуДанных", ПутьКВременномуФайлуДанных);
	ПараметрыФормы.Вставить("СписокПодсистем", СписокИспользуемыхПодсистем);
	Если ПустаяСтрока(ПутьКФайлуОбработки) Тогда
		ОткрытьФорму("Обработка.ПомощникВнедренияБСП.Форма.ВводДополнительныхПараметровВнедрения", ПараметрыФормы, ЭтотОбъект);
	Иначе
		ОткрытьФорму("ВнешняяОбработка.ПомощникВнедренияБСП.Форма.ВводДополнительныхПараметровВнедрения", ПараметрыФормы, ЭтотОбъект);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОпциональныеПодсистемыВыбратьПриИзменении(Элемент)
	
	Если Элементы.ОпциональныеПодсистемы.ТекущиеДанные.Выбрать Тогда
		СтрокаПодсистем = ОтметитьСписокЗависимыхПодсистем(Элементы.ОпциональныеПодсистемы.ТекущиеДанные.Подсистема);
		Если Не ПустаяСтрока(СтрокаПодсистем) Тогда
			СтрокаОповещения = НСтр("ru = 'Также были отмечены подсистемы:'") + " " + СтрокаПодсистем;
			ПоказатьОповещениеПользователя( , , СтрокаОповещения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОпциональныеПодсистемыПриАктивизацииСтроки(Элемент)
	
	Элементы.ОписаниеПодсистемы.Заголовок = Элемент.ТекущиеДанные.Описание;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Далее(Команда)
	ПодчиненныеСтраницы = Элементы.СтраницыПомощника.ПодчиненныеЭлементы;
	ТекущаяОсновнаяСтраница = Элементы.СтраницыПомощника.ТекущаяСтраница;
	Если ТекущаяОсновнаяСтраница = ПодчиненныеСтраницы.НачальнаяСтраницаПомощника Тогда
		ОбработкаНачальногоВыбора();
	ИначеЕсли ТекущаяОсновнаяСтраница = ПодчиненныеСтраницы.СтраницаВыбораПодсистем Тогда
		ОбработкаВыбораСпискаПодсистем();
	ИначеЕсли ТекущаяОсновнаяСтраница = ПодчиненныеСтраницы.СтраницаСводкиВнедрения Тогда
		Если ПроверитьВводФайла() Тогда
			Состояние(НСТР("ru = 'Формируются отчеты по внедрению БСП'"));
			СформироватьОтчет();
			Элементы.СтраницыПомощника.ТекущаяСтраница = ПодчиненныеСтраницы.СтраницаОтчета;
		КонецЕсли;
	ИначеЕсли ТекущаяОсновнаяСтраница = ПодчиненныеСтраницы.СтраницаОтчета Тогда
		Закрыть();
	КонецЕсли;
	ПриСменеСтраницы(Элементы.СтраницыПомощника.ТекущаяСтраница);
КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)
	ПодчиненныеСтраницы = Элементы.СтраницыПомощника.ПодчиненныеЭлементы;
	ТекущаяОсновнаяСтраница = Элементы.СтраницыПомощника.ТекущаяСтраница;
	Если ТекущаяОсновнаяСтраница = ПодчиненныеСтраницы.СтраницаВыбораПодсистем Тогда
		Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницыПомощника.ПодчиненныеЭлементы.НачальнаяСтраницаПомощника;
	ИначеЕсли ТекущаяОсновнаяСтраница = ПодчиненныеСтраницы.СтраницаОтчета Тогда
		Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницыПомощника.ПодчиненныеЭлементы.НачальнаяСтраницаПомощника;
	ИначеЕсли ТекущаяОсновнаяСтраница = ПодчиненныеСтраницы.СтраницаСводкиВнедрения Тогда
		Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницыПомощника.ПодчиненныеЭлементы.НачальнаяСтраницаПомощника;
	КонецЕсли;
	ПриСменеСтраницы(Элементы.СтраницыПомощника.ТекущаяСтраница);
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьКонфигураторССохранением(Команда)
	Если ПроверитьВводФайла() Тогда
		СохранитьСписокПодсистемВФайл();
	КонецЕсли;
	ЗавершитьРаботуСистемы(Ложь, Истина, "DESIGNER");
КонецПроцедуры

&НаКлиенте
Процедура ОпциональныеПодсистемыВыбратьВсе(Команда)
	Для Каждого Подсистема Из ОпциональныеПодсистемы Цикл
		Подсистема.Выбрать = Истина;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОпциональныеПодсистемыСнятьВсе(Команда)
	Для Каждого Подсистема Из ОпциональныеПодсистемы Цикл
		Подсистема.Выбрать = Подсистема.Обязательная;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПодсистемыВывестиСписок(Команда)
	ТабДок = СформироватьСписокПодсистемНаСервере();
	ТабДок.Показать();
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОтчетОВнедрении(Команда)
	СводкаОтчета = ПолучитьИзВременногоХранилища(АдресСводки);
	СводкаОтчета.Показать();
КонецПроцедуры

&НаКлиенте
Процедура СохранитьПринятыеРешенияВФайл(Команда)
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	Диалог.Заголовок  = НСтр("ru = 'Выбор файла данных'");
	Диалог.Фильтр = "Документ XML (*xml)|*.xml";
	Если Диалог.Выбрать() Тогда
		КопироватьФайл(ПутьКВременномуФайлуДанных, Диалог.ПолноеИмяФайла);
		ПутьКВременномуФайлуДанных = "";
		ПутьКФайлу = Диалог.ПолноеИмяФайла;
		Элементы.СохранитьРешенияВФайл.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьКонфигуратор(Команда)
	Если Не ПустаяСтрока(ПутьКВременномуФайлуДанных) Тогда
		ПутьКФайлу = "";
	КонецЕсли;
	#Если Не ВебКлиент Тогда
	СтрокаСоединения = СтрокаСоединенияИнформационнойБазы();
	ФайловаяБаза = СтрНайти(СтрокаСоединения, "File=");
	ПервыйСимволПути = ФайловаяБаза + 6;
	СтрокаСоединения = Сред(СтрокаСоединения,ПервыйСимволПути);
	ПоследнийСимволПути = СтрНайти(СтрокаСоединения,";");
	СтрокаСоединения = Лев(СтрокаСоединения,ПоследнийСимволПути - 2);
	ПутьКИБ = СтрокаСоединения;
	СтрокаЗапускаПлатформы = КаталогПрограммы() + "1cv8.exe";
	КаталогКонфигурации = ПутьКИБ;
	Пользователь = ПолучитьИмяПользователяИБ();
	Пароль = "";
	
	КоманднаяСтрока = СтрокаЗапускаПлатформы + " DESIGNER /F"""
	+ КаталогКонфигурации + """ /N"""
	+ Пользователь + """ /P""" + Пароль + """";
	
	ЗапуститьПриложение(КоманднаяСтрока);
	#Иначе
		Возврат;
	#КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКВопроснику(Команда)
	ИмяПодсистемы =Элементы.СводкаПоВнедрениюПодсистем.ТекущиеДанные.НаименованиеПодсистемы;
	ПараметрыФормы = Новый Структура("ИмяПодсистемы, ПутьКФайлу, ПутьКВременномуФайлуДанных", ИмяПодсистемы, ПутьКФайлу, ПутьКВременномуФайлуДанных);
	Если ПустаяСтрока(ПутьКФайлуОбработки) Тогда
		ОткрытьФорму("Обработка.ПомощникВнедренияБСП.Форма.ВводДополнительныхПараметровВнедрения", ПараметрыФормы, ЭтотОбъект);
	Иначе
		ОткрытьФорму("ВнешняяОбработка.ПомощникВнедренияБСП.Форма.ВводДополнительныхПараметровВнедрения", ПараметрыФормы, ЭтотОбъект);
	КонецЕсли;
	ВывестиСводкуПоПодсистемам();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаВнедренияПодсистем(Команда)
	
	// Откроем форму подключенной внешней обработки.
	ТекущиеДанные = Элементы.СводкаПоВнедрениюПодсистем.ТекущиеДанные;
	НомерСтроки = ?(ТекущиеДанные <> Неопределено, ТекущиеДанные.НомерПП, 0);
	
	Состояние(НСтр("ru = 'Формируется таблица внедрения подсистем БСП в конфигурацию'"));
	АдресСпискаИспользуемыхПодсистем = ПолучитьАдресСпискаИспользуемыхПодсистем();
	ПараметрыФормы = Новый Структура("АдресСпискаИспользуемыхПодсистем, ПутьКФайлу, ПутьКВременномуФайлуДанных", АдресСпискаИспользуемыхПодсистем, ПутьКФайлу, ПутьКВременномуФайлуДанных);
	Если ПустаяСтрока(ПутьКФайлуОбработки) Тогда
		ОткрытьФорму("Обработка.ПомощникВнедренияБСП.Форма.ТаблицаВнедренияПодсистем", ПараметрыФормы, ЭтотОбъект);
	Иначе
		ОткрытьФорму("ВнешняяОбработка.ПомощникВнедренияБСП.Форма.ТаблицаВнедренияПодсистем", ПараметрыФормы, ЭтотОбъект);
	КонецЕсли;
	ВывестиСводкуПоПодсистемам(НомерСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьТаблицуОтчет(Команда)
	ЗачитатьДанныеВнедренияИзКонфигурации();
	АдресСпискаИспользуемыхПодсистем = ПолучитьАдресСпискаИспользуемыхПодсистем();
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТабличныйОтчет", ТабличныйОтчет);
	ПараметрыФормы.Вставить("СтруктураОписанияОшибок", СтруктураОписанияОшибок);
	ПараметрыФормы.Вставить("АдресСпискаИспользуемыхПодсистем", АдресСпискаИспользуемыхПодсистем);
	ПараметрыФормы.Вставить("ПутьКВременномуФайлуДанных", ПутьКВременномуФайлуДанных);
	ПараметрыФормы.Вставить("ПутьКФайлу", ПутьКФайлу);
	ПараметрыФормы.Вставить("РежимПроверки", Истина);
	
	ПараметрыФормы.Вставить("ЗапуститьИЗавершить", ЗапуститьИЗавершить);
	ПараметрыФормы.Вставить("КаталогВыгрузкиМодулей", Объект.КаталогВыгрузкиМодулей);
	
	Если ПустаяСтрока(ПутьКФайлуОбработки) Тогда
		ОткрытьФорму("Обработка.ПомощникВнедренияБСП.Форма.ТаблицаВнедренияПодсистем", ПараметрыФормы);
	Иначе
		ОткрытьФорму("ВнешняяОбработка.ПомощникВнедренияБСП.Форма.ТаблицаВнедренияПодсистем", ПараметрыФормы);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьАдресСпискаИспользуемыхПодсистем()
	
	Возврат ПоместитьВоВременноеХранилище(РеквизитФормыВЗначение("СписокИспользуемыхПодсистем"));
	
КонецФункции

&НаКлиенте
Процедура УдалитьКодНеиспользуемыхПодсистем(Команда)
	
	ОткрытьФорму(ПутьКФормам + ".УдалениеФрагментовКода");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ВидимостьКнопок()
	ТекущаяСтраница = Элементы.СтраницыПомощника.ТекущаяСтраница;
	ПодчиненныеСтраницы = Элементы.СтраницыПомощника.ПодчиненныеЭлементы;
	
	Если ТекущаяСтраница = ПодчиненныеСтраницы.НачальнаяСтраницаПомощника Тогда
		Элементы.КнопкаНазад.Доступность = Ложь;
		Элементы.КнопкаДалее.Заголовок = НСтр("ru = 'Далее >'");
	ИначеЕсли ТекущаяСтраница = ПодчиненныеСтраницы.СтраницаОтчета Тогда
		Элементы.КнопкаДалее.Заголовок = НСтр("ru = 'Готово'");
		Элементы.КнопкаНазад.Доступность = Истина;
	Иначе
		Элементы.КнопкаДалее.Заголовок = НСтр("ru = 'Далее >'");
		Элементы.КнопкаНазад.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПутьФайла(Режим = Истина, ПроверятьНаличиеФайла = Ложь)
	Диалог = Новый ДиалогВыбораФайла(?(Режим, РежимДиалогаВыбораФайла.Открытие, РежимДиалогаВыбораФайла.Сохранение));
	Диалог.Заголовок  = НСтр("ru = 'Выбор файла данных'");
	Если ПроверятьНаличиеФайла Тогда
		Диалог.ПроверятьСуществованиеФайла = Истина;
	КонецЕсли;
	
	Диалог.Фильтр = "Документ XML (*xml)|*.xml";
	Если Диалог.Выбрать() Тогда
		Элементы.СохранитьРешенияВФайл.Видимость=Ложь;
		Возврат Диалог.ПолноеИмяФайла;
		
	КонецЕсли;
КонецФункции

&НаКлиенте
Функция ПроверитьВводФайла()
	
#Если Не ВебКлиент Тогда
	
	Если ПустаяСтрока(ПутьКВременномуФайлуДанных) Тогда
		ПутьКВременномуФайлуДанных = ПолучитьИмяВременногоФайла("xml");
	КонецЕсли;
	Возврат Истина;
	
#КонецЕсли
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ПереносКорректный()
	
	Если Метаданные.Подсистемы.Найти("СтандартныеПодсистемы") <> Неопределено Тогда
		Возврат Истина;
	Иначе
		ТекстСообщения = НСтр("ru = 'Невозможно получить объекты обязательных подсистем библиотеки. Повторный перенос объектов может исправить эту проблему'");
		СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ОбработкаНачальногоВыбора(ПроизвольныйПереход = Неопределено)
	Если ПроизвольныйПереход = Неопределено Тогда
		НомерЭтапаТек = НомерЭтапа;
	Иначе
		НомерЭтапаТек = ПроизвольныйПереход;
	КонецЕсли;
	// Переход к выбору подсистем
	Если НомерЭтапаТек = 1 Тогда
		Если ЗагрузитьСписокПодсистемИзФайла Тогда
			Если ПустаяСтрока(ПутьКФайлу) Тогда
				ТекстПредупреждения = НСтр("ru = 'Не задан файл со списком подсистем'");
				ПоказатьПредупреждение(, ТекстПредупреждения);
				Возврат;
			КонецЕсли;
			Файл = Новый Файл(ПутьКФайлу);
			Если Не Файл.Существует() Тогда
				ТекстПредупреждения = НСтр("ru = 'Указанный файл не найден.'");
				ПоказатьПредупреждение(, ТекстПредупреждения);
				Возврат;
			КонецЕсли;
			
			ЗагрузитьПодсистемыИзФайла();
		Иначе
			ЗагрузитьСписокПодсистем();
		КонецЕсли;
		НоваяСтраница = Элементы.СтраницыПомощника.ПодчиненныеЭлементы.СтраницаВыбораПодсистем;
		Элементы.СтраницыПомощника.ТекущаяСтраница = НоваяСтраница;
		// Переход к электронному вопроснику.
	ИначеЕсли НомерЭтапаТек = 2 Тогда
		Если ЗагрузитьСписокПодсистемИзФайла Тогда
			Файл = Новый Файл(ПутьКФайлу);
			Если Не Файл.Существует() Тогда
				ТекстПредупреждения = НСтр("ru = 'Указанный файл не найден.'");
				ПоказатьПредупреждение(, ТекстПредупреждения);
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		Если Не ПереносКорректный() Тогда
			Возврат;
		КонецЕсли;
		ЗачитатьДанныеВнедренияИзКонфигурации();
		
		ВывестиСводкуПоПодсистемам();
		НоваяСтраница = Элементы.СтраницыПомощника.ПодчиненныеЭлементы.СтраницаСводкиВнедрения;
		Элементы.СтраницыПомощника.ТекущаяСтраница = НоваяСтраница;
		// Переход к отчету о внедрении.
	ИначеЕсли НомерЭтапаТек = 3 Тогда
		Если Не ПустаяСтрока(ПутьКФайлу) Тогда
			Файл = Новый Файл(ПутьКФайлу);
		Иначе
			ТекстПредупреждения = НСтр("ru = 'Файл не задан.'");
			ПоказатьПредупреждение(, ТекстПредупреждения);
			Возврат;
		КонецЕсли;
		
		Если Файл = Неопределено ИЛИ Не Файл.Существует() Тогда
			ТекстПредупреждения = НСтр("ru = 'Указанный файл не найден.'");
			ПоказатьПредупреждение(, ТекстПредупреждения);
			Возврат;
		КонецЕсли;
		
		СформироватьОтчет();
		НоваяСтраница = Элементы.СтраницыПомощника.ПодчиненныеЭлементы.СтраницаОтчета;
		Элементы.СтраницыПомощника.ТекущаяСтраница = НоваяСтраница;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ВывестиСводкуПоПодсистемам(НомерСтроки = 0)
	
	ТаблицаПодсистем = Новый ТаблицаЗначений;
	ТаблицаПодсистем.Колонки.Добавить("НомерПП");
	ТаблицаПодсистем.Колонки.Добавить("НаименованиеПодсистемы");
	ТаблицаПодсистем.Колонки.Добавить("КоличествоОтветов");
	ТаблицаПодсистем.Колонки.Добавить("ЗаполнениеМатричныхОтветов");
	ТаблицаПодсистем.Колонки.Добавить("СтатусВнедрения");
	
	ТаблицаВопросов = ПолучитьСтруктуруВопросов();
	ТаблицаОтветов  = ПолучитьСтруктуруОтветов();
	
	ПривестиТаблицуВопросовИОтветов(СписокИспользуемыхПодсистем, ТаблицаВопросов, ТаблицаОтветов);
	
	// По каждой подсистеме, взятой из файла или конфигурации.
	Для Каждого ЭлементПодсистем Из СписокИспользуемыхПодсистем Цикл
		Подсистема = ЭлементПодсистем.Подсистема;
		СтрокаТаблицы = ТаблицаПодсистем.Добавить();
		СтрокаТаблицы.НомерПП = СписокИспользуемыхПодсистем.Индекс(ЭлементПодсистем) + 1;
		СтрокаТаблицы.НаименованиеПодсистемы = ЭлементПодсистем.Представление;
		
		СтрокаТаблицы.КоличествоОтветов = ПолучитьЗаполненность(Подсистема, Ложь, ТаблицаВопросов, ТаблицаОтветов);
		СтрокаТаблицы.ЗаполнениеМатричныхОтветов = ПолучитьЗаполненность(Подсистема, Истина, ТаблицаВопросов, ТаблицаОтветов);
		СтрокаТаблицы.СтатусВнедрения = ПроанализироватьСтроку(СтрокаТаблицы);
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ТаблицаПодсистем, "СводкаПоВнедрениюПодсистем");
	
	Если Число(НомерСтроки) > 0 Тогда
		ПараметрыОтбора = Новый Структура("НомерПП", НомерСтроки);
		СтрокиТаблицы = СводкаПоВнедрениюПодсистем.НайтиСтроки(ПараметрыОтбора);
		Элементы.СводкаПоВнедрениюПодсистем.ТекущаяСтрока = СтрокиТаблицы[0].ПолучитьИдентификатор();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПривестиТаблицуВопросовИОтветов(ТаблицаПодсистем, ТаблицаВопросов, ТаблицаОтветов)
	
	Фильтр = Новый Структура("Подсистема", "НастройкиПрограммы");
	
	МассивУдаляемыхВопросов = Новый Массив;
	Для Каждого Вопрос Из ТаблицаВопросов Цикл
		Если Вопрос.Параметр = "НастройкиПрограммы" Тогда 
			Если ТаблицаПодсистем.НайтиСтроки(Фильтр).Количество() <> 0 Тогда 
				МассивУдаляемыхВопросов.Добавить(Вопрос);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого УдаляемыйВопрос Из МассивУдаляемыхВопросов Цикл
		ТаблицаВопросов.Удалить(УдаляемыйВопрос);
	КонецЦикла;
	
	МассивУдаляемыхОтветов = Новый Массив;
	Для Каждого Ответ Из ТаблицаОтветов Цикл
		Если Ответ.Параметр = "НастройкиПрограммы" Тогда 
			Если ТаблицаПодсистем.НайтиСтроки(Фильтр).Количество() <> 0 Тогда 
				МассивУдаляемыхОтветов.Добавить(Ответ);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого УдаляемыйОтвет Из МассивУдаляемыхОтветов Цикл
		ТаблицаОтветов.Удалить(УдаляемыйОтвет);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПроанализироватьСтроку(СтрокаТаблицы)
	
	Если Число(СтрокаТаблицы.КоличествоОтветов) = 0
		И СтрокаТаблицы.ЗаполнениеМатричныхОтветов Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПолучитьЗаполненность(ИмяПодсистемы, ПоТаблице, ТаблицаВопросов, ТаблицаОтветов)
	ПараметрыОтбора = Новый Структура("Подсистема", ИмяПодсистемы);
	ВопросыПоПодсистеме = ТаблицаВопросов.НайтиСтроки(ПараметрыОтбора);
	ОтветыПоПодсистеме = ТаблицаОтветов.НайтиСтроки(ПараметрыОтбора);
	ЗаполненностьТаблицы = "";
	
	Если ВопросыПоПодсистеме.Количество() = 0 Тогда
		ЗаполненностьТаблицы = НСтр("ru = 'Не требуется'");
	ИначеЕсли ОтветыПоПодсистеме.Количество() = 0 Тогда
		ЗаполненностьТаблицы = НСтр("ru = 'Не заполнено'");
	КонецЕсли;
	
	Если ПустаяСтрока(ЗаполненностьТаблицы) Тогда
		ЗаполненностьТаблицы = 0;
	КонецЕсли;
		КоличествоВопросов = 0;
		КоличествоОтветов = 0;
		Для Каждого Вопрос Из ВопросыПоПодсистеме Цикл
			// проанализируем тип
			Если СтрНайти(Вопрос.ТипВопроса, "ВыборОбъектов") > 0 И СтрНайти(Вопрос.ТипВопроса, "Подсистемы") = 0 Тогда
				ЗаполненностьТаблицы = 1;
			Иначе
				КоличествоВопросов = КоличествоВопросов + 1;
			КонецЕсли;
			
			// Попробуем по номеру найти ответ.
			
			НомерВопроса = Вопрос.НомерВопроса;
			
			Для Каждого Ответ Из ОтветыПоПодсистеме Цикл
				Если Ответ.НомерВопроса = НомерВопроса Тогда
					Если СтрНайти(Ответ.ТипВопроса, "ВыборОбъектов") > 0 И СтрНайти(Ответ.ТипВопроса, "Подсистемы") = 0 Тогда
						ЗаполненностьТаблицы = ЗаполненностьТаблицы - 1;
					Иначе
						КоличествоОтветов  = КоличествоОтветов + 1;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	
	Если ПоТаблице Тогда
		Если ТипЗнч(ЗаполненностьТаблицы) = Тип("Число") Тогда
			Если ЗаполненностьТаблицы = 0 Тогда
				Возврат Истина;
			Иначе
				Возврат Ложь;
			КонецЕсли;
		Иначе
			Возврат ЗаполненностьТаблицы = НСтр("ru = 'Не требуется'");
		КонецЕсли;
		
	Иначе		
		Возврат КоличествоВопросов - КоличествоОтветов;
	КонецЕсли;
КонецФункции

&НаСервере
Функция ПолучитьСтруктуруВопросов()
	ТаблицаВопросов = Новый ТаблицаЗначений;
	ТаблицаВопросов.Колонки.Добавить("Подсистема");
	ТаблицаВопросов.Колонки.Добавить("НомерВопроса");
	ТаблицаВопросов.Колонки.Добавить("ТипВопроса");
	ТаблицаВопросов.Колонки.Добавить("Параметр");
	
	ТекстМакета = РеквизитФормыВЗначение("Объект").ПолучитьМакет("ЭлектронныйВопросник");
	ВременныйФайл = КаталогВременныхФайлов() + "Вопросник.xml";
	ТекстМакета.Записать(ВременныйФайл);
	ИмяПодсистемы = "";
	ЧтениеХМЛ = Новый ЧтениеXML;
	ЧтениеХМЛ.ОткрытьФайл(ВременныйФайл);
	
	Пока ЧтениеХМЛ.Прочитать() Цикл
		
		Если ЧтениеХМЛ.ЛокальноеИмя = "Подсистема" 
			И ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			
			ИмяПодсистемы = ЧтениеХМЛ.ПолучитьАтрибут("Имя");
			
		КонецЕсли;
		
		Если ЧтениеХМЛ.ЛокальноеИмя = "Вопрос" 
			И ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда 
			
			Параметр = ЧтениеХМЛ.ПолучитьАтрибут("Параметр");
			
			СтрокаТаблицыВопросов              = ТаблицаВопросов.Добавить();
			СтрокаТаблицыВопросов.Подсистема   = ИмяПодсистемы;
			СтрокаТаблицыВопросов.НомерВопроса = ЧтениеХМЛ.ПолучитьАтрибут("НомерПП");
			СтрокаТаблицыВопросов.ТипВопроса   = ЧтениеХМЛ.ПолучитьАтрибут("Тип");
			СтрокаТаблицыВопросов.Параметр     = ?(Параметр = Неопределено, "", Параметр);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаВопросов;
КонецФункции

&НаСервере
Функция ЭтоДопВопрос(ИмяВопроса)
	Если СтрНайти(ИмяВопроса, "[")Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

&НаСервере
Процедура ЗаписатьОтветыВоВременныйФайл(СтруктураОбъектов)
	
	ТекстXML = Новый ЧтениеXML;
	ТекстXML.ОткрытьФайл(ПутьКВременномуФайлуДанных);
	ПостроительDOM = Новый ПостроительDOM;
	ДокументDOM = ПостроительDOM.Прочитать(ТекстXML);
	ТекстXML.Закрыть();
	
	СписокЭлементов = ДокументDOM.ПолучитьЭлементыПоИмени("Вопрос");
	
	Если СписокЭлементов.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	// Запись ответов на вопросы.
	Для ИтерацияЭлементов = 0 По СписокЭлементов.Количество() - 1 Цикл
		
		ТекущийЭлементDOM = СписокЭлементов.Элемент(ИтерацияЭлементов);
		
		СписокАтрибутов = ТекущийЭлементDOM.Атрибуты;
		Если СписокАтрибутов.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяВопроса = "";
		Для Каждого Атрибут Из СписокАтрибутов Цикл
			Если Атрибут.ИмяУзла = "НомерПП" Тогда
				ИмяВопроса = Атрибут.ЗначениеУзла;
			КонецЕсли;
		КонецЦикла;
		
		Если ПустаяСтрока(ИмяВопроса) Тогда 
			Продолжить;
		КонецЕсли;
		
		ПараметрыОтбора = Новый Структура("НомерВопроса", ИмяВопроса);
		СтрокаСОтветами = СтруктураОбъектов.НайтиСтроки(ПараметрыОтбора);
		Если СтрокаСОтветами.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаОтветов = СтрокаСОтветами[0].Объект;
		Если Не ПустаяСтрока(СтрокаОтветов) Тогда
			СписокДочерних = ТекущийЭлементDOM.ПолучитьЭлементыПоИмени("*");
			Для Каждого ДочернийЭлемент Из СписокДочерних Цикл 
				Если ДочернийЭлемент.ИмяУзла = "Ответ" Тогда 
					ДочернийЭлемент.ДобавитьДочерний(ДокументDOM.СоздатьТекстовыйУзел(СтрокаОтветов));
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	// Запись ответов на подчиненные вопросы.
	Для Каждого ВопросОтвет Из СтруктураОбъектов Цикл
		
		Если ЭтоДопВопрос(ВопросОтвет.НомерВопроса) Тогда
			
			СтруктураДопВопроса = РеквизитФормыВЗначение("Объект").ПолучитьСтруктуруДопВопроса(ВопросОтвет.НомерВопроса);
			
			СтрокаЗаголовка = "НомерПППодчиненный";
			СтрокаПараметра = "ОбъектОтвета";
			СтрокаОтвета = "Ответ";
			
			СписокЭлементов = ДокументDOM.ПолучитьЭлементыПоИмени("Вопрос");
	
			Если СписокЭлементов.Количество() = 0 Тогда 
				Возврат;
			КонецЕсли;
			
			Для ИтерацияЭлементов = 0 По СписокЭлементов.Количество() - 1 Цикл 
				СписокАтрибутов = СписокЭлементов.Элемент(ИтерацияЭлементов).Атрибуты;
				
				Если СписокАтрибутов.Количество() = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				Для ИтерацияАтрибутов = 0 По СписокАтрибутов.Количество() - 1 Цикл
					
					Если СписокАтрибутов.Элемент(ИтерацияАтрибутов).Имя <> "НомерПП" Тогда
						Продолжить;
					КонецЕсли;
					
					Если СписокАтрибутов.Элемент(ИтерацияАтрибутов).Значение <> СтруктураДопВопроса.ИмяВопросаРодителя Тогда 
						Продолжить;
					КонецЕсли;
					
					ЭлементDOM = ДокументDOM.СоздатьЭлемент("НомерПППодчиненный");
					ЭлементDOM.ДобавитьДочерний(ДокументDOM.СоздатьТекстовыйУзел(СтруктураДопВопроса.ИмяДополнительногоВопроса));
					СписокЭлементов.Элемент(ИтерацияЭлементов).ДобавитьДочерний(ЭлементDOM);
					
					ЭлементDOM = ДокументDOM.СоздатьЭлемент("ОбъектОтвета");
					ЭлементDOM.ДобавитьДочерний(ДокументDOM.СоздатьТекстовыйУзел(СтруктураДопВопроса.ОбъектДопВопроса));
					СписокЭлементов.Элемент(ИтерацияЭлементов).ДобавитьДочерний(ЭлементDOM);
					
					ЭлементDOM = ДокументDOM.СоздатьЭлемент("Ответ");
					ЭлементDOM.ДобавитьДочерний(ДокументDOM.СоздатьТекстовыйУзел(ВопросОтвет.Объект));
					СписокЭлементов.Элемент(ИтерацияЭлементов).ДобавитьДочерний(ЭлементDOM);
					
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ПутьКВременномуФайлуДанных);
	
	ЗаписьDOM = Новый ЗаписьDOM; 
	ЗаписьDOM.Записать(ДокументDOM, ЗаписьXML);
	
	ЗаписьXML.Закрыть();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСтруктуруОтветов()
	ТаблицаОтветов = Новый ТаблицаЗначений;
	ТаблицаОтветов.Колонки.Добавить("Подсистема");
	ТаблицаОтветов.Колонки.Добавить("НомерВопроса");
	ТаблицаОтветов.Колонки.Добавить("ТипВопроса");
	ТаблицаОтветов.Колонки.Добавить("Параметр");
	
	ЧтениеХМЛ = Новый ЧтениеXML;

	Если Не ПустаяСтрока(ПутьКФайлу) Тогда	
		ЧтениеХМЛ.ОткрытьФайл(ПутьКФайлу);
	Иначе
		Если ПустаяСтрока(ПутьКВременномуФайлуДанных) Тогда
			ПутьКВременномуФайлуДанных = ПолучитьИмяВременногоФайла("xml");
		КонецЕсли;
		
		ФайлОтветов = Новый Файл(ПутьКВременномуФайлуДанных);
		Если Не ФайлОтветов.Существует() Тогда 
			РеквизитФормыВЗначение("Объект").СохранитьСписокПодсистемВФайл(СписокИспользуемыхПодсистем, ПутьКВременномуФайлуДанных);
			СтруктураОбъектов = РеквизитФормыВЗначение("Объект").ОпределитьОбъектыВстраиванияПодсистем(СписокИспользуемыхПодсистем);
			ЗаписатьОтветыВоВременныйФайл(СтруктураОбъектов);
		КонецЕсли;
		ЧтениеХМЛ.ОткрытьФайл(ПутьКВременномуФайлуДанных);
	КонецЕсли;
		НомерВопроса  = "";
		ТипВопроса    = "";
		ИмяПодсистемы = "";
		Параметр      = "";
		Пока ЧтениеХМЛ.Прочитать() Цикл
			
			Если ЧтениеХМЛ.ЛокальноеИмя = "Подсистема" 
				И ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				
					ИмяПодсистемы = ЧтениеХМЛ.ПолучитьАтрибут("Имя");
			КонецЕсли;
			
			Если ЧтениеХМЛ.ЛокальноеИмя = "Вопрос" 
				И ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				
				НомерВопроса = ЧтениеХМЛ.ПолучитьАтрибут("НомерПП");
				ТипВопроса = ЧтениеХМЛ.ПолучитьАтрибут("Тип");
				
				Параметр = ЧтениеХМЛ.ПолучитьАтрибут("Параметр");
				Параметр = ?(Параметр = Неопределено, "", Параметр);
			КонецЕсли;
				
			Если ЧтениеХМЛ.ЛокальноеИмя = "Ответ" 
				И ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента  Тогда
				
				ЧтениеХМЛ.Прочитать();
				
				Если Не ПустаяСтрока(ЧтениеХМЛ.Значение) Тогда
					СтрокаОтветов              = ТаблицаОтветов.Добавить();
					СтрокаОтветов.Подсистема   = ИмяПодсистемы;
					СтрокаОтветов.НомерВопроса = НомерВопроса;
					СтрокаОтветов.ТипВопроса   = ТипВопроса;
					СтрокаОтветов.Параметр     = Параметр;
				КонецЕсли;
			КонецЕсли;
			
			Если ЧтениеХМЛ.ЛокальноеИмя = "Вопрос"
				И ЧтениеХМЛ.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
				
				НомерВопроса = "";
				ТипВопроса = "";
			КонецЕсли;
		КонецЦикла;
	Возврат ТаблицаОтветов;
КонецФункции

&НаКлиенте
Процедура ЗагрузитьПодсистемыИзФайла()
	Текст = Новый ТекстовыйДокумент;
	Текст.Прочитать(ПутьКФайлу);
	ЗагрузитьСписокПодсистем(Текст);
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьСписокПодсистем(Текст = "")
	// Сначала выведем список подсистем, которые есть у нас в макете. 
	// После этого проставим галочки у тех, кто встретился в файле.
	
	ВременныйФайл = КаталогВременныхФайлов() + "Настройки.xml";
	ЧтениеХМЛ = Новый ЧтениеXML;
	Макет = РеквизитФормыВЗначение("Объект").ПолучитьМакет("ЭлектронныйВопросник");
	Макет.Записать(ВременныйФайл);
	
	ЧтениеХМЛ.ОткрытьФайл(ВременныйФайл);
	
	// очистим данные формы
	ОпциональныеПодсистемы.Очистить();
	
	// Вызовем процедуру зачитки списка подсистем.
	Пока ЧтениеХМЛ.Прочитать() Цикл
		
		Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			
			Если ЧтениеХМЛ.ЛокальноеИмя = "Подсистема" Тогда
				
				Если ЧтениеХМЛ.ПолучитьАтрибут("Скрытая") <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				// Заполнение из макета подсистем необязательных для внедрения.
				СтрокаПодсистемы 				= ОпциональныеПодсистемы.Добавить();
				СтрокаПодсистемы.Подсистема		= ЧтениеХМЛ.ПолучитьАтрибут("Имя");
				СтрокаПодсистемы.Представление	= ЧтениеХМЛ.ПолучитьАтрибут("Представление");
				СтрокаПодсистемы.Обязательная	= ЧтениеХМЛ.ПолучитьАтрибут("Обязательная");
				СтрокаПодсистемы.Выбрать 		= СтрокаПодсистемы.Обязательная;
				СтрокаПодсистемы.Зависимые		= ЧтениеХМЛ.ПолучитьАтрибут("ЗависимыеПодсистемы");
				
			ИначеЕсли ЧтениеХМЛ.Имя = "Описание" Тогда
				
				ЧтениеХМЛ.Прочитать();
				СтрокаПодсистемы.Описание = ЧтениеХМЛ.Значение;
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	ОпциональныеПодсистемы.Сортировать("Представление");
	
	ЧтениеХМЛ.Закрыть();
	
	Если Не ПустаяСтрока(Текст) Тогда
		Текст.Записать(ВременныйФайл);
		ЧтениеХМЛ.ОткрытьФайл(ВременныйФайл);
		Пока ЧтениеХМЛ.Прочитать() Цикл
			Если ЧтениеХМЛ.КоличествоАтрибутов() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЧтениеХМЛ.ПолучитьАтрибут("Скрытая") <> Неопределено Тогда 
				Продолжить;
			КонецЕсли;
			
			Если ЧтениеХМЛ.ЛокальноеИмя = "Подсистема" Тогда
				Если ЧтениеХМЛ.ПолучитьАтрибут("Обязательная") Тогда
				Иначе
					ПараметрыОтбора = Новый Структура("Подсистема", ЧтениеХМЛ.ПолучитьАтрибут("Имя"));
					СтрокиПодсистем = ОпциональныеПодсистемы.НайтиСтроки(ПараметрыОтбора);
					Для Каждого Строка Из СтрокиПодсистем Цикл
						Строка.Выбрать = Истина;
					КонецЦикла;
				КонецЕсли;
				СтрокаПодсистемы.Зависимые = ЧтениеХМЛ.ПолучитьАтрибут("ЗависимыеПодсистемы");
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	ЧтениеХМЛ.Закрыть();
	УдалитьФайлы(ВременныйФайл);
КонецПроцедуры

&НаСервере
Процедура СохранитьСписокПодсистемВФайл()
	ПутьКФайлуСОтветами = ПолучитьИмяФайлаСОтветами();
	СписокПодсистем = ПолучитьСписокВыбранныхПодсистем();
	РеквизитФормыВЗначение("Объект").СохранитьСписокПодсистемВФайл(СписокПодсистем, ПутьКФайлуСОтветами);
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокВыбранныхПодсистем()
	
	СписокПодсистем = Новый СписокЗначений;
	
	Для Каждого СтрокаОпциональная Из ОпциональныеПодсистемы Цикл
		Если СтрокаОпциональная.Выбрать Тогда
			СписокПодсистем.Добавить(СтрокаОпциональная.Подсистема);
		КонецЕсли;
	КонецЦикла;
	
	Если СписокПодсистем.Количество() = 0 Тогда
		
		Для Каждого СтрокаТаблицы Из  СводкаПоВнедрениюПодсистем Цикл
			СписокПодсистем.Добавить(СтрокаТаблицы.НаименованиеПодсистемы);
		КонецЦикла;
	КонецЕсли;
	Возврат СписокПодсистем;
КонецФункции

&НаКлиенте
Процедура ОбработкаВыбораСпискаПодсистем()
	Если ПроверитьВводФайла() Тогда
		
		Если ПустаяСтрока(ПутьКФайлу) Тогда
			ТекстПредупреждения = НСтр("ru = 'Не задан файл с информацией о принятых решениях по внедрению'");
			СообщитьПользователю(ТекстПредупреждения, "ПутьКФайлу");
			Возврат;
		КонецЕсли;
		
		СохранитьСписокПодсистемВФайл();
		Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницыПомощника.ПодчиненныеЭлементы.НачальнаяСтраницаПомощника;
		Элементы.СтраницыВыбораФайлаИПоясняющейНадписи.ТекущаяСтраница = Элементы.СтраницыВыбораФайлаИПоясняющейНадписи.ПодчиненныеЭлементы.СтраницаПоясненийВторогоЭтапа;
		НомерЭтапа = 2;
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриСменеСтраницы(ТекущаяСтраница)
	Если ТекущаяСтраница = Элементы.СтраницыПомощника.ПодчиненныеЭлементы.НачальнаяСтраницаПомощника Тогда
		Если Не ПустаяСтрока(ПутьКВременномуФайлуДанных) И ПустаяСтрока(ПутьКФайлу) Тогда
			Элементы.СохранитьРешенияВФайл.Видимость = Истина;
		Иначе
			Элементы.СохранитьРешенияВФайл.Видимость = Ложь;
		КонецЕсли;
		Элементы.КнопкаНазад.Доступность = Ложь;
	КонецЕсли;
	
	Если ТекущаяСтраница = Элементы.СтраницыПомощника.ПодчиненныеЭлементы.НачальнаяСтраницаПомощника Тогда
		Элементы.КнопкаНазад.Доступность = Истина;
	КонецЕсли;
	
	Если ТекущаяСтраница = Элементы.СтраницыПомощника.ПодчиненныеЭлементы.НачальнаяСтраницаПомощника Тогда
		Элементы.КнопкаНазад.Доступность = Истина;
	КонецЕсли;
	ВидимостьКнопок();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗначениями(СписокОбъектов)
	Для Каждого ВыбранныйТип Из СписокОбъектов Цикл
		ВыбранноеЗначение = ВыбранныйТип.Значение;
		ОбъектныйОтвет.Добавить(ВыбранноеЗначение);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СформироватьОтчет()
	
	КоличествоОшибокОтчетТаблицы 		= 0;
	КоличествоОшибокОтчетаОВнедрении 	= 0;
	КоличествоОшибок 					= 0;
	КоличествоУточнений 				= 0;
	
	ПроцедурыКлиентскойПроверки.Очистить();
	
	ПутьКФайлуСОтветами = ПолучитьИмяФайлаСОтветами();
	
	Текст = Новый ТекстовыйДокумент;
	Текст.Прочитать(ПутьКФайлуСОтветами);
	
	СформироватьОтчетСервер(Текст);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьИмяФайлаСОтветами()
	
	ПутьКФайлуСОтветами = ?(ПустаяСтрока(ПутьКФайлу), ПутьКВременномуФайлуДанных, ПутьКФайлу);
	ПутьКФайлуСОтветами = ?(ПустаяСтрока(ПутьКФайлуСОтветами), ПолучитьИмяВременногоФайла("xml"), ПутьКФайлуСОтветами);
	Возврат ПутьКФайлуСОтветами;
	
КонецФункции

&НаСервере
Процедура СформироватьОтчетСервер(Текст)
	
	ДатаПроверки = ТекущаяДатаСеанса();
	СводкаОтчета = Новый ТабличныйДокумент;
	
	Если ЗапуститьИЗавершить Тогда
		ПолучитьСтруктуруОтветов();
		Текст = Новый ТекстовыйДокумент;
		Текст.Прочитать(ПолучитьИмяФайлаСОтветами());
	КонецЕсли;
	
	СтруктураОтвета = РеквизитФормыВЗначение("Объект").СформироватьОтчетСервер(Текст, СводкаОтчета, ПолучитьИмяФайлаСОтветами());
	СводкаОтчета = СтруктураОтвета.СводкаОтчета;
	
	КоличествоОшибокОтчетТаблицы 		= СтруктураОтвета.КоличествоОшибокОтчетТаблицы;
	КоличествоОшибокОтчетаОВнедрении 	= СтруктураОтвета.КоличествоОшибокОтчетаОВнедрении;
	КоличествоОшибок 					= КоличествоОшибокОтчетТаблицы + КоличествоОшибокОтчетаОВнедрении; 
	КоличествоУточнений 				= СтруктураОтвета.КоличествоУточнений;
	
	ВывестиКоличествоОшибокИУточнений();
	
	НомерВерсииБСП = СтруктураОтвета.НомерВерсииБСП;
	
	ЗначениеВРеквизитФормы(СтруктураОтвета.СтруктураОписанияОшибок, "СтруктураОписанияОшибок");
	ТабличныйОтчет = СтруктураОтвета.ТабличныйОтчет;
	Если ЗапуститьИЗавершить Тогда
		КоличествоОшибокВнедрения = Новый ТекстовыйДокумент;
		ТекстСообщения = ?(КоличествоОшибок = 0, "", НСтр("ru = 'При проверке внедрения были обнаружены ошибки: %1'"));
		Если ЗначениеЗаполнено(ТекстСообщения) Тогда
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", КоличествоОшибок);
		КонецЕсли;
		КоличествоОшибокВнедрения.ДобавитьСтроку(ТекстСообщения);
		
		КоличествоОшибокВнедрения.Записать(Объект.КаталогВыгрузкиМодулей + "\ПомощникВнедрения\КоличествоОшибокВнедрения.txt");
		СводкаОтчета.Записать(Объект.КаталогВыгрузкиМодулей + "\ПомощникВнедрения\СводкаОтчета.mxl");
	КонецЕсли;
	
	АдресСводки = ПоместитьВоВременноеХранилище(СводкаОтчета, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиКоличествоОшибокИУточнений()
	
	Элементы.КоличествоОшибокОтчетТаблицы.Заголовок		= "";
	Элементы.КоличествоОшибокОтчетаОВнедрении.Заголовок = "";
	
	Если КоличествоОшибокОтчетТаблицы > 0 Тогда 
		ЗаголовокКоличествоОшибокОтчетТаблицы = НСтр("ru = '(Количество ошибок = %КоличествоОшибокОтчетТаблицы%)'");
		ЗаголовокКоличествоОшибокОтчетТаблицы = СтрЗаменить(ЗаголовокКоличествоОшибокОтчетТаблицы, "%КоличествоОшибокОтчетТаблицы%", КоличествоОшибокОтчетТаблицы);
		Элементы.КоличествоОшибокОтчетТаблицы.Заголовок = ЗаголовокКоличествоОшибокОтчетТаблицы;
	КонецЕсли;
	
	Если КоличествоОшибокОтчетаОВнедрении > 0 Или КоличествоУточнений > 0 Тогда
		ЗаголовокКоличествоОшибокОтчетаОВнедрении = НСтр("ru = '(Количество: ошибок = %КоличествоОшибокОтчетаОВнедрении%, уточнений = %КоличествоУточнений%)'");
		ЗаголовокКоличествоОшибокОтчетаОВнедрении = СтрЗаменить(ЗаголовокКоличествоОшибокОтчетаОВнедрении, "%КоличествоОшибокОтчетаОВнедрении%", КоличествоОшибокОтчетаОВнедрении);
		ЗаголовокКоличествоОшибокОтчетаОВнедрении = СтрЗаменить(ЗаголовокКоличествоОшибокОтчетаОВнедрении, "%КоличествоУточнений%", КоличествоУточнений);
		Элементы.КоличествоОшибокОтчетаОВнедрении.Заголовок = ЗаголовокКоличествоОшибокОтчетаОВнедрении;
	КонецЕсли;

КонецПроцедуры	

&НаСервере
Функция ПолучитьИмяПользователяИБ()
	Возврат ПользователиИнформационнойБазы.ТекущийПользователь().Имя;
КонецФункции

&НаСервереБезКонтекста
Функция ОткрытКонфигуратор()
	
	МассивСеансов = ПолучитьСеансыИнформационнойБазы();
	Если МассивСеансов.Количество() = 1 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого Сеанс Из МассивСеансов Цикл
		Если ВРег(Сеанс.ИмяПриложения) = ВРег("Designer") Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура ВыгрузитьМодули(ВыгрузитьПринудительно = Ложь)
	
	Если ВыгрузитьПринудительно Тогда
		
		ТекстВопроса = НСтр("ru ='При запуске помощника рекомендуется выгрузить модули конфигурации для проверки. 
		|Выполнить выгрузку сейчас?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьМодулиЗавершение", ЭтотОбъект, ВыгрузитьПринудительно);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса,РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);
		
	Иначе
		
		ВыгрузитьМодулиЗавершение(КодВозвратаДиалога.Да, ВыгрузитьПринудительно);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьМодулиЗавершение(Ответ, ВыгрузитьПринудительно) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		Если ОткрытКонфигуратор() И ВыгрузитьПринудительно Тогда
			ТекстПредупреждения = НСтр("ru = 'Ошибка выгрузки текстов модулей в каталог: открыт Конфигуратор.
			|Закройте конфигуратор и повторите выгрузку.'");
			ОписаниеОповещения = Новый ОписаниеОповещения("СообщитьОбОткрытомКонфигураторе", ЭтотОбъект);
			ПоказатьПредупреждение(ОписаниеОповещения, ТекстПредупреждения);
			
			Возврат;
		Иначе
			Состояние(НСтр("ru = 'Проводится выгрузка модулей в текстовые файлы'"));
		КонецЕсли;
		
		#Если Не ВебКлиент Тогда
			АдресКаталога = КаталогВременныхФайлов() + "ВыгрузкаМодулей";
			Файл = Новый Файл(АдресКаталога);
			Если Не Файл.Существует() Тогда
				СоздатьКаталог(АдресКаталога);
			Иначе
				Если ВыгрузитьПринудительно Тогда
					УдалитьФайлы(АдресКаталога);
					СоздатьКаталог(АдресКаталога);
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ВыгрузитьПринудительно И НайтиФайлы(АдресКаталога, "*.txt").Количество() > 0 Тогда
				Возврат;
			КонецЕсли;
			
			СтрокаСоединения = СтрокаСоединенияИнформационнойБазы();
			ФайловаяБаза = СтрНайти(СтрокаСоединения, "File=");
			ПервыйСимволПути = ФайловаяБаза + 6;
			СтрокаСоединения = Сред(СтрокаСоединения,ПервыйСимволПути);
			ПоследнийСимволПути = СтрНайти(СтрокаСоединения,";");
			СтрокаСоединения = Лев(СтрокаСоединения,ПоследнийСимволПути - 2);
			ПутьКИБ = СтрокаСоединения;
			СтрокаЗапускаПлатформы = КаталогПрограммы() + "1cv8.exe";
			КаталогКонфигурации = ПутьКИБ;
			Пользователь = ПолучитьИмяПользователяИБ();
			Пароль = "";
			
			КоманднаяСтрока = СтрокаЗапускаПлатформы + " DESIGNER /F"""
			+ КаталогКонфигурации + """ /N"""
			+ Пользователь + """ /P""" + Пароль
			+ """ /DumpConfigFiles """ + Объект.КаталогВыгрузкиМодулей
			+ """ -Module /DisableStartupMessages /DisableStartupDialogs";
			ЗапуститьПриложение(КоманднаяСтрока,,Истина);
		#КонецЕсли
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СообщитьОбОткрытомКонфигураторе(ДополнительныеПараметры) Экспорт
	
	Закрыть();
	
КонецПроцедуры

&НаСервере
Функция СформироватьСписокПодсистемНаСервере()
	СписокВнедряемыхПодсистем = Новый СписокЗначений;
	СписокНеВнедряемыхПодсистем = Новый СписокЗначений;
	Макет = РеквизитФормыВЗначение("Объект").ПолучитьМакет("МакетОтчета");
	ТабДок = Новый ТабличныйДокумент;
	
	Для Каждого СтрокаПодсистем Из ОпциональныеПодсистемы Цикл
		Если СтрокаПодсистем.Выбрать Тогда
			СписокВнедряемыхПодсистем.Добавить(СтрокаПодсистем.Подсистема);
		Иначе
			СписокНеВнедряемыхПодсистем.Добавить(СтрокаПодсистем.Подсистема);
		КонецЕсли;
	КонецЦикла;
	
	ВывестиПодсистемыТаблицы(СписокВнедряемыхПодсистем,Макет,ТабДок, Истина);
	ВывестиПодсистемыТаблицы(СписокНеВнедряемыхПодсистем,Макет,ТабДок, Ложь);
	
	ТабДок.ОтображатьСетку = Ложь;
	ТабДок.ОтображатьЗаголовки = Ложь;
	ТабДОк.ТолькоПросмотр = Истина;
	Возврат ТабДок;
КонецФункции

&НаСервере
Процедура ВывестиПодсистемыТаблицы(СписокПодсистем, Макет, ТабДок, ЭтоВнедряемые)
	Область = Макет.ПолучитьОбласть("СтрокаОписанияВопроса");
	Если ЭтоВнедряемые Тогда
		Область.Параметры.ОписаниеВопроса = НСтр("ru ='Список внедряемых подсистем'");
	Иначе
		Область.Параметры.ОписаниеВопроса = НСтр("ru ='Список подсистем, не запланированных к внедрению'");
	КонецЕсли;
	ТабДок.Вывести(Область);
	
	СписокПодсистем.СортироватьПоЗначению();
	
	Для Каждого СтрокаПодсистемы Из СписокПодсистем Цикл
		Область = Макет.ПолучитьОбласть("СтрокаДанныхВопроса");
		ОБласть.Параметры.ДанныеВопроса = СтрокаПодсистемы.Значение;
		ТабДок.Вывести(Область);
	КонецЦикла;
КонецПроцедуры

&НаСервере
// Устанавливает размер шрифта заголовков групп формы для их корректного отображения в интерфейсе 8.2.
//
// Параметры:
//	Форма - УправляемаяФорма - Форма для изменения шрифта заголовков групп.
//	ИменаГрупп - Строка - Список имен групп формы, разделенных запятыми.
//
Процедура УстановитьОтображениеЗаголовковГрупп(Форма)
	
	Если ТекущийВариантИнтерфейсаКлиентскогоПриложения() = ВариантИнтерфейсаКлиентскогоПриложения.Версия8_2 Тогда
		ЖирныйШрифт = Новый Шрифт(,, Истина);
		
		Для Каждого Элемент Из Форма.Элементы Цикл
			Если Тип(Элемент) = Тип("ГруппаФормы") И Элемент.Вид = ВидГруппыФормы.ОбычнаяГруппа
				И Элемент.ОтображатьЗаголовок = Истина И (Элемент.Отображение = ОтображениеОбычнойГруппы.ОбычноеВыделение
				Или Элемент.Отображение = ОтображениеОбычнойГруппы.Нет) Тогда
				Элемент.ШрифтЗаголовка = ЖирныйШрифт;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// Процедуры "зачитки" из конфигурации данных по встроенным подсистемам

&НаКлиенте
Процедура ЗачитатьДанныеВнедренияИзКонфигурации()
	Если ПустаяСтрока(ПутьКФайлу) Тогда
		ПолучитьСписокПодсистем();
	Иначе
		ПолучитьСписокПоставляемыхПодсистем(ПутьКФайлу);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПолучитьСписокПоставляемыхПодсистем(ПутьКФайлу)
	СписокПодсистем = Новый ТаблицаЗначений;
	СписокПодсистем.Колонки.Добавить("Подсистема");
	СписокПодсистем.Колонки.Добавить("Представление");
	ЧтениеХМЛ = Новый ЧтениеXML;
	ЧтениеХМЛ.ОткрытьФайл(ПутьКФайлу);
	
	// Вызовем процедуру зачитки списка подсистем.
	Пока ЧтениеХМЛ.Прочитать() Цикл
		Если ЧтениеХМЛ.КоличествоАтрибутов() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЧтениеХМЛ.ПолучитьАтрибут("Скрытая") <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЧтениеХМЛ.ЛокальноеИмя = "Подсистема" Тогда
			НоваяСтрока = СписокПодсистем.Добавить();
			НоваяСтрока.Подсистема = ЧтениеХМЛ.ПолучитьАтрибут("Имя");
			НоваяСтрока.Представление = ЧтениеХМЛ.ПолучитьАтрибут("Представление");
		КонецЕсли;
	КонецЦикла;
	
	ЧтениеХМЛ.Закрыть();
	ЗначениеВРеквизитФормы(СписокПодсистем, "СписокИспользуемыхПодсистем");
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСписокПодсистем()
	
	ПодсистемаРодительБСП = Метаданные.Подсистемы.Найти("СтандартныеПодсистемы");
	СписокВнедренныхПодсистем = Новый ТаблицаЗначений;
	СписокВнедренныхПодсистем.Колонки.Добавить("Подсистема");
	СписокВнедренныхПодсистем.Колонки.Добавить("Представление");
	Для Каждого Подсистема Из Метаданные.Подсистемы Цикл
		Если Подсистема = ПодсистемаРодительБСП Тогда
			Для Каждого ПоставляемаяПодсистема Из Подсистема.Подсистемы Цикл
				НоваяСтрокаСписка = СписокВнедренныхПодсистем.Добавить();
				НоваяСтрокаСписка.Подсистема = ПоставляемаяПодсистема.Имя;
				НоваяСтрокаСписка.Представление = ПоставляемаяПодсистема.Синоним;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	ЗначениеВРеквизитФормы(СписокВнедренныхПодсистем, "СписокИспользуемыхПодсистем");
	
КонецПроцедуры

&НаСервере
Функция ПодключитьВнешнююОбработку(АдресХранилища)
	Возврат ВнешниеОбработки.Подключить(АдресХранилища,,Ложь);
КонецФункции         

&НаСервере
Функция ОтметитьСписокЗависимыхПодсистем(ИмяПодсистемы)
	Макет = РеквизитФормыВЗначение("Объект").ПолучитьМакет("ЭлектронныйВопросник");
	ИмяВременногоФайла = КаталогВременныхФайлов()+"ЭлектронныйВопросник.xml";
	Макет.Записать(ИмяВременногоФайла);
	ЧтениеХМЛ = Новый ЧтениеXML;
	ЧтениеХМЛ.ОткрытьФайл(ИмяВременногоФайла);
	МассивПодсистем = Новый Массив;
	Пока ЧтениеХМЛ.Прочитать() Цикл
		Если ЧтениеХМЛ.ЛокальноеИмя = "Подсистема" И ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента
			И ЧтениеХМЛ.ПолучитьАтрибут("Имя") = ИмяПодсистемы Тогда
			СтрокаЗависимыхПодсистем = ЧтениеХМЛ.ПолучитьАтрибут("ЗависимыеПодсистемы");
			Если ПустаяСтрока(СтрокаЗависимыхПодсистем) Тогда
				Возврат "";
			Иначе
				МассивПодсистем = РеквизитФормыВЗначение("Объект").РазложитьСтрокуВМассивПодстрок(СтрокаЗависимыхПодсистем);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если МассивПодсистем.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;
	СтрокаОповещения = "";
	Для Каждого ЗависимаяПодсистема Из МассивПодсистем Цикл
		Если ОтметитьПодсистему(ЗависимаяПодсистема, ИмяПодсистемы) Тогда
			СтрокаОповещения = ?(ПустаяСтрока(СтрокаОповещения), ЗависимаяПодсистема, СтрокаОповещения + ", "+ЗависимаяПодсистема);
		КонецЕсли;
	КонецЦикла;
	Возврат СтрокаОповещения;
КонецФункции

&НаСервере
Функция ОтметитьПодсистему(ИмяПодсистемы, ЗависящаяПодсистема)
	ПараметрыОтбора = Новый Структура("Подсистема", ИмяПодсистемы);
	
	СтрокиСПроцедурой = ОпциональныеПодсистемы.НайтиСтроки(ПараметрыОтбора);
	
	Если СтрокиСПроцедурой.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Недопустимое значение атрибута ЗависимыеПодсистемы для подсистемы: %1. (%2)'");
		ТекстСообщения = РеквизитФормыВЗначение("Объект").ПодставитьПараметрыВСтроку(ТекстСообщения, ЗависящаяПодсистема, ИмяПодсистемы);
		СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого Строка Из СтрокиСПроцедурой Цикл
		Строка.Выбрать = Истина;
	КонецЦикла;
	Возврат Истина;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура СообщитьПользователю(Знач Текст, Знач Поле = "")
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = Текст;
	Сообщение.Поле = Поле;
	Сообщение.Сообщить();
	
КонецПроцедуры

&НаСервере
Функция ПроверитьВерсиюИРежимСовместимостиПлатформы()
	
	Информация = Новый СистемнаяИнформация;
	Если Не (Лев(Информация.ВерсияПриложения, 3) = "8.3"
		И (Метаданные.РежимСовместимости = Метаданные.СвойстваОбъектов.РежимСовместимости.НеИспользовать
		Или (Метаданные.РежимСовместимости <> Метаданные.СвойстваОбъектов.РежимСовместимости.Версия8_1
		И Метаданные.РежимСовместимости <> Метаданные.СвойстваОбъектов.РежимСовместимости.Версия8_2_13
		И Метаданные.РежимСовместимости <> Метаданные.СвойстваОбъектов.РежимСовместимости["Версия8_2_16"]
		И Метаданные.РежимСовместимости <> Метаданные.СвойстваОбъектов.РежимСовместимости["Версия8_3_1"]
		И Метаданные.РежимСовместимости <> Метаданные.СвойстваОбъектов.РежимСовместимости["Версия8_3_2"]))) Тогда
		
		ВызватьИсключение НСтр("ru = 'Обработка предназначена для запуска на версии платформы
			|1С:Предприятие 8.3 с отключенным режимом совместимости или выше'");
		
	КонецЕсли;
	
	Если Метаданные.РежимИспользованияСинхронныхВызововРасширенийИВнешнихКомпонент
		= Метаданные.СвойстваОбъектов.РежимИспользованияСинхронныхВызововРасширенийИВнешнихКомпонент.НеИспользовать Тогда
		
		ВызватьИсключение НСтр("ru = 'Для запуска обработки свойство конфигурации
			|""Режим использования синхронных вызовов расширений и внешних компонент""
			|должно быть установлено в значение ""Использовать"" или ""Использовать с предупреждениями"".'");
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ПроверитьВерсиюБСП()
	
	Попытка
		ВерсияБСПВМетаданных = Вычислить("СтандартныеПодсистемыСервер.ВерсияБиблиотеки()");
	Исключение
		Возврат; // Если в конфигурацию еще не встроена БСП, то проверку не выполняем.
	КонецПопытки;
	
	ПроверяемаяВерсияБСП = РеквизитФормыВЗначение("Объект").ПроверяемаяВерсияБСП();
	
	ВерсияБСПВМетаданныхБезНомераСборки = ВерсияБезНомераСборки(ВерсияБСПВМетаданных);
	ПроверяемаяВерсияБСПБезНомераСборки = ВерсияБезНомераСборки(ПроверяемаяВерсияБСП);
	
	Если ВерсияБСПВМетаданныхБезНомераСборки <> ПроверяемаяВерсияБСПБезНомераСборки Тогда
		
		ВызватьИсключение РеквизитФормыВЗначение("Объект").ПодставитьПараметрыВСтроку(НСтр("ru = 'Помощник внедрения БСП предназначен для версии %1. Версия БСП в конфигурации %2.
			|Для корректной проверки используйте актуальную версию помощника внедрения.'"),
			ПроверяемаяВерсияБСПБезНомераСборки, ВерсияБСПВМетаданных);
		
	ИначеЕсли ПроверяемаяВерсияБСП <> ВерсияБСПВМетаданных Тогда
		
		СтруктураПроверкиВерсии = Новый Структура;
		СтруктураПроверкиВерсии.Вставить("ПроверяемаяВерсияБСП", ПроверяемаяВерсияБСП);
		СтруктураПроверкиВерсии.Вставить("ВерсияБСПВМетаданных", ВерсияБСПВМетаданных);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВерсияБезНомераСборки(Знач Версия)
	
	ЗначениеОбъекта = РеквизитФормыВЗначение("Объект");
	
	МассивВерсии = ЗначениеОбъекта.РазложитьСтрокуВМассивПодстрок(Версия, ".");
	МассивВерсии.Удалить(3);
	
	Возврат ЗначениеОбъекта.СтрокаИзМассиваПодстрок(МассивВерсии, ".");
	
КонецФункции

#КонецОбласти
