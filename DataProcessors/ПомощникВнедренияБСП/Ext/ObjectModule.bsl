#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

// Вспомогательные переменные
Перем СводкаОтчета, СоответствиеВопросовНомерамКолонок, ТекстовыеВопросы, ТаблицаОтчета;
Перем ПутьКФайлу, СтруктураОписанияОшибок, СоответствиеОбъектовПодсистемам, ОписаниеТекстовыхОшибок;
Перем КоличествоОшибокОтчетТаблицы, КоличествоОшибокОтчетаОВнедрении, КоличествоУточнений;

#Область ДляВсехПодсистем

Функция ПроверяемаяВерсияБСП() Экспорт
	
	Возврат "2.3.1.88";
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Проверки внедрения подсистем.
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Состав планов обмена конфигурации (общие проверки для всех подсистем).

// РИБ

// Процедура-обработчик получения объектов метаданных обязательных для планов обмена РИБ.
// Если подсистема имеет объекты метаданных обязательные для включения в состав планов обмена РИБ,
// то в параметр <Объект> необходимо добавить эти объекты.
//
// Параметры:
//   Объекты - Строка - массив полных имен объектов метаданных конфигурации.
//                      Строка получается методом ПолноеИмя() для объекта метаданного.
//                      Например, "Справочник.<Имя справочника>", "Документ.<Имя документа>".
//
Процедура ПолучитьОбязательныеОбъектыПланаОбменаРИБ(Объекты)
	
	// СтандартныеПодсистемы.БазоваяФункциональность
	Объекты.Добавить("Справочник.ИдентификаторыОбъектовМетаданных");
	// Конец СтандартныеПодсистемы.БазоваяФункциональность
	
	// СтандартныеПодсистемы.ГрафикиРаботы
	Объекты.Добавить("Справочник.Календари");
	Объекты.Добавить("РегистрСведений.КалендарныеГрафики");
	// Конец СтандартныеПодсистемы.ГрафикиРаботы
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	Объекты.Добавить("Константа.ИспользоватьДатыЗапретаЗагрузки");
	Объекты.Добавить("Константа.ИспользоватьДатыЗапретаИзменения");
	Объекты.Добавить("РегистрСведений.ДатыЗапретаИзменения");
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.КалендарныеГрафики
	Объекты.Добавить("Справочник.ПроизводственныеКалендари");
	Объекты.Добавить("РегистрСведений.ДанныеПроизводственногоКалендаря");
	// Конец СтандартныеПодсистемы.КалендарныеГрафики
	
	// СтандартныеПодсистемы.ВариантыОтчетов
	Объекты.Добавить("Константа.ПараметрыВариантовОтчетов");
	Объекты.Добавить("Справочник.ВариантыОтчетов");
	Объекты.Добавить("Справочник.ПредопределенныеВариантыОтчетов");
	Объекты.Добавить("РегистрСведений.НастройкиВариантовОтчетов");
	// Конец СтандартныеПодсистемы.ВариантыОтчетов
	
	// СтандартныеПодсистемы.ПрисоединенныеФайлы
	Объекты.Добавить("РегистрСведений.НаличиеПрисоединенныхФайлов");
	// Конец СтандартныеПодсистемы.ПрисоединенныеФайлы
	
	// СтандартныеПодсистемы.РаботаСФайлами
	Объекты.Добавить("Справочник.ВерсииФайлов");
	Объекты.Добавить("Справочник.ПапкиФайлов");
	Объекты.Добавить("Справочник.Файлы");
	Объекты.Добавить("РегистрСведений.КодировкиВерсийФайлов");
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
КонецПроцедуры

// Процедура-обработчик получения объектов метаданных, которые являются исключениями из состава планов обмена РИБ.
// Если подсистема имеет объекты метаданных, которые являются исключениями из состава планов обмена РИБ,
// то в параметр <Объект> необходимо добавить эти объекты.
//
// Параметры:
//   Объекты - Строка - массив полных имен объектов метаданных конфигурации.
//                      Строка получается методом ПолноеИмя() для объекта метаданного.
//                      Например, "Справочник.<Имя справочника>", "Документ.<Имя документа>".
//
Процедура ПолучитьОбъектыИсключенияПланаОбменаРИБ(Объекты)
	
	// СтандартныеПодсистемы.БазоваяФункциональность
	Объекты.Добавить("Константа.ЗаголовокСистемы");
	Объекты.Добавить("Константа.ИспользоватьРазделениеПоОбластямДанных");
	Объекты.Добавить("Константа.НеИспользоватьРазделениеПоОбластямДанных");
	Объекты.Добавить("Константа.ЭтоАвтономноеРабочееМесто");
	Объекты.Добавить("Справочник.ВерсииРасширений");
	Объекты.Добавить("Справочник.ИдентификаторыОбъектовРасширений");
	Объекты.Добавить("РегистрСведений.ИдентификаторыОбъектовВерсийРасширений");
	Объекты.Добавить("РегистрСведений.КэшПрограммныхИнтерфейсов");
	Объекты.Добавить("РегистрСведений.ПараметрыРаботыВерсийРасширений");
	Объекты.Добавить("РегистрСведений.СеансыВерсийРасширений");
	// Конец СтандартныеПодсистемы.БазоваяФункциональность
	
	// СтандартныеПодсистемы.ВариантыОтчетов
	Объекты.Добавить("Справочник.ПредопределенныеВариантыОтчетовРасширений");
	Объекты.Добавить("РегистрСведений.ПредопределенныеВариантыОтчетовВерсийРасширений");
	// Конец СтандартныеПодсистемы.ВариантыОтчетов
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	Объекты.Добавить("Константа.ВерсияДатЗапретаИзменения");
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ЗавершениеРаботыПользователей
	Объекты.Добавить("Константа.ПараметрыАдминистрированияИБ");
	Объекты.Добавить("РегистрСведений.БлокировкиСеансовОбластейДанных");
	// Конец СтандартныеПодсистемы.ЗавершениеРаботыПользователей
	
	// СтандартныеПодсистемы.ОбменДанными
	Объекты.Добавить("Константа.ПовторитьЗагрузкуСообщенияОбменаДаннымиПередЗапуском");
	Объекты.Добавить("Константа.ДатаОбновленияПовторноИспользуемыхЗначенийМРО");
	Объекты.Добавить("Константа.ЗагрузитьСообщениеОбменаДанными");
	Объекты.Добавить("Константа.ИспользоватьСинхронизациюДанных");
	Объекты.Добавить("Константа.ИспользоватьСинхронизациюДанныхВЛокальномРежиме");
	Объекты.Добавить("Константа.ИспользоватьСинхронизациюДанныхВМоделиСервиса");
	Объекты.Добавить("Константа.НастройкаПодчиненногоУзлаРИБЗавершена");
	Объекты.Добавить("Константа.ПрефиксУзлаРаспределеннойИнформационнойБазы");
	Объекты.Добавить("Константа.СообщениеОбменаДаннымиИзГлавногоУзла");
	Объекты.Добавить("Справочник.СценарииОбменовДанными");
	Объекты.Добавить("РегистрСведений.НастройкиТранспортаОбмена");
	Объекты.Добавить("РегистрСведений.ОбщиеНастройкиУзловИнформационныхБаз");
	Объекты.Добавить("РегистрСведений.ПравилаДляОбменаДанными");
	Объекты.Добавить("РегистрСведений.СообщенияОбменаДанными");
	Объекты.Добавить("РегистрСведений.СоответствияОбъектовИнформационныхБаз");
	Объекты.Добавить("РегистрСведений.СостоянияОбменовДанными");
	Объекты.Добавить("РегистрСведений.СостоянияУспешныхОбменовДанными");
	Объекты.Добавить("Константа.КаталогСообщенийОбменаДаннымиДляWindows");
	Объекты.Добавить("Константа.КаталогВременныхФайловДляLinux");
	// Конец СтандартныеПодсистемы.ОбменДанными
	
	// СтандартныеПодсистемы.ОбменСообщениями
	Объекты.Добавить("Константа.БлокировкаОтправкиБыстрыхСообщений");
	Объекты.Добавить("Справочник.СообщенияСистемы");
	Объекты.Добавить("РегистрСведений.НастройкиОтправителя");
	Объекты.Добавить("РегистрСведений.ПодпискиПолучателей");
	// Конец СтандартныеПодсистемы.ОбменСообщениями
	
	// СтандартныеПодсистемы.ОбновлениеВерсииИБ
	Объекты.Добавить("Константа.РазделыОписанияИзмененийСистемы");
	// Конец СтандартныеПодсистемы.ОбновлениеВерсииИБ
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбновлениеВерсииИБВМоделиСервиса
	Объекты.Добавить("РегистрСведений.ВерсииПодсистемОбластейДанных");
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбновлениеВерсииИБВМоделиСервиса
	
	// СтандартныеПодсистемы.ПолучениеФайловИзИнтернета
	Объекты.Добавить("Константа.НастройкаПроксиСервера");
	// Конец СтандартныеПодсистемы.ПолучениеФайловИзИнтернета
	
	// СтандартныеПодсистемы.Пользователи
	Объекты.Добавить("Константа.НастройкиВходаПользователей");
	Объекты.Добавить("РегистрСведений.СведенияОПользователях");
	// Конец СтандартныеПодсистемы.Пользователи
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.БазоваяФункциональностьВМоделиСервиса
	Объекты.Добавить("Константа.КопироватьОбластиДанныхИзЭталонной");
	Объекты.Добавить("Константа.КаталогОбменаФайламиВМоделиСервиса");
	Объекты.Добавить("Константа.КаталогОбменаФайламиВМоделиСервисаLinux");
	Объекты.Добавить("Константа.РазмерБлокаПередачиФайла");
	Объекты.Добавить("Константа.РежимИспользованияИнформационнойБазы");
	Объекты.Добавить("Константа.СообщениеБлокировкиПриОбновленииКонфигурации");
	Объекты.Добавить("РегистрСведений.ОбластиДанных");
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.БазоваяФункциональностьВМоделиСервиса
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ОчередьЗаданий
	Объекты.Добавить("Константа.МаксимальнаяДлительностьВыполненияИсполняющегоФоновогоЗадания");
	Объекты.Добавить("Константа.МаксимальноеКоличествоИсполняющихФоновыхЗаданий");
	Объекты.Добавить("РегистрСведений.ОчередьЗаданий");
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ОчередьЗаданий
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.УдаленноеАдминистрирование
	Объекты.Добавить("Константа.ВнутреннийАдресМенеджераСервиса");
	Объекты.Добавить("Константа.УдалитьИмяСлужебногоПользователяМенеджераСервиса");
	Объекты.Добавить("Константа.КонечнаяТочкаМенеджераСервиса");
	Объекты.Добавить("Константа.УдалитьПарольСлужебногоПользователяМенеджераСервиса");
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.УдаленноеАдминистрирование
	
	// СтандартныеПодсистемы.РаботаСФайлами
	Объекты.Добавить("РегистрСведений.НомераСканированныхФайлов");
	Объекты.Добавить("РегистрСведений.РабочиеКаталогиФайлов");
	Объекты.Добавить("РегистрСведений.ФайлыВРабочемКаталоге");
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
	// СтандартныеПодсистемы.РегламентныеЗадания
	Объекты.Добавить("Константа.НастройкиВыполненияРегламентныхЗаданий");
	// Конец СтандартныеПодсистемы.РегламентныеЗадания
	
	// СтандартныеПодсистемы.ФайловыеФункции
	Объекты.Добавить("Константа.ИзвлекатьТекстыФайловНаСервере");
	Объекты.Добавить("Константа.ХранитьФайлыВТомахНаДиске");
	Объекты.Добавить("Справочник.ТомаХраненияФайлов");
	// Конец СтандартныеПодсистемы.ФайловыеФункции
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	Объекты.Добавить("РегистрСведений.ВерсииОбъектов");
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ЭлектроннаяПодпись
	Объекты.Добавить("Константа.ПроверятьЭлектронныеПодписиНаСервере");
	Объекты.Добавить("Константа.СоздаватьЭлектронныеПодписиНаСервере");
	Объекты.Добавить("Константа.УдалитьАлгоритмПодписи");
	Объекты.Добавить("Константа.УдалитьАлгоритмХеширования");
	Объекты.Добавить("Константа.УдалитьАлгоритмШифрования");
	Объекты.Добавить("Константа.УдалитьПровайдерЭП");
	Объекты.Добавить("Константа.УдалитьТипПровайдераЭП");
	Объекты.Добавить("РегистрСведений.ПутиКПрограммамЭлектроннойПодписиИШифрованияНаСерверахLinux");
	// Конец СтандартныеПодсистемы.ЭлектроннаяПодпись
	
КонецПроцедуры

// Процедура-обработчик получения объектов метаданных,
// данные которых используются только на момент создания начального образа подчиненного узла РИБ.
// Если подсистема имеет объекты метаданных, данные которых используются только на момент создания начального образа,
// то в параметр <Объект> необходимо добавить эти объекты.
//
// Параметры:
// Объекты - Строка - массив полных имен объектов метаданных конфигурации.
// Строка получается методом ПолноеИмя() для объекта метаданного.
// Например, "Справочник.<Имя справочника>", "Документ.<Имя документа>".
//
Процедура ПолучитьОбъектыИспользуемыеТолькоДляНачальногоОбразаРИБ(Объекты)
	
	// СтандартныеПодсистемы.БазоваяФункциональность
	Объекты.Добавить("Константа.ПараметрыСлужебныхСобытий");
	// Конец СтандартныеПодсистемы.БазоваяФункциональность
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	Объекты.Добавить("Константа.ИспользоватьДополнительныеОтчетыИОбработки");
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.ИнформацияПриЗапуске
	Объекты.Добавить("РегистрСведений.ПакетыИнформацииПриЗапуске");
	// Конец СтандартныеПодсистемы.ИнформацияПриЗапуске
	
	// СтандартныеПодсистемы.ОбменДанными
	Объекты.Добавить("Константа.НастройкиПодчиненногоУзлаРИБ");
	// Конец СтандартныеПодсистемы.ОбменДанными
	
	// СтандартныеПодсистемы.ОбновлениеВерсииИБ
	Объекты.Добавить("РегистрСведений.ВерсииПодсистем");
	// Конец СтандартныеПодсистемы.ОбновлениеВерсииИБ
	
	// СтандартныеПодсистемы.Организации
	Объекты.Добавить("Константа.ИспользоватьНесколькоОрганизаций");
	// Конец СтандартныеПодсистемы.Организации
	
	// СтандартныеПодсистемы.ПолнотекстовыйПоиск
	Объекты.Добавить("Константа.ИспользоватьПолнотекстовыйПоиск");
	// Конец СтандартныеПодсистемы.ПолнотекстовыйПоиск
	
	// СтандартныеПодсистемы.Пользователи
	Объекты.Добавить("Константа.ПараметрыРаботыПользователей");
	// Конец СтандартныеПодсистемы.Пользователи
	
	// СтандартныеПодсистемы.ПрисоединенныеФайлы
	Объекты.Добавить("РегистрСведений.ПрисоединенныеФайлы");
	// Конец СтандартныеПодсистемы.ПрисоединенныеФайлы
	
	// СтандартныеПодсистемы.РаботаСФайлами
	Объекты.Добавить("РегистрСведений.ХранимыеФайлыВерсий");
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
	// СтандартныеПодсистемы.Свойства
	Объекты.Добавить("Константа.ПараметрыДополнительныхРеквизитовИСведений");
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Объекты.Добавить("Константа.ПараметрыОграниченияДоступа");
	Объекты.Добавить("РегистрСведений.ПраваРолей");
	Объекты.Добавить("РегистрСведений.ЗависимостиПравДоступа");
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// ТехнологияСервиса.РаботаВМоделиСервиса.ОбменДаннымиВМоделиСервиса
	Если Метаданные.Константы.Найти("АдресДляВосстановленияПароляУчетнойЗаписи") <> Неопределено Тогда
		Объекты.Добавить("Константа.АдресДляВосстановленияПароляУчетнойЗаписи");
	КонецЕсли;
	// Конец ТехнологияСервиса.РаботаВМоделиСервиса.ОбменДаннымиВМоделиСервиса
	
КонецПроцедуры

// Не РИБ

// Процедура-обработчик получения объектов метаданных обязательных для планов обмена Не РИБ.
// Если подсистема имеет объекты метаданных обязательные для включения в состав планов обмена Не РИБ,
// то в параметр <Объект> необходимо добавить эти объекты.
//
// Параметры:
// Объекты - Строка - массив полных имен объектов метаданных конфигурации.
// Строка получается методом ПолноеИмя() для объекта метаданного.
// Например, "Справочник.<Имя справочника>", "Документ.<Имя документа>".
//
Процедура ПолучитьОбязательныеОбъектыПланаОбменаНеРИБ(Объекты)
	
КонецПроцедуры

// Процедура-обработчик получения объектов метаданных, которые являются исключениями из состава планов обмена Не РИБ.
// Если подсистема имеет объекты метаданных, которые являются исключениями из состава планов обмена Не РИБ,
// то в параметр <Объект> необходимо добавить эти объекты.
//
// Параметры:
// Объекты - Строка - массив полных имен объектов метаданных конфигурации.
// Строка получается методом ПолноеИмя() для объекта метаданного.
// Например, "Справочник.<Имя справочника>", "Документ.<Имя документа>".
//
Процедура ПолучитьОбъектыИсключенияПланаОбменаНеРИБ(Объекты)
	
	// СтандартныеПодсистемы.БазоваяФункциональность
	Объекты.Добавить("Константа.ЗаголовокСистемы");
	Объекты.Добавить("Константа.ИспользоватьРазделениеПоОбластямДанных");
	Объекты.Добавить("Константа.КаталогВременныхОбменаДляWindows");
	Объекты.Добавить("Константа.КаталогВременныхОбменаДляLinux");
	Объекты.Добавить("Константа.НеИспользоватьРазделениеПоОбластямДанных");
	Объекты.Добавить("Константа.ПараметрыСлужебныхСобытий");
	Объекты.Добавить("Константа.ЭтоАвтономноеРабочееМесто");
	Объекты.Добавить("Справочник.ВерсииРасширений");
	Объекты.Добавить("Справочник.ИдентификаторыОбъектовМетаданных");
	Объекты.Добавить("Справочник.ИдентификаторыОбъектовРасширений");
	Объекты.Добавить("РегистрСведений.ИдентификаторыОбъектовВерсийРасширений");
	Объекты.Добавить("РегистрСведений.КэшПрограммныхИнтерфейсов");
	Объекты.Добавить("РегистрСведений.ПараметрыРаботыВерсийРасширений");
	Объекты.Добавить("РегистрСведений.СеансыВерсийРасширений");
	// Конец СтандартныеПодсистемы.БазоваяФункциональность
	
	// СтандартныеПодсистемы.ВариантыОтчетов
	Объекты.Добавить("Справочник.ПредопределенныеВариантыОтчетовРасширений");
	Объекты.Добавить("РегистрСведений.ПредопределенныеВариантыОтчетовВерсийРасширений");
	// Конец СтандартныеПодсистемы.ВариантыОтчетов
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	Объекты.Добавить("Константа.ВерсияДатЗапретаИзменения");
	Объекты.Добавить("Константа.ИспользоватьДатыЗапретаЗагрузки");
	Объекты.Добавить("Константа.ИспользоватьДатыЗапретаИзменения");
	Объекты.Добавить("РегистрСведений.ДатыЗапретаИзменения");
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ЗавершениеРаботыПользователей
	Объекты.Добавить("Константа.ПараметрыАдминистрированияИБ");
	Объекты.Добавить("РегистрСведений.БлокировкиСеансовОбластейДанных");
	// Конец СтандартныеПодсистемы.ЗавершениеРаботыПользователей
	
	// СтандартныеПодсистемы.ОбменДанными
	Объекты.Добавить("Константа.ПовторитьЗагрузкуСообщенияОбменаДаннымиПередЗапуском");
	Объекты.Добавить("Константа.ДатаОбновленияПовторноИспользуемыхЗначенийМРО");
	Объекты.Добавить("Константа.ЗагрузитьСообщениеОбменаДанными");
	Объекты.Добавить("Константа.ИспользоватьСинхронизациюДанных");
	Объекты.Добавить("Константа.ИспользоватьСинхронизациюДанныхВЛокальномРежиме");
	Объекты.Добавить("Константа.ИспользоватьСинхронизациюДанныхВМоделиСервиса");
	Объекты.Добавить("Константа.ПрефиксУзлаРаспределеннойИнформационнойБазы");
	Объекты.Добавить("Константа.НастройкаПодчиненногоУзлаРИБЗавершена");
	Объекты.Добавить("Константа.НастройкиПодчиненногоУзлаРИБ");
	Объекты.Добавить("Константа.СообщениеОбменаДаннымиИзГлавногоУзла");
	Объекты.Добавить("Справочник.СценарииОбменовДанными");
	Объекты.Добавить("РегистрСведений.НастройкиТранспортаОбмена");
	Объекты.Добавить("РегистрСведений.ОбщиеНастройкиУзловИнформационныхБаз");
	Объекты.Добавить("РегистрСведений.ПравилаДляОбменаДанными");
	Объекты.Добавить("РегистрСведений.СообщенияОбменаДанными");
	Объекты.Добавить("РегистрСведений.СостоянияОбменовДанными");
	Объекты.Добавить("РегистрСведений.СостоянияУспешныхОбменовДанными");
	// Конец СтандартныеПодсистемы.ОбменДанными
	
	// СтандартныеПодсистемы.ОбновлениеВерсииИБ
	Объекты.Добавить("РегистрСведений.ВерсииПодсистем");
	// Конец СтандартныеПодсистемы.ОбновлениеВерсииИБ
	
	// СтандартныеПодсистемы.Пользователи
	Объекты.Добавить("Константа.ПараметрыРаботыПользователей");
	Объекты.Добавить("Константа.НастройкиВходаПользователей");
	Объекты.Добавить("РегистрСведений.СведенияОПользователях");
	// Конец СтандартныеПодсистемы.Пользователи
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбновлениеВерсииИБВМоделиСервиса
	Объекты.Добавить("РегистрСведений.ВерсииПодсистемОбластейДанных");
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбновлениеВерсииИБВМоделиСервиса
	
	// СтандартныеПодсистемы.РаботаСФайлами
	Объекты.Добавить("РегистрСведений.НомераСканированныхФайлов");
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
	// СтандартныеПодсистемы.РегламентныеЗадания
	Объекты.Добавить("Константа.НастройкиВыполненияРегламентныхЗаданий");
	// Конец СтандартныеПодсистемы.РегламентныеЗадания
	
	// СтандартныеПодсистемы.Свойства
	Объекты.Добавить("Константа.ПараметрыДополнительныхРеквизитовИСведений");
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Объекты.Добавить("Константа.ПараметрыОграниченияДоступа");
	Объекты.Добавить("РегистрСведений.ПраваРолей");
	Объекты.Добавить("РегистрСведений.ЗависимостиПравДоступа");
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ФайловыеФункции
	Объекты.Добавить("Константа.МаксимальныйРазмерФайла");
	Объекты.Добавить("Константа.МаксимальныйРазмерФайлаОбластиДанных");
	Объекты.Добавить("Константа.ИзвлекатьТекстыФайловНаСервере");
	Объекты.Добавить("Константа.ХранитьФайлыВТомахНаДиске");
	Объекты.Добавить("Справочник.ТомаХраненияФайлов");
	// Конец СтандартныеПодсистемы.ФайловыеФункции
	
	// СтандартныеПодсистемы.ЭлектроннаяПодпись
	Объекты.Добавить("Константа.ПроверятьЭлектронныеПодписиНаСервере");
	Объекты.Добавить("Константа.СоздаватьЭлектронныеПодписиНаСервере");
	Объекты.Добавить("Константа.УдалитьАлгоритмПодписи");
	Объекты.Добавить("Константа.УдалитьАлгоритмХеширования");
	Объекты.Добавить("Константа.УдалитьАлгоритмШифрования");
	Объекты.Добавить("Константа.УдалитьПровайдерЭП");
	Объекты.Добавить("Константа.УдалитьТипПровайдераЭП");
	Объекты.Добавить("РегистрСведений.ПутиКПрограммамЭлектроннойПодписиИШифрованияНаСерверахLinux");
	// Конец СтандартныеПодсистемы.ЭлектроннаяПодпись
	
КонецПроцедуры

#КонецОбласти

///////////////////////////////////////////////////////////////////////////////
// Отдельные проверки внедрения подсистем.

#Область АдресныйКлассификатор

Функция Подключаемый_АдресныйКлассификаторПроверитьРазмещениеРегистраАдресныйКлассификатор()
	
	// Регистр сведений для подсистемы "АдресныйКлассификатор" должен присутствовать в командном интерфейсе.
	Возврат ПроверитьРазмещениеВКомандномИнтерфейсе("РегистрСведений.АдресныеОбъекты");
	
КонецФункции

#КонецОбласти

#Область АнализЖурналаРегистрации

Функция Подключаемый_АнализЖурналаРегистрацииПроверитьРазмещениеОтчета()
	Возврат ПроверитьРазмещениеВКомандномИнтерфейсе("Отчет.АнализЖурналаРегистрации");
КонецФункции

#КонецОбласти

#Область Анкетирование

Функция Подключаемый_АнкетированиеПроверитьТипыОтветов()
	МассивФакт = Неопределено;
	ПроверитьТипы(МассивФакт, "ПланыВидовХарактеристик.ВопросыДляАнкетирования.Тип");
	Возврат МассивФакт;
КонецФункции

Функция Подключаемый_АнкетированиеПроверитьТипыРеспондентов()
	МассивФакт = Неопределено;
	ПроверитьТипы(МассивФакт, "ОпределяемыеТипы.Респондент.Тип");
	Возврат МассивФакт;
КонецФункции

Функция Подключаемый_АнкетированиеПроверитьРазмещениеПВХВопросыДляАнкетирования()
	Возврат ПроверитьРазмещениеВКомандномИнтерфейсе("ПланВидовХарактеристик.ВопросыДляАнкетирования");
КонецФункции

Функция Подключаемый_АнкетированиеПроверитьРазмещениеСправочникаШаблоныАнкет()
	Возврат ПроверитьРазмещениеВКомандномИнтерфейсе("Справочник.ШаблоныАнкет");
КонецФункции

Функция Подключаемый_АнкетированиеПроверитьРазмещениеДокументаНазначениеОпросов()
	Возврат ПроверитьРазмещениеВКомандномИнтерфейсе("Документ.НазначениеОпросов");
КонецФункции

Функция Подключаемый_АнкетированиеПроверитьРазмещениеДокументаАнкета()
	Возврат ПроверитьРазмещениеВКомандномИнтерфейсе("Документ.Анкета");
КонецФункции

Функция Подключаемый_АнкетированиеПроверитьРазмещениеОтчетаАнализОпроса()
	Возврат ПроверитьРазмещениеВКомандномИнтерфейсе("Отчет.АнализОпроса");
КонецФункции

Функция Подключаемый_АнкетированиеПроверитьРазмещениеОтчетаАнкетированиеАналитическийОтчет()
	Возврат ПроверитьРазмещениеВКомандномИнтерфейсе("Отчет.АналитическийОтчетПоАнкетированию");
КонецФункции

#КонецОбласти

#Область БазоваяФункциональность

Функция Подключаемый_БазоваяФункциональностьПроверитьРазмещениеОбработкиЖурналРегистрации()
	
	Возврат ПроверитьРазмещениеВКомандномИнтерфейсе("Обработка.ЖурналРегистрации");
	
КонецФункции

Функция Подключаемый_БазоваяФункциональностьПроверитьРазмещениеОбработкиУдалениеПомеченныхОбъектов()
	
	Возврат ПроверитьРазмещениеВКомандномИнтерфейсе("Обработка.УдалениеПомеченныхОбъектов");
	
КонецФункции

#КонецОбласти

#Область БизнесПроцессыИЗадачи

Функция Подключаемый_БизнесПроцессыИЗадачиПроверитьПредметыЗаданий()
	
	ТаблицаПроверки = Неопределено;
	ПроверитьТипы(ТаблицаПроверки, "БизнесПроцессы.Задание.ВводитсяНаОсновании");
	ПроверитьТипы(ТаблицаПроверки, "ОбщиеКоманды.ЗадачиПоПредмету.ТипПараметраКоманды");
	
	ПроверенныеДанные = РазложитьСтрокуВМассивПодстрок(ТаблицаПроверки[0].ПроверенныеДанные);
	УдалитьВсеВхожденияЗначенияИзМассива(ПроверенныеДанные, "Задача.ЗадачаИсполнителя");
	ТаблицаПроверки[0].ПроверенныеДанные = СтрокаИзМассиваПодстрок(ПроверенныеДанные);
	
	Возврат ТаблицаПроверки;
	
КонецФункции

Функция Подключаемый_БизнесПроцессыИЗадачиПроверитьСоставБП()
	
	МассивФакт = Неопределено;
	
	// 1. Состав бизнес-процессов
	ПроверитьТипы(МассивФакт, "ОбщиеКоманды.ЗадачиПоБизнесПроцессу.ТипПараметраКоманды");
	ПроверитьТипы(МассивФакт, "ОбщиеКоманды.КартаМаршрутаБизнесПроцесса.ТипПараметраКоманды");
	
	// 2. Модули менеджеров бизнес-процессов.
	Попытка 
		СоставТиповПроверки = Вычислить("Метаданные.ОбщиеКоманды.ЗадачиПоБизнесПроцессу.ТипПараметраКоманды");
	Исключение
		ТекстСообщения = НСтр("ru = 'В конфигурации отсутствует команда %1. Проверка пропущена.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", "ЗадачиПоБизнесПроцессу");
		СообщитьПользователю(ТекстСообщения);
		Возврат МассивФакт;
	КонецПопытки;
	
	МассивТиповБизнесПроцессов = СоставТиповПроверки.Типы();
	
	МассивБизнесПроцессов = Новый Массив;
	Для Каждого ТипБизнесПроцесса Из МассивТиповБизнесПроцессов Цикл
		МассивБизнесПроцессов.Добавить(Метаданные.НайтиПоТипу(ТипБизнесПроцесса).Имя);
	КонецЦикла;
	  
	БизнесПроцессыПроверитьНаличиеФункции("ФормаВыполненияЗадачи", Ложь, МассивБизнесПроцессов, МассивФакт);
	БизнесПроцессыПроверитьНаличиеФункции("ПриПеренаправленииЗадачи", Истина, МассивБизнесПроцессов, МассивФакт);
	БизнесПроцессыПроверитьНаличиеФункции("ОбработкаВыполненияПоУмолчанию", Истина, МассивБизнесПроцессов, МассивФакт);
	
	Возврат МассивФакт;
	
КонецФункции

Процедура БизнесПроцессыПроверитьНаличиеФункции(ИмяФункцииИлиПроцедуры, ЭтоПроцедура, 
	МассивТиповБизнесПроцессов, РезультатПроверки)
	
	ОписаниеТипов = Новый Массив;
	Для каждого ТипБизнесПроцесса Из МассивТиповБизнесПроцессов Цикл
		ИмяМодуля = "БизнесПроцесс." + Строка(ТипБизнесПроцесса) + ".МодульМенеджера";
		РезультатПоиска = НайтиПроцедуруМодуля(ИмяМодуля, ИмяФункцииИлиПроцедуры, ЭтоПроцедура);
		Если ПустаяСтрока(РезультатПоиска) Тогда
			Продолжить;
		КонецЕсли;
		ОписаниеТипов.Добавить(ТипБизнесПроцесса);
	КонецЦикла;
	ТекстОшибки = НСтр("ru = '%1 %2 модуля менеджера бизнес-процесса'");
	ТекстОшибки	= СтрЗаменить(ТекстОшибки, "%1", ?(ЭтоПроцедура, НСтр("ru = 'Процедура'"), НСтр("ru = 'Функция'")));
	ТекстОшибки	= СтрЗаменить(ТекстОшибки, "%2", ИмяФункцииИлиПроцедуры);
	
	СтрокаТаблицы = РезультатПроверки.Добавить();
	СтрокаТаблицы.РеквизитПроверки = ТекстОшибки;
	Для Каждого ЭлементПроверенныхДанных Из ОписаниеТипов Цикл
		ОписаниеБП = "БизнесПроцесс." + ЭлементПроверенныхДанных;
		СтрокаТаблицы.ПроверенныеДанные = 
			?(ПустаяСтрока(СтрокаТаблицы.ПроверенныеДанные), ОписаниеБП, 
			СтрокаТаблицы.ПроверенныеДанные +"," + ОписаниеБП);
	КонецЦикла;
		
КонецПроцедуры

Функция Подключаемый_БизнесПроцессыИЗадачиПроверитьСоставРолей()
	
	Результат = НоваяТаблицаПроверки();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РолиИсполнителей.Наименование
		|ИЗ
		|	Справочник.РолиИсполнителей КАК РолиИсполнителей
		|ГДЕ
		|	РолиИсполнителей.Предопределенный = ИСТИНА";

	ВыборкаРолей = Запрос.Выполнить();
	МассивИменРолей = ВыборкаРолей.Выгрузить().ВыгрузитьКолонку("Наименование");
	
	СтрокаТаблицы = Результат.Добавить();
	СтрокаТаблицы.РеквизитПроверки = "Справочник.РолиИсполнителей.ПредопределенныеЭлементы";
	СтрокаТаблицы.ПроверенныеДанные = МассивВСтроку(МассивИменРолей);
	
	// Обязательно должно быть предопределенное значение ОтветственныйЗаКонтрольИсполнения.
	Если МассивИменРолей.Найти(НСтр("ru = 'Координатор выполнения задач'")) = Неопределено Тогда
		ДобавитьОписаниеПроизвольнойОшибки(Результат, НСтр("ru = 'Отсутствует предопределенная роль ОтветственныйЗаКонтрольИсполнения (Координатор выполнения задач).'"));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция Подключаемый_БизнесПроцессыИЗадачиПроверитьОбъектыАдресации()
	
	МассивФакт = Неопределено;
	// 1. 
	ПроверитьТипы(МассивФакт, "ПланыВидовХарактеристик.ОбъектыАдресацииЗадач.Тип");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОбъектыАдресацииЗадач.ТипЗначения КАК ТипЗначения
		|ИЗ
		|	ПланВидовХарактеристик.ОбъектыАдресацииЗадач КАК ОбъектыАдресацииЗадач
		|ГДЕ
		|	ОбъектыАдресацииЗадач.Ссылка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ОбъектыАдресацииЗадач.ВсеОбъектыАдресации)";

	// 2. 
	ВыборкаОбъектовАдресации = Запрос.Выполнить();
	Результат = ВыборкаОбъектовАдресации.Выгрузить();
	МассивТиповОА = Результат.ВыгрузитьКолонку("ТипЗначения");
	
	МассивИменОА = Новый Массив;
	Для Каждого ТипОА Из МассивТиповОА Цикл
		Для Каждого Тип Из ТипОА.Типы() Цикл
			МассивИменОА.Добавить(Метаданные.НайтиПоТипу(ТиП).ПолноеИмя());
		КонецЦикла;
	КонецЦикла;
	
	СтрокаТаблицы = МассивФакт.Добавить();
	СтрокаТаблицы.РеквизитПроверки = "ПланВидовХарактеристик.ОбъектыАдресацииЗадач.ПредопределенныеЭлементы.ВсеОбъектыАдресации.Тип";
	СтрокаТаблицы.ПроверенныеДанные = МассивВСтроку(МассивИменОА);
	
	// 3. Обязательно должно быть предопределенное значение ВсеОбъектыАдресации.
	Если Результат.Количество() = 0 Тогда
		ДобавитьОписаниеПроизвольнойОшибки(МассивФакт, НСтр("ru = 'Отсутствует предопределенный объект адресации ВсеОбъектыАдресации.'"));
	КонецЕсли;
	
	// 4. 
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОбъектыАдресацииЗадач.ТипЗначения КАК ТипЗначения
		|ИЗ
		|	ПланВидовХарактеристик.ОбъектыАдресацииЗадач КАК ОбъектыАдресацииЗадач
		|ГДЕ
		|	ОбъектыАдресацииЗадач.Предопределенный = ИСТИНА
		|	И ОбъектыАдресацииЗадач.Ссылка <> ЗНАЧЕНИЕ(ПланВидовХарактеристик.ОбъектыАдресацииЗадач.ВсеОбъектыАдресации)";
	Результат = Запрос.Выполнить().Выгрузить();
	МассивТиповОА = Результат.ВыгрузитьКолонку("ТипЗначения");
	
	МассивИменОА = Новый Массив;
	Для Каждого ТипОА Из МассивТиповОА Цикл
		Для Каждого Тип Из ТипОА.Типы() Цикл
			МассивИменОА.Добавить(Метаданные.НайтиПоТипу(ТиП).ПолноеИмя());
		КонецЦикла;
	КонецЦикла;
	
	СтрокаТаблицы = МассивФакт.Добавить();
	СтрокаТаблицы.РеквизитПроверки = "ПланВидовХарактеристик.ОбъектыАдресацииЗадач.ПредопределенныеЭлементы.<...>.Тип";
	СтрокаТаблицы.ПроверенныеДанные = МассивВСтроку(МассивИменОА);
		
	// 5. Проверить, что если есть хотя бы один ОА, то должна быть роль, в которой используются ОА.
	Если МассивИменОА.Количество() > 0 Тогда 
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	РолиИсполнителей.Наименование
			|ИЗ
			|	Справочник.РолиИсполнителей КАК РолиИсполнителей
			|ГДЕ
			|	РолиИсполнителей.Предопределенный = ИСТИНА
			|	И РолиИсполнителей.ИспользуетсяСОбъектамиАдресации = ИСТИНА
			|	И (РолиИсполнителей.ТипыОсновногоОбъектаАдресации <> ЗНАЧЕНИЕ(ПланВидовХарактеристик.ОбъектыАдресацииЗадач.ВсеОбъектыАдресации)
			|	ИЛИ РолиИсполнителей.ТипыДополнительногоОбъектаАдресации = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ОбъектыАдресацииЗадач.ВсеОбъектыАдресации))";

		ВыборкаРолей = Запрос.Выполнить();
		Если ВыборкаРолей.Пустой() Тогда
			ДобавитьОписаниеПроизвольнойОшибки(МассивФакт,
				НСтр("ru = 'В конфигурации имеются объекты адресации задач, но нет ни одной роли, которая бы их использовала (реквизит ИспользуетсяСОбъектамиАдресации).'"));
		КонецЕсли;	
	КонецЕсли;	
	
	Возврат МассивФакт;
КонецФункции

Функция Подключаемый_БизнесПроцессыИЗадачиПроверитьРазмещениеВКИНастройкаРолевойАдресации()
	Возврат ПроверитьРазмещениеВКомандномИнтерфейсе("РегистрСведений.ИсполнителиЗадач");
КонецФункции

Функция Подключаемый_БизнесПроцессыИЗадачиПроверитьРазмещениеВКИМоиЗадачи()
	СписокПроверяемых = ПроверитьРазмещениеВКомандномИнтерфейсе("Отчет.ЗадачиИстекающиеНаДату");
	СписокНеПроверяемых = НоваяТаблицаПроверки();
	ДобавитьНеПроверяемуюСтроку(СписокНеПроверяемых, "Задача.ЗадачаИсполнителя.Команда.МоиЗадачи", "РазмещениеОбъектаВКИ", НСтр("ru = 'Бизнес-процессы и задачи'"));
	Результат = Новый Структура("ТаблицаПроверки, ТаблицаНеПроверяемых", СписокПроверяемых, СписокНеПроверяемых);
	Возврат Результат;
КонецФункции

Функция Подключаемый_БизнесПроцессыИЗадачиПроверитьРазмещениеВКИКонтрольИсполнения()
	
	СписокПроверяемых = ПроверитьРазмещениеВКомандномИнтерфейсе("РегистрСведений.ДанныеБизнесПроцессов");
	СписокПроверяемых = ПроверитьРазмещениеВКомандномИнтерфейсе("Отчет.ПросроченныеЗадачи", СписокПроверяемых);
	СписокПроверяемых = ПроверитьРазмещениеВКомандномИнтерфейсе("Отчет.Задачи", СписокПроверяемых);
	СписокПроверяемых = ПроверитьРазмещениеВКомандномИнтерфейсе("Отчет.ЗависшиеЗадачи", СписокПроверяемых);

	СписокНеПроверяемых = НоваяТаблицаПроверки();
	ДобавитьНеПроверяемуюСтроку(СписокНеПроверяемых, "Задача.ЗадачаИсполнителя.Команда.ВсеЗадачи", "РазмещениеОбъектаВКИ", НСтр("ru = 'Бизнес-процессы и задачи'"));
	Результат = Новый Структура("ТаблицаПроверки, ТаблицаНеПроверяемых", СписокПроверяемых, СписокНеПроверяемых);
	Возврат Результат;

КонецФункции

#КонецОбласти

#Область Валюты

Функция Подключаемый_ВалютыПроверитьРазмещениеСправочника()
	Возврат ПроверитьРазмещениеВКомандномИнтерфейсе("Справочник.Валюты");
КонецФункции

#КонецОбласти

#Область ВариантыОтчетов

Функция Подключаемый_ВариантыОтчетовСоставОтчетовПроверить()
	СписокНеПроверяемых = НоваяТаблицаПроверки();
	
	ПодключенныеОтчеты = Новый Массив;
	ХранилищеПодсистемы = Метаданные.ХранилищаНастроек.ХранилищеВариантовОтчетов;
	ПодключеныВсеОтчеты = (Метаданные.ХранилищеВариантовОтчетов = ХранилищеПодсистемы);
	Для Каждого ОтчетМетаданные Из Метаданные.Отчеты Цикл
		Если Не ПодключеныВсеОтчеты И ОтчетМетаданные.ХранилищеВариантов <> ХранилищеПодсистемы Тогда
			Продолжить; // Этот отчет не подключен к хранилищу подсистемы.
		КонецЕсли;
		ОтчетПолноеИмя = ОтчетМетаданные.ПолноеИмя();
		ПодключенныеОтчеты.Добавить(ОтчетПолноеИмя);
	КонецЦикла;
	
	ТаблицаПроверки = НоваяТаблицаПроверки();
	СтрокаТаблицы = ТаблицаПроверки.Добавить();
	СтрокаТаблицы.РеквизитПроверки = "ВариантыОтчетовСоставОтчетов";
	СтрокаТаблицы.ПроверенныеДанные = МассивВСтроку(ПодключенныеОтчеты);
	
	ШаблонТекстаОшибки = НСтр("ru = 'Отчет ""%1"", вариант ""%2"":'")
		+ Символы.ПС + "  " + НСтр("ru = 'Не указаны сведения для поиска: %3.'")
		+ Символы.ПС + "  " + НСтр("ru = 'Подробнее - см. ВариантыОтчетовПереопределяемый.НастроитьВариантыОтчетов().'");
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ПредопределенныеВариантыОтчетов.Отчет.Имя КАК ИмяОтчета,
	|	ПредопределенныеВариантыОтчетов.КлючВарианта КАК КлючВарианта,
	|	ВЫБОР
	|		КОГДА ПОДСТРОКА(ПредопределенныеВариантыОтчетов.Описание, 1, 1) = """"
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЗаполнитьОписание,
	|	ВЫБОР
	|		КОГДА ПОДСТРОКА(ПредопределенныеВариантыОтчетов.НаименованияПолей, 1, 1) = """"
	|				И ПОДСТРОКА(ПредопределенныеВариантыОтчетов.НаименованияПараметровИОтборов, 1, 1) = """"
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЗаполнитьНаименованияПолейПараметровИОтборов
	|ИЗ
	|	Справочник.ПредопределенныеВариантыОтчетов КАК ПредопределенныеВариантыОтчетов
	|ГДЕ
	|	НЕ ПредопределенныеВариантыОтчетов.ПометкаУдаления
	|	И ПредопределенныеВариантыОтчетов.Включен
	|	И (ПОДСТРОКА(ПредопределенныеВариантыОтчетов.Описание, 1, 1) = """"
	|			ИЛИ ПОДСТРОКА(ПредопределенныеВариантыОтчетов.НаименованияПолей, 1, 1) = """"
	|				И ПОДСТРОКА(ПредопределенныеВариантыОтчетов.НаименованияПараметровИОтборов, 1, 1) = """")";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Поля = "";
		Если Выборка.ЗаполнитьОписание Тогда
			Поля = Поля + ?(Поля = "", "", ", ") + "Описание";
		КонецЕсли;
		Если Выборка.ЗаполнитьНаименованияПолейПараметровИОтборов Тогда
			Поля = Поля + ?(Поля = "", "", ", ") + "НаименованияПолей, НаименованияПараметровИОтборов";
		КонецЕсли;
		ДобавитьНеПроверяемуюСтроку(СписокНеПроверяемых,
			ПодставитьПараметрыВСтроку(ШаблонТекстаОшибки, Выборка.ИмяОтчета, Выборка.КлючВарианта, Поля),
			"Произвольная", НСтр("ru = 'Варианты отчетов'"));
	КонецЦикла;
	
	РезультатПроверки = Новый Структура("ТаблицаПроверки, ТаблицаНеПроверяемых", ТаблицаПроверки, СписокНеПроверяемых);
	Возврат РезультатПроверки;
	
КонецФункции

Функция Подключаемый_ВариантыОтчетовПроверитьСоставРазделов()
	ПодключенныеПодсистемы = Новый Массив;
	ВызовМетода = "ВариантыОтчетовКлиент.ПоказатьПанельОтчетов(";
	ВызовМетодаДлина = СтрДлина(ВызовМетода);
	МассивМодулей = НайтиФайлы(КаталогВыгрузкиМодулей, "ОбщаяКоманда.*.МодульКоманды.txt");
	Для Каждого ФайлМодуль Из МассивМодулей Цикл
		ЧтениеТекста = Новый ЧтениеТекста(ФайлМодуль.ПолноеИмя);
		Остаток = ЧтениеТекста.Прочитать();
		Позиция = СтрНайти(Остаток, ВызовМетода);
		Если Позиция = 0 Тогда
			Продолжить;
		КонецЕсли;
		Остаток = Сред(Остаток, Позиция + ВызовМетодаДлина);
		Позиция = СтрНайти(Остаток, """");
		Если Позиция = 0 Тогда
			Продолжить;
		КонецЕсли;
		Остаток = Сред(Остаток, Позиция + 1);
		Позиция = СтрНайти(Остаток, """");
		Если Позиция = 0 Тогда
			Продолжить;
		КонецЕсли;
		ИмяПодсистемы = Лев(Остаток, Позиция - 1);
		ПодключенныеПодсистемы.Добавить("Подсистема." + СтрЗаменить(ИмяПодсистемы, ".", ".Подсистема."));
	КонецЦикла;
	
	Результат = НоваяТаблицаПроверки();
	СтрокаТаблицы = Результат.Добавить();
	СтрокаТаблицы.РеквизитПроверки = "ОбщаяФорма.ПанельОтчетов";
	СтрокаТаблицы.ПроверенныеДанные = МассивВСтроку(ПодключенныеПодсистемы);
	Возврат Результат;
КонецФункции

Функция Подключаемый_ВариантыОтчетовПроверитьРазмещение()
	Возврат ПроверитьРазмещениеВКомандномИнтерфейсе("Справочник.ВариантыОтчетов");
КонецФункции

#КонецОбласти

#Область ВерсионированиеОбъектов

Функция Подключаемый_ВерсионированиеОбъектовПроверитьСоставОбъектов()
	
	ТаблицаПроверки = Неопределено;
	
	ПроверитьТипы(ТаблицаПроверки, "ОбщиеКоманды.ИсторияИзменений.ТипПараметраКоманды");
	ПроверитьСоставТиповГруппыПодписокНаСобытия(ТаблицаПроверки, "ЗаписатьВерсиюОбъекта,ЗаписатьВерсиюДокумента");
	
	Возврат ТаблицаПроверки;
	
КонецФункции

Функция Подключаемый_ВерсионированиеОбъектовПроверитьРазмещение()
	Возврат ПроверитьРазмещениеВКомандномИнтерфейсе("РегистрСведений.НастройкиВерсионированияОбъектов");
КонецФункции

#КонецОбласти

#Область Взаимодействия

Функция Подключаемый_ВзаимодействияПроверитьТипыКонтактов()
	
	СписокНеПроверяемых = НоваяТаблицаПроверки();

	ТаблицаПроверки = Неопределено;
	ПроверитьТипы(ТаблицаПроверки, "ОпределяемыеТипы.КонтактВзаимодействия.Тип");
	
	СтруктураВозврата = Новый Структура("ТаблицаПроверки, ТаблицаНеПроверяемых", ТаблицаПроверки, СписокНеПроверяемых);
	Возврат СтруктураВозврата;

КонецФункции

Функция Подключаемый_ВзаимодействияПроверитьТипыПредметов()
	
	СписокНеПроверяемых = НоваяТаблицаПроверки();
	
	ТаблицаПроверки = Неопределено;
	ПроверитьТипы(ТаблицаПроверки, "ОпределяемыеТипы.ПредметВзаимодействия.Тип");
	
	СтруктураВозврата = Новый Структура("ТаблицаПроверки, ТаблицаНеПроверяемых", ТаблицаПроверки, СписокНеПроверяемых);
	
	Возврат  СтруктураВозврата;
КонецФункции

Функция Подключаемый_ВзаимодействияПроверитьРазмещениеЖурнала()
	Возврат ПроверитьРазмещениеВКомандномИнтерфейсе("ЖурналДокументов.Взаимодействия");
КонецФункции

#КонецОбласти

#Область ГрафикиРаботы

Функция Подключаемый_ГрафикиРаботыПроверитьРазмещениеСправочника()
	
	Возврат ПроверитьРазмещениеВКомандномИнтерфейсе("Справочник.Календари");
	
КонецФункции

#КонецОбласти

#Область ГрупповоеИзменениеОбъектов

Функция Подключаемый_ГрупповоеИзменениеОбъектовПроверитьСоставОбъектов()
	
	ТаблицаПроверки = НоваяТаблицаПроверки();
	
	ИменаМетаданныхСПроцедурой = Новый Массив;
	
	ИменаМодулей = СформироватьИменаМодулей(, Истина);
	
	ПроверенныеДанные = "";
	
	Для Каждого ИмяМодуля Из ИменаМодулей Цикл
		Если ПроверитьВхождениеСтрокиВМодуль(ИмяМодуля, "ИзменитьВыделенные", Истина, "ГрупповоеИзменениеОбъектовКлиент.ИзменитьВыделенные(Элементы.Список)") Тогда
			Подстроки = РазложитьСтрокуВМассивПодстрок(ИмяМодуля, ".");
			ИменаМетаданныхСПроцедурой.Добавить();
			ПроверенныеДанные = ПроверенныеДанные + Подстроки[0] + "." + Подстроки[1] + ",";
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(ПроверенныеДанные) Тогда
		ПроверенныеДанные = Лев(ПроверенныеДанные, СтрДлина(ПроверенныеДанные)-1);
	КонецЕсли;
	
	РезультатПроверки = ТаблицаПроверки.Добавить();
	РезультатПроверки.РеквизитПроверки = НСтр("ru = 'Форма объекта с обработчиком команды изменения'");
	РезультатПроверки.ПроверенныеДанные = ПроверенныеДанные;
	
	Возврат ТаблицаПроверки
	
КонецФункции

#КонецОбласти

#Область ДатыЗапретаИзменения

Функция Подключаемый_ДатыЗапретаИзмененияПроверитьРазмещениеКомандыДатыЗапретаИзмененияДанных()
	
	Возврат ПроверитьРазмещениеВКомандномИнтерфейсе("РегистрСведений.ДатыЗапретаИзменения");
	
КонецФункции

Функция Подключаемый_ДатыЗапретаИзмененияПроверитьТипыОбъектовЗапретаИзменения()
	
	ТаблицаПроверки = НоваяТаблицаПроверки();
	
	СтрокаТаблицы = ТаблицаПроверки.Добавить();
	СтрокаТаблицы.РеквизитПроверки = "ДатыЗапретаИзмененияСлужебный.ИсточникиДанныхДляПроверкиЗапретаИзменения";
	СтрокаТаблицы.ПроверенныеДанные = "";
	
	Попытка
		ИсточникиДанных = Вычислить("ДатыЗапретаИзмененияСлужебный.ИсточникиДанныхДляПроверкиЗапретаИзменения()");
	Исключение
		ИсточникиДанных = Неопределено;
	КонецПопытки;
	
	Если ИсточникиДанных <> Неопределено Тогда
		МассивИменОбъектов = Новый Массив;
		Для Каждого КлючИЗначение Из ИсточникиДанных Цикл
			МассивИменОбъектов.Добавить(КлючИЗначение.Ключ);
		КонецЦикла;
		СтрокаТаблицы.ПроверенныеДанные = МассивВСтроку(МассивИменОбъектов);
	КонецЕсли;
	
	СтрокаТаблицы = ТаблицаПроверки.Добавить();
	СтрокаТаблицы.РеквизитПроверки = НСтр("ru = 'Подписки на события <*ПроверитьДатуЗапретаИзмененияПередЗаписью*>'");
	СтрокаТаблицы.ПроверенныеДанные = "";
	
	ИсточникиСобытий = Новый Массив;
	ПолучитьСоставПодпискиПоИмениОбработчика(ИсточникиСобытий, "ДатыЗапретаИзменения.ПроверитьДатуЗапретаИзмененияПередЗаписью");
	ПолучитьСоставПодпискиПоИмениОбработчика(ИсточникиСобытий, "ДатыЗапретаИзменения.ПроверитьДатуЗапретаИзмененияПередЗаписьюДокумента");
	ПолучитьСоставПодпискиПоИмениОбработчика(ИсточникиСобытий, "ДатыЗапретаИзменения.ПроверитьДатуЗапретаИзмененияПередЗаписьюНабораЗаписей");
	ПолучитьСоставПодпискиПоИмениОбработчика(ИсточникиСобытий, "ДатыЗапретаИзменения.ПроверитьДатуЗапретаИзмененияПередЗаписьюНабораЗаписейРегистраБухгалтерии");
	ПолучитьСоставПодпискиПоИмениОбработчика(ИсточникиСобытий, "ДатыЗапретаИзменения.ПроверитьДатуЗапретаИзмененияПередЗаписьюНабораЗаписейРегистраРасчета");
	ПолучитьСоставПодпискиПоИмениОбработчика(ИсточникиСобытий, "ДатыЗапретаИзменения.ПроверитьДатуЗапретаИзмененияПередУдалением");
	
	СтрокаТаблицы.ПроверенныеДанные = МассивВСтроку(ИсточникиСобытий);
	
	//////////////////////////////////////////////////////////
	// Проверка кода в модуле формы объекта.
	
	Если МассивИменОбъектов = Неопределено Тогда
		МассивИменОбъектов = Новый Массив;
	КонецЕсли;
	
	ПроверенныеДанные = "";
	
	ТребуемыеПроверки = Новый Массив;
	
	Проверка = НовоеОписаниеТребуемыхПроверокСтрокВызоваВПроцедурахМодуля(ТребуемыеПроверки).Добавить();
	Проверка.ИмяПроцедуры = "ПриЧтенииНаСервере";
	Проверка.СтрокиВызова.Добавить("ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(");
	
	Для каждого ПолноеИмяОбъекта Из МассивИменОбъектов Цикл
		
		// Для курсов валют своя отдельная проверка
		Если ПолноеИмяОбъекта = "РегистрСведений.КурсыВалют" Тогда
			
			ТребуемыеПроверкиВалют = Новый Массив;
			
			Проверка = НовоеОписаниеТребуемыхПроверокСтрокВызоваВПроцедурахМодуля(ТребуемыеПроверкиВалют).Добавить();
			Проверка.ИмяПроцедуры = "_ДемоПриЧтенииНаСервере";
			Проверка.СтрокиВызова.Добавить("ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(");
			
			ПолноеИмяОбъекта = "РегистрСведений.КурсыВалют";
			ИмяМодуля = ПолучитьИмяМодуляФормыОбъектаПоИмениОМ(ПолноеИмяОбъекта);
			ЕстьОшибки = Ложь;
			
			ПроверитьСтрокиВызоваВПроцедурахМодуляФормыОбъекта(ИмяМодуля, ТребуемыеПроверкиВалют, ТаблицаПроверки, ЕстьОшибки);
			
			Если Не ЕстьОшибки Тогда
				ПроверенныеДанные = ПроверенныеДанные + "," + ПолноеИмяОбъекта;
			КонецЕсли;
			
			Продолжить;
			
		КонецЕсли;
		
		ИмяМодуля = ПолучитьИмяМодуляФормыОбъектаПоИмениОМ(ПолноеИмяОбъекта);
		ЕстьОшибки = Ложь;
		
		ПроверитьСтрокиВызоваВПроцедурахМодуляФормыОбъекта(ИмяМодуля, ТребуемыеПроверки, ТаблицаПроверки, ЕстьОшибки);
		
		Если ЕстьОшибки Тогда
			Продолжить;
		КонецЕсли;
		ПроверенныеДанные = ПроверенныеДанные + "," + ПолноеИмяОбъекта;
	КонецЦикла;
	
	РезультатПроверки = ТаблицаПроверки.Добавить();
	РезультатПроверки.РеквизитПроверки  = НСтр("ru = 'Проверка модуля формы объекта - ошибки см. в отчете'");
	РезультатПроверки.ПроверенныеДанные = Сред(ПроверенныеДанные, 2);
	
	Возврат ТаблицаПроверки;
	
КонецФункции

#КонецОбласти

#Область ДополнительныеОтчетыИОбработки

Функция Подключаемый_ДополнительныеОтчетыИОбработкиПроверитьСоставОбъектовСДополнительнымиКомандами()
	
	ТаблицаПроверки = Неопределено;
	
	ПроверитьТипы(ТаблицаПроверки, "ОпределяемыеТипы.ОбъектСДополнительнымиКомандами.Тип");
	
	Если ТаблицаПроверки.Количество() = 0 Тогда
		Возврат ТаблицаПроверки;
	КонецЕсли;
	
	ОМСДопОбработками = РазложитьСтрокуВМассивПодстрок(ТаблицаПроверки[0].ПроверенныеДанные, ",");
	
	СправочникИОМ = ОМСДопОбработками.Найти("Справочник.ИдентификаторыОбъектовМетаданных");
	Если СправочникИОМ <> Неопределено Тогда
		ОМСДопОбработками.Удалить(СправочникИОМ);
	КонецЕсли;
	
	ТаблицаПроверки[0].ПроверенныеДанные = СтрокаИзМассиваПодстрок(ОМСДопОбработками, ",");
	
	ПроверенныеДанные = "";
	СтрокаПоиска = "ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтотОбъект)";
	
	Для Каждого ИмяОМ Из ОМСДопОбработками Цикл
		
		ИмяМодуляОбъекта = ПолучитьИмяМодуляФормыОбъектаПоИмениОМ(ИмяОМ);
		ИмяМодуляСписка = ПолучитьИмяМодуляФормыСпискаПоИмениОМ(ИмяОМ);
		
		Если ПроверитьВхождениеСтрокиВМодуль(ИмяМодуляОбъекта, "ПриСозданииНаСервере", Истина, СтрокаПоиска)
		   И ПроверитьВхождениеСтрокиВМодуль(ИмяМодуляСписка, "ПриСозданииНаСервере", Истина, СтрокаПоиска) Тогда
			ПроверенныеДанные = ПроверенныеДанные + ИмяОМ + ",";
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(ПроверенныеДанные) Тогда
		ПроверенныеДанные = Лев(ПроверенныеДанные, СтрДлина(ПроверенныеДанные)-1);
	КонецЕсли;
	
	РезультатПроверки = ТаблицаПроверки.Добавить();
	РезультатПроверки.РеквизитПроверки = НСтр("ru = 'Объект подключен к подсистеме, но фрагменты кода подсистемы отсутствуют в модулях его форм.'");
	РезультатПроверки.ПроверенныеДанные = ПроверенныеДанные;
	
	Возврат ТаблицаПроверки;
	
КонецФункции

Функция Подключаемый_ДополнительныеОтчетыИОбработкиПроверитьСоставГлобальныхОбработок()
	
	Возврат ПроверитьВстраиваниеГлобальныхОтчетовОбработок(Ложь);
	
КонецФункции

Функция Подключаемый_ДополнительныеОтчетыИОбработкиПроверитьСоставГлобальныхОтчетов()
	
	Возврат ПроверитьВстраиваниеГлобальныхОтчетовОбработок(Истина);
	
КонецФункции

Функция ПроверитьВстраиваниеГлобальныхОтчетовОбработок(ДляОтчетов)
	
	МодульДополнительныеОтчетыИОбработки = Вычислить("ДополнительныеОтчетыИОбработки");
	Если ДляОтчетов Тогда
		МассивРазделов = МодульДополнительныеОтчетыИОбработки.РазделыДополнительныхОтчетов();
		ШаблонТекста = НСтр("ru = 'Отсутствует команда вызова дополнительных отчетов из раздела %1'");
	Иначе
		МассивРазделов = МодульДополнительныеОтчетыИОбработки.РазделыДополнительныхОбработок();
		ШаблонТекста = НСтр("ru = 'Отсутствует команда вызова дополнительных обработок из раздела %1'");
	КонецЕсли;
	
	ИдентификаторРабочегоСтола = Вычислить("ДополнительныеОтчетыИОбработкиКлиентСервер").ИдентификаторРабочегоСтола();
	
	РезультатыПроверки = НоваяТаблицаПроверки();
	
	ПроверяемыйРеквизит = РезультатыПроверки.Добавить();
	ПроверяемыйРеквизит.РеквизитПроверки = "ОбщийМодуль.ДополнительныеОтчетыИОбработкиПереопределяемый";
	ПроверяемыйРеквизит.ПроверенныеДанные = "";
	
	ШаблонИмениФайлаМодуля = "ОбщаяКоманда.[ИмяОбщейКоманды].МодульКоманды";
	СтрокаВызова = "ДополнительныеОтчетыИОбработкиКлиент.ОткрытьФормуКомандДополнительныхОтчетовИОбработок";
	ПроверенныеДанные = "";
	
	Для Каждого РазделМД Из МассивРазделов Цикл
		// Состав рабочего стола не проверяется.
		Если РазделМД = ИдентификаторРабочегоСтола Тогда
			Продолжить;
		КонецЕсли;
		// В разделе "Администрирование" команда выводится в одну из панелей.
		Если РазделМД.Имя = "Администрирование" Тогда
			Продолжить;
		КонецЕсли;
		
		ПроверяемыйРеквизит.ПроверенныеДанные = ПроверяемыйРеквизит.ПроверенныеДанные 
		+ ?(ПроверяемыйРеквизит.ПроверенныеДанные = "", "", ",")
		+ "Подсистема."
		+ РазделМД.Имя;
		
		ВызовНайден = Ложь;
		Для Каждого ОбщаяКомандаМД Из РазделМД.Состав Цикл
			Если НЕ Метаданные.ОбщиеКоманды.Содержит(ОбщаяКомандаМД) Тогда
				Продолжить;
			КонецЕсли;
			ИмяФайлаМодуля = СтрЗаменить(ШаблонИмениФайлаМодуля, "[ИмяОбщейКоманды]", ОбщаяКомандаМД.Имя);
			Если ПроверитьВхождениеСтрокиВМодуль(ИмяФайлаМодуля, "ОбработкаКоманды", Истина, СтрокаВызова) Тогда
				ВызовНайден = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ ВызовНайден Тогда
			ДобавитьОписаниеПроизвольнойОшибки(РезультатыПроверки, СтрЗаменить(ШаблонТекста, "%1", РазделМД.Имя));
		КонецЕсли;
	КонецЦикла;
	
	Возврат РезультатыПроверки;
	
КонецФункции

Функция ПроверитьВхождениеСтрокиВМодуль(ИмяМодуля, ИмяПроцедурыФункции, ЭтоПроцедура, СтрокаПоиска)
	
	ТекстПроцедуры = НайтиПроцедуруМодуля(ИмяМодуля, ИмяПроцедурыФункции, ЭтоПроцедура);
	
	Если НЕ ПустаяСтрока(ТекстПроцедуры) И СтрНайти(ТекстПроцедуры, СтрокаПоиска) > 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#Область ЗавершениеРаботыПользователей

Функция Подключаемый_ЗавершениеРаботыПользователейПроверитьРазмещениеАктивныеПользователи()
	Возврат ПроверитьРазмещениеВКомандномИнтерфейсе("Обработка.АктивныеПользователи");
КонецФункции

Функция Подключаемый_ЗавершениеРаботыПользователейПроверитьРазмещениеБлокировкиСоединений()
	Возврат ПроверитьРазмещениеВКомандномИнтерфейсе("Обработка.БлокировкаРаботыПользователей");
КонецФункции

#КонецОбласти

#Область ЗагрузкаДанныхИзФайла

Функция Подключаемый_ЗагрузкаДанныхИзФайлаПроверитьРазмещение()
	
	// Обработка "ЗагрузкаДанныхИзФайла" должна присутствовать в командном интерфейсе.
	Возврат ПроверитьРазмещениеВКомандномИнтерфейсе("Обработка.ЗагрузкаДанныхИзФайла");
	
КонецФункции

#КонецОбласти

#Область ЗаметкиПользователя

Функция Подключаемый_ЗаметкиПользователяПроверитьТипыОбъектов()
	
	ТаблицаПроверки = Неопределено;
	
	ПроверитьТипы(ТаблицаПроверки, "ОбщиеКоманды.СоздатьЗаметкуПоПредмету.ТипПараметраКоманды");
	ПроверитьТипы(ТаблицаПроверки, "ОбщиеКоманды.МоиЗаметкиПоПредмету.ТипПараметраКоманды");
	ПроверитьСоставТиповПодписокНаСобытия(ТаблицаПроверки, "УстановитьСнятьПометкуУдаленияЗаметок");
	ПроверитьСоставТиповГруппыПодписокНаСобытия(ТаблицаПроверки, "УстановитьСтатусИзмененияПометкиУдаленияОбъекта,УстановитьСтатусИзмененияПометкиУдаленияДокумента");
	
	ИсключитьТипИзТаблицыПроверки(ТаблицаПроверки, Метаданные.Справочники.Пользователи.ПолноеИмя());
	ИсключитьТипИзТаблицыПроверки(ТаблицаПроверки, Метаданные.Справочники.ИдентификаторыОбъектовМетаданных.ПолноеИмя());
	
	Возврат ТаблицаПроверки;
	
КонецФункции	

Функция Подключаемый_ЗаметкиПользователяПроверитьРазмещениеЗаметок()
	
	Возврат ПроверитьРазмещениеВКомандномИнтерфейсе("Справочник.Заметки");

КонецФункции	

#КонецОбласти

#Область ЗапретРедактированияРеквизитовОбъектов

Функция Подключаемый_ЗапретРедактированияРеквизитовОбъектовПроверитьСоставОбъектов()
	
	ТаблицаПроверки = НоваяТаблицаПроверки();
	
	// П- проверка вхождения ПолучитьБлокируемыеРеквизитыОбъекта в модуль менеджера объекта.
	
	ИменаМодулейМенеджеров = СформироватьИменаМодулей(,, Истина);
	
	ПолныеИменаОбъектов = Новый Соответствие;
	ПроверенныеДанные = "";
	
	Для Каждого ИмяМодуля Из ИменаМодулейМенеджеров Цикл
		ТекстПроцедуры = НайтиПроцедуруМодуля(ИмяМодуля, "ПолучитьБлокируемыеРеквизитыОбъекта", Ложь);
		Если НЕ ПустаяСтрока(ТекстПроцедуры) Тогда
	
			Подстроки = РазложитьСтрокуВМассивПодстрок(ИмяМодуля, ".");
			ПолноеИмя = Подстроки[0] + "." + Подстроки[1];
			ПолныеИменаОбъектов.Вставить(ПолноеИмя, Истина);
			ПроверенныеДанные = ПроверенныеДанные + ПолноеИмя + ",";
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(ПроверенныеДанные) Тогда
		ПроверенныеДанные = Лев(ПроверенныеДанные, СтрДлина(ПроверенныеДанные)-1);
	КонецЕсли;
	
	РезультатПроверки = ТаблицаПроверки.Добавить();
	
	РезультатПроверки.РеквизитПроверки = НСтр("ru = 'Модуль менеджера объекта'");
	РезультатПроверки.ПроверенныеДанные = ПроверенныеДанные;
	
	// П- проверка вхождения ключевых обработчиков в модуль формы объекта.
	
	ИменаМодулейФормОбъекта = СформироватьИменаМодулей(Истина);
	
	ТребуемыеПроверки = Новый Массив;
	
	Проверка = НовоеОписаниеТребуемыхПроверокСтрокВызоваВПроцедурахМодуля(ТребуемыеПроверки).Добавить();
	Проверка.ИмяПроцедуры = "ПриСозданииНаСервере";
	Проверка.СтрокиВызова.Добавить("ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект");
	
	Проверка = НовоеОписаниеТребуемыхПроверокСтрокВызоваВПроцедурахМодуля(ТребуемыеПроверки).Добавить();
	Проверка.ИмяПроцедуры = "ПослеЗаписиНаСервере";
	Проверка.СтрокиВызова.Добавить("ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект");
	
	Проверка = НовоеОписаниеТребуемыхПроверокСтрокВызоваВПроцедурахМодуля(ТребуемыеПроверки).Добавить();
	Проверка.ИмяПроцедуры = "Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта";
	Проверка.СтрокиВызова.Добавить("ЗапретРедактированияРеквизитовОбъектовКлиент.РазрешитьРедактированиеРеквизитовОбъекта(");
	Проверка.СтрокиВызова.Добавить("ЗапретРедактированияРеквизитовОбъектовКлиент.Реквизиты");
	
	ПроверенныеДанные = "";
	
	Для Каждого ИмяМодуля Из ИменаМодулейФормОбъекта Цикл
		Подстроки = РазложитьСтрокуВМассивПодстрок(ИмяМодуля, ".");
		ПолноеИмя = Подстроки[0] + "." + Подстроки[1];
		
		Если ПолныеИменаОбъектов.Получить(ПолноеИмя) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЕстьОшибки = Ложь;
		ПроверитьСтрокиВызоваВПроцедурахМодуляФормыОбъекта(ИмяМодуля, ТребуемыеПроверки, ТаблицаПроверки, ЕстьОшибки);
		
		Если ЕстьОшибки Тогда
			Продолжить;
		КонецЕсли;
		ПроверенныеДанные = ПроверенныеДанные + ПолноеИмя + ",";
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(ПроверенныеДанные) Тогда
		ПроверенныеДанные = Лев(ПроверенныеДанные, СтрДлина(ПроверенныеДанные)-1);
	КонецЕсли;
	
	РезультатПроверки = ТаблицаПроверки.Добавить();
	РезультатПроверки.РеквизитПроверки  = НСтр("ru = 'Проверка модуля формы объекта - ошибки см. в отчете'");
	РезультатПроверки.ПроверенныеДанные = ПроверенныеДанные;
	
	Возврат ТаблицаПроверки;
	
КонецФункции

#КонецОбласти

#Область ЗащитаПерсональныхДанных

Функция Подключаемый_ЗащитаПерсональныхДанныхПроверитьСущностьСубъекта()
	
	МассивФакт = Неопределено;
	ПроверитьТипы(МассивФакт, "ОпределяемыеТипы.СубъектПерсональныхДанных.Тип");
	Возврат МассивФакт;
	
КонецФункции

Функция Подключаемый_ЗащитаПерсональныхДанныхПроверитьРазмещениеОбработкиЗащитаПерсональныхДанных()
	
	Возврат ПроверитьРазмещениеВКомандномИнтерфейсе("Обработка.ЗащитаПерсональныхДанных");
	
КонецФункции

#КонецОбласти

#Область КалендарныеГрафики

Функция Подключаемый_КалендарныеГрафикиПроверитьРазмещениеСправочника()
	
	Возврат ПроверитьРазмещениеВКомандномИнтерфейсе("Справочник.ПроизводственныеКалендари");
	
КонецФункции

#КонецОбласти

#Область КонтактнаяИнформация

Функция Подключаемый_КонтактнаяИнформацияПроверитьСоставОбъектовВладельцев()
	
	ТаблицаПроверки = НоваяТаблицаПроверки();
	
	РезультатПроверки = ТаблицаПроверки.Добавить();
	РезультатПроверки.РеквизитПроверки  = НСтр("ru = 'Состав предопределенных элементов в справочнике ""Виды контактной информации""'");
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВидыКонтактнойИнформации.Ссылка КАК Ссылка,
		|	ВЫБОР
		|		КОГДА ПодчиненныеГруппы.Ссылка ЕСТЬ NULL 
		|		ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЕстьДополнительныеТЧ
		|	
		|ИЗ
		|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	Справочник.ВидыКонтактнойИнформации КАК ПодчиненныеГруппы
		|ПО
		|	ВидыКонтактнойИнформации.Предопределенный
		|	И ПодчиненныеГруппы.ЭтоГруппа
		|	И ПодчиненныеГруппы.Родитель = ВидыКонтактнойИнформации.Ссылка
		|ГДЕ
		|	ВидыКонтактнойИнформации.Предопределенный
		|	И ВидыКонтактнойИнформации.ЭтоГруппа
		|	И ВидыКонтактнойИнформации.Родитель = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ПустаяСсылка)
		|");
	
	ДопустимыеТипыВладельцевКИ = Новый Структура("Справочник, Документ", Метаданные.Справочники, Метаданные.Документы);
	ОбъектыВладельцевКИ        = Новый Массив;
	ПроверенныеДанные          = "";
	
	ВыборкаВидовКИ = Запрос.Выполнить().Выбрать();
	Пока ВыборкаВидовКИ.Следующий() Цикл
		ИмяПредопределенного = ИмяПредопределенного(ВыборкаВидовКИ.Ссылка);
		
		ДанныеОбъектаСКИ = Неопределено;
		Для Каждого КлючЗначение Из ДопустимыеТипыВладельцевКИ Цикл
			ПроверяемыйТип = КлючЗначение.Ключ;
			ДлинаКлюча = СтрДлина(ПроверяемыйТип);
			Если СтрНачинаетсяС(ИмяПредопределенного, ПроверяемыйТип) Тогда
				ЧастьИмени = Сред(ИмяПредопределенного, 1 + ДлинаКлюча);
				Если ПустаяСтрока(ЧастьИмени) Тогда
					Продолжить;
				КонецЕсли;
				
				Если КлючЗначение.Значение.Найти(ЧастьИмени) = Неопределено Тогда	
					ДобавитьОписаниеПроизвольнойОшибки(ТаблицаПроверки, ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Для предопределенного вида контактной информации ""%1"" не найден объект метаданных ""%2"" с именем ""%3"".'"),
						ИмяПредопределенного, ПроверяемыйТип, ЧастьИмени));
						Прервать;
				КонецЕсли;
				
				ДанныеОбъектаСКИ = Новый Структура;
				ДанныеОбъектаСКИ.Вставить("Имя", ПроверяемыйТип + "." + ЧастьИмени);
				ДанныеОбъектаСКИ.Вставить("ЕстьДополнительныеТЧ", ВыборкаВидовКИ.ЕстьДополнительныеТЧ);
				
				ДанныеОбъектаСКИ.Вставить("Типы", Новый Соответствие);
				ДанныеОбъектаСКИ.Типы = Новый Соответствие;
				ДанныеОбъектаСКИ.Типы.Вставить("Тип",                   Новый ОписаниеТипов("ПеречислениеСсылка.ТипыКонтактнойИнформации"));
				ДанныеОбъектаСКИ.Типы.Вставить("Вид",                   Новый ОписаниеТипов("СправочникСсылка.ВидыКонтактнойИнформации"));
				ДанныеОбъектаСКИ.Типы.Вставить("Представление",         Новый ОписаниеТипов("Строка"));
				ДанныеОбъектаСКИ.Типы.Вставить("ЗначенияПолей",         Новый ОписаниеТипов("Строка"));
				ДанныеОбъектаСКИ.Типы.Вставить("Страна",                Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(100)) );
				ДанныеОбъектаСКИ.Типы.Вставить("Регион",                Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(50)) );
				ДанныеОбъектаСКИ.Типы.Вставить("Город",                 Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(50)) );
				ДанныеОбъектаСКИ.Типы.Вставить("АдресЭП",               Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(100)) );
				ДанныеОбъектаСКИ.Типы.Вставить("ДоменноеИмяСервера",    Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(100)) );
				ДанныеОбъектаСКИ.Типы.Вставить("НомерТелефона",         Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(20)) );
				ДанныеОбъектаСКИ.Типы.Вставить("НомерТелефонаБезКодов", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(20)) );
				ДанныеОбъектаСКИ.Типы.Вставить("ВидДляСписка",          Новый ОписаниеТипов("СправочникСсылка.ВидыКонтактнойИнформации"));
				
				Если ВыборкаВидовКИ.ЕстьДополнительныеТЧ Тогда
					ДанныеОбъектаСКИ.Типы.Вставить("ИдентификаторСтрокиТабличнойЧасти", Новый ОписаниеТипов("Число",,Новый КвалификаторыЧисла(7)) );
				КонецЕсли;
				
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ДанныеОбъектаСКИ<>Неопределено Тогда
			ПроверенныеДанные = ПроверенныеДанные + "," + ДанныеОбъектаСКИ.Имя;
			ОбъектыВладельцевКИ.Добавить(ДанныеОбъектаСКИ);
		КонецЕсли;
	КонецЦикла;
	
	РезультатПроверки.ПроверенныеДанные = Сред(ПроверенныеДанные, 2);
	
	///////////////////////////////////////////////////////////
	// Проверим правильность встраивания в объект владелец КИ.
	
	МетаДокументы = Метаданные.Документы;
	МетаТипыДокументы = Новый Массив;
	МетаТипыОстальные = Новый Массив;
	
	ПроверенныеДанные = "";
	
	Для Каждого ДанныеОбъектаСКИ Из ОбъектыВладельцевКИ Цикл
		ИмяВладельцаКИ = ДанныеОбъектаСКИ.Имя;
		
		МетаданныеВладельца = Метаданные.НайтиПоПолномуИмени(ИмяВладельцаКИ);
		ТабличнаяЧастьКИ    = МетаданныеВладельца.ТабличныеЧасти.Найти("КонтактнаяИнформация");
		
		Если ТабличнаяЧастьКИ = Неопределено Тогда
			ДобавитьОписаниеПроизвольнойОшибки(ТаблицаПроверки, ПодставитьПараметрыВСтроку(
				НСтр("ru = 'У объекта %1 не найдена табличная часть ""Контактная информация""'"),
				ИмяВладельцаКИ));
		КонецЕсли;
		
		СоответствиеТиповВТабличнойЧастиКИ = ДанныеОбъектаСКИ.Типы;
		Для Каждого ОписаниеРеквизитаОМ Из ТабличнаяЧастьКИ.Реквизиты Цикл
			РеквизитКИ = СоответствиеТиповВТабличнойЧастиКИ[ОписаниеРеквизитаОМ.Имя];
			Если РеквизитКИ = Неопределено И ОписаниеРеквизитаОМ.Имя <> "ВидДляСписка" Тогда
				ДобавитьОписаниеПроизвольнойОшибки(ТаблицаПроверки, ПодставитьПараметрыВСтроку(
					НСтр("ru = 'В табличной части КонтактнаяИнформация объекта (%2) на найден реквизит (%1).'"),
					ОписаниеРеквизитаОМ.Имя, ИмяВладельцаКИ));
			ИначеЕсли РеквизитКИ.Типы()[0] <> ОписаниеРеквизитаОМ.Тип.Типы()[0] Тогда
				ДобавитьОписаниеПроизвольнойОшибки(ТаблицаПроверки, ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Тип реквизита (%1) табличной части КонтактнаяИнформация объекта (%2) не совпадает с заданным в документации.'"),
					ОписаниеРеквизитаОМ.Имя, ИмяВладельцаКИ));
			КонецЕсли;
		КонецЦикла;
		
		ПроверенныеДанные = ПроверенныеДанные + "," + ИмяВладельцаКИ;
		
		// Накапливаем метаданные для контроля подписок.
		Если МетаДокументы.Содержит(МетаданныеВладельца) Тогда
			МетаТипыДокументы.Добавить(МетаданныеВладельца);
		Иначе
			МетаТипыОстальные.Добавить(МетаданныеВладельца);
		КонецЕсли;
	КонецЦикла;
	
	РезультатПроверки = ТаблицаПроверки.Добавить();
	РезультатПроверки.РеквизитПроверки = НСтр("ru = 'Проверка корректности встраивания КИ в объект владелец контактной информации'");
	РезультатПроверки.ПроверенныеДанные = Сред(ПроверенныеДанные, 2);
	
	// Типы подписок проверяем, только если они необходимы.
	Если МетаТипыОстальные.Количество() > 0 Тогда
		ДобавитьОшибкиНедостающихТиповВИсточникахПодписки(ТаблицаПроверки, "ЗаполнитьКонтактнуюИнформацию", "ОбработкаЗаполнения", МетаТипыОстальные);
	КонецЕсли;
	Если МетаТипыДокументы.Количество() > 0 Тогда
		ДобавитьОшибкиНедостающихТиповВИсточникахПодписки(ТаблицаПроверки, "ЗаполнитьКонтактнуюИнформациюДокумента", "ОбработкаЗаполнения", МетаТипыДокументы);
	КонецЕсли;
	
	//////////////////////////////////////////////////////////
	// Проверяем код в модуле формы объекта с КИ.
	
	ПроверенныеДанные = "";
	
	Для Каждого ДанныеОбъектаСКИ Из ОбъектыВладельцевКИ Цикл
		ЕстьДополнительныеТЧ = ДанныеОбъектаСКИ.ЕстьДополнительныеТЧ;
		ИмяВладельцаКИ       = ДанныеОбъектаСКИ.Имя;
		
		ИмяМодуля = ПолучитьИмяМодуляФормыОбъектаПоИмениОМ(ИмяВладельцаКИ);
		
		// Блок обработчиков
		Если Не ПроверитьНаличиеВызоваИзМетода(ИмяМодуля, "ПриСозданииНаСервере", Истина, "УправлениеКонтактнойИнформацией.ПриСозданииНаСервере(") Тогда
			ДобавитьОписаниеПроизвольнойОшибки(ТаблицаПроверки, ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не обнаружен вызов УправлениеКонтактнойИнформацией.ПриСозданииНаСервере в обработчике ПриСозданииНаСервере модуля формы объекта (%1).'"),
				ИмяВладельцаКИ));
			Продолжить;
		КонецЕсли;
		Если Не ПроверитьНаличиеВызоваИзМетода(ИмяМодуля, "ПриЧтенииНаСервере", Истина, "УправлениеКонтактнойИнформацией.ПриЧтенииНаСервере(") Тогда
			ДобавитьОписаниеПроизвольнойОшибки(ТаблицаПроверки, ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не обнаружен вызов УправлениеКонтактнойИнформацией.ПриЧтенииНаСервере в обработчике ПриЧтенииНаСервере модуля формы объекта (%1).'"),
				ИмяВладельцаКИ));
			Продолжить;
		КонецЕсли;
		Если Не ПроверитьНаличиеВызоваИзМетода(ИмяМодуля, "ОбработкаПроверкиЗаполненияНаСервере", Истина, "УправлениеКонтактнойИнформацией.ОбработкаПроверкиЗаполненияНаСервере(") Тогда
			ДобавитьОписаниеПроизвольнойОшибки(ТаблицаПроверки, ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не обнаружен вызов УправлениеКонтактнойИнформациейКлиент.ОбработкаПроверкиЗаполненияНаСервере в обработчике ОбработкаПроверкиЗаполненияНаСервере модуля формы объекта (%1).'"),
				ИмяВладельцаКИ));
			Продолжить;
		КонецЕсли;
		Если Не ПроверитьНаличиеВызоваИзМетода(ИмяМодуля, "ПередЗаписьюНаСервере", Истина, "УправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере(") Тогда
			ДобавитьОписаниеПроизвольнойОшибки(ТаблицаПроверки, ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не обнаружен вызов УправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере в обработчике ПередЗаписьюНаСервере модуля формы объекта (%1).'"),
				ИмяВладельцаКИ));
			Продолжить;
		КонецЕсли;
		
		Если ЕстьДополнительныеТЧ Тогда
			Если Не ПроверитьНаличиеВызоваИзМетода(ИмяМодуля, "ПослеЗаписиНаСервере", Истина, "УправлениеКонтактнойИнформацией.ПослеЗаписиНаСервере(") Тогда
				ДобавитьОписаниеПроизвольнойОшибки(ТаблицаПроверки, ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не обнаружен вызов УправлениеКонтактнойИнформацией.ПослеЗаписиНаСервере в обработчике ПослеЗаписиНаСервере модуля формы объекта (%1).'"),
					ИмяВладельцаКИ));
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		// Блок кода КИ
		Если Не ПроверитьНаличиеВызоваИзМетода(ИмяМодуля, "Подключаемый_КонтактнаяИнформацияПриИзменении", Истина, "УправлениеКонтактнойИнформациейКлиент.ПредставлениеПриИзменении(") Тогда
			ДобавитьОписаниеПроизвольнойОшибки(ТаблицаПроверки, ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не обнаружен вызов УправлениеКонтактнойИнформациейКлиент.ПредставлениеПриИзменении в обработчике Подключаемый_КонтактнаяИнформацияПриИзменении модуля формы объекта (%1).'"),
				ИмяВладельцаКИ));
			Продолжить;
		КонецЕсли;
		Если Не ПроверитьНаличиеВызоваИзМетода(ИмяМодуля, "Подключаемый_КонтактнаяИнформацияНачалоВыбора", Истина, "УправлениеКонтактнойИнформациейКлиент.ПредставлениеНачалоВыбора(") Тогда
			ДобавитьОписаниеПроизвольнойОшибки(ТаблицаПроверки, ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не обнаружен вызов УправлениеКонтактнойИнформациейКлиент.ПредставлениеНачалоВыбора в обработчике Подключаемый_КонтактнаяИнформацияНачалоВыбора модуля формы объекта (%1).'"),
				ИмяВладельцаКИ));
			Продолжить;
		КонецЕсли;
		Если Не ПроверитьНаличиеВызоваИзМетода(ИмяМодуля, "Подключаемый_КонтактнаяИнформацияОчистка", Истина, "УправлениеКонтактнойИнформациейКлиент.ПредставлениеОчистка(") Тогда
			ДобавитьОписаниеПроизвольнойОшибки(ТаблицаПроверки, ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не обнаружен вызов УправлениеКонтактнойИнформациейКлиент.ПредставлениеОчистка в обработчике Подключаемый_КонтактнаяИнформацияОчистка модуля формы объекта (%1).'"),
				ИмяВладельцаКИ));
			Продолжить;
		КонецЕсли;
		Если Не ПроверитьНаличиеВызоваИзМетода(ИмяМодуля, "Подключаемый_КонтактнаяИнформацияВыполнитьКоманду", Истина, "УправлениеКонтактнойИнформациейКлиент.ПодключаемаяКоманда(") Тогда
			ДобавитьОписаниеПроизвольнойОшибки(ТаблицаПроверки, ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не обнаружен вызов УправлениеКонтактнойИнформациейКлиент.ПодключаемаяКоманда в обработчике Подключаемый_КонтактнаяИнформацияВыполнитьКоманду модуля формы объекта (%1).'"),
				ИмяВладельцаКИ));
			Продолжить;
		КонецЕсли;
		Если Не ПроверитьНаличиеВызоваИзМетода(ИмяМодуля, "ОбновитьКонтактнуюИнформацию", Ложь, "УправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформацию(") Тогда
			ДобавитьОписаниеПроизвольнойОшибки(ТаблицаПроверки, ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не обнаружен вызов УправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформацию в функции ОбновитьКонтактнуюИнформацию модуля формы объекта (%1).'"),
				ИмяВладельцаКИ));
			Продолжить;
		КонецЕсли;
		
		ПроверенныеДанные = ПроверенныеДанные + "," + ИмяВладельцаКИ;
	КонецЦикла;
	
	РезультатПроверки = ТаблицаПроверки.Добавить();
	РезультатПроверки.РеквизитПроверки  = НСтр("ru = 'Проверка наличия вызовов в модуле формы объекта с контактной информацией'");
	РезультатПроверки.ПроверенныеДанные = Сред(ПроверенныеДанные, 2);
	
	Возврат ТаблицаПроверки;
	
КонецФункции

Функция Подключаемый_КонтактнаяИнформацияПроверитьРазмещениеСправочникаВидыКонтактнойИнформации()
	Возврат ПроверитьРазмещениеВКомандномИнтерфейсе("Справочник.ВидыКонтактнойИнформации");
КонецФункции

Функция Подключаемый_КонтактнаяИнформацияПроверитьРазмещениеСправочникаСтраныМира()
	Возврат ПроверитьРазмещениеВКомандномИнтерфейсе("Справочник.СтраныМира");
КонецФункции

Функция ПроверитьНаличиеВызоваИзМетода(Знач ИмяМодуля, Знач ИмяМетода, Знач ЭтоПроцедура, Знач СтрокаВызова)
	ТекстМетода = НайтиПроцедуруМодуля(ИмяМодуля, ИмяМетода, ЭтоПроцедура);
	
	Если ПустаяСтрока(ТекстМетода) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Прямой вызов
	Если СтрНайти(ТекстМетода, СтрокаВызова) > 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызов через вычисляемый общий модуль, должно быть имя модуля в кавычках и вызов имени метода.
	ПозицияТочки = СтрНайти(СтрокаВызова, ".");
	ИмяОбщегоМодуля = СокрЛП(Лев(СтрокаВызова, ПозицияТочки - 1));
	ИмяМетодаМодуля = СокрЛП(Сред(СтрокаВызова, ПозицияТочки + 1));
	
	Если Не ПустаяСтрока(ИмяОбщегоМодуля) И Не ПустаяСтрока(ИмяМетодаМодуля) Тогда
		Возврат СтрНайти(ТекстМетода, """" + ИмяОбщегоМодуля + """") > 0 И СтрНайти(ТекстМетода, "." + ИмяМетодаМодуля) > 0 
	КонецЕсли;
		
	Возврат Ложь;
КонецФункции

Процедура ДобавитьОшибкиНедостающихТиповВИсточникахПодписки(Знач ТаблицаПроверки, Знач ИмяПодписки, Знач ИмяСобытия, Знач НеобходимыеМетаданные)
	
	ТипыИсточниковПодписки = Новый Соответствие;
	Для Каждого МетаПодписка Из Метаданные.ПодпискиНаСобытия Цикл
		Если Строка(МетаПодписка.Событие) = ИмяСобытия Тогда
			Если СтрЗаканчиваетсяНа(МетаПодписка.Имя, ИмяПодписки) Тогда
				Для Каждого ТипИсточника Из МетаПодписка.Источник.Типы() Цикл
					ТипыИсточниковПодписки.Вставить(Метаданные.НайтиПоТипу(ТипИсточника), Истина);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ТипыИсточниковПодписки.Количество() = 0 Тогда
		ДобавитьОписаниеПроизвольнойОшибки(ТаблицаПроверки, ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не найдена подписка %1 для события %2'"),
			ИмяПодписки, ИмяСобытия));
		Возврат;
	КонецЕсли;
	
	// Проверяем все, что должно входить.
	Для Каждого Мета Из НеобходимыеМетаданные Цикл
		Если ТипыИсточниковПодписки[Мета] = Неопределено Тогда
			ДобавитьОписаниеПроизвольнойОшибки(ТаблицаПроверки, ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1 не входит в состав источников подписки на событие %2.'"),
				Мета.ПолноеИмя(), ИмяПодписки));
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область НапоминанияПользователя

Функция Подключаемый_НастройкиНапоминанияПользователяПроверитьТипыОбъектов()
	
	МассивФакт = Неопределено;
	
	ПроверитьТипы(МассивФакт, "ПодпискиНаСобытия.ПроверитьИзмененияДатВПредмете.Источник");
	ПроверитьТипы(МассивФакт, "ОбщиеКоманды.Напомнить.ТипПараметраКоманды");
	
	Возврат МассивФакт;
	
КонецФункции

#КонецОбласти

#Область НастройкаПорядкаЭлементов

Функция Подключаемый_НастройкаПорядкаЭлементовПроверитьСоставОбъектов()
	
	ТаблицаПроверки = НоваяТаблицаПроверки();
	
	// Проверяем явные установки типов по владельцам.
	ПроверитьСоставТиповПодписокНаСобытия(ТаблицаПроверки, "ЗаполнитьЗначениеРеквизитаУпорядочивания");
	ПроверитьСоставТиповПодписокНаСобытия(ТаблицаПроверки, "СброситьЗначениеРеквизитаУпорядочивания");
	
	// Поиск реквизита у объектов
	ПроверенныеДанные = "";
	
	Для Каждого ОМСправочники Из Метаданные.Справочники Цикл
		Если ОМСправочники.Реквизиты.Найти("РеквизитДопУпорядочивания") = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ПроверенныеДанные = ПроверенныеДанные + ОМСправочники.ПолноеИмя() + ",";
	КонецЦикла;
	
	Для Каждого ОМСправочники Из Метаданные.ПланыВидовХарактеристик Цикл
		Если ОМСправочники.Реквизиты.Найти("РеквизитДопУпорядочивания") = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ПроверенныеДанные = ПроверенныеДанные + ОМСправочники.ПолноеИмя() + ",";
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(ПроверенныеДанные) Тогда
		ПроверенныеДанные = Лев(ПроверенныеДанные, СтрДлина(ПроверенныеДанные)-1);
	КонецЕсли;
	СтрокаТипов = ТаблицаПроверки.Добавить();
	СтрокаТипов.РеквизитПроверки = НСтр("ru = 'Проверка у объектов с настройкой порядка элементов реквизита ""РеквизитДопУпорядочивания""'");
	СтрокаТипов.ПроверенныеДанные = ПроверенныеДанные;
	
	// Поиск процедур в модуле
	
	ИменаМодулей = СформироватьИменаМодулей(, Истина);
	
	ПроверенныеДанные = "";
	
	Для Каждого ИмяМодуля Из ИменаМодулей Цикл
		Если (ПроверитьВхождениеСтрокиВМодуль(ИмяМодуля, "ПереместитьЭлементВверх", Истина, "НастройкаПорядкаЭлементовКлиент.ПереместитьЭлементВверхВыполнить(Список, Элементы.Список)")
		   И ПроверитьВхождениеСтрокиВМодуль(ИмяМодуля, "ПереместитьЭлементВниз",  Истина, "НастройкаПорядкаЭлементовКлиент.ПереместитьЭлементВнизВыполнить(Список, Элементы.Список)"))
		 ИЛИ (ПроверитьВхождениеСтрокиВМодуль(ИмяМодуля, "ПереместитьЭлементВверхВыполнить", Истина, "НастройкаПорядкаЭлементовКлиент.ПереместитьЭлементВверхВыполнить(Список, Элементы.Список)")
		   И ПроверитьВхождениеСтрокиВМодуль(ИмяМодуля, "ПереместитьЭлементВнизВыполнить",  Истина, "НастройкаПорядкаЭлементовКлиент.ПереместитьЭлементВнизВыполнить(Список, Элементы.Список)")) Тогда
			Подстроки = РазложитьСтрокуВМассивПодстрок(ИмяМодуля, ".");
			ПроверенныеДанные = ПроверенныеДанные + Подстроки[0] + "." + Подстроки[1] + ",";
		КонецЕсли;
	КонецЦикла;
	
	// Для справочника ВариантыОтветовАнкет настройка порядка выполняется особым образом - добавляем ее в таблицу всегда.
	Если Метаданные.НайтиПоПолномуИмени("Справочник.ВариантыОтветовАнкет") <> Неопределено Тогда
		ПроверенныеДанные = ПроверенныеДанные + "Справочник.ВариантыОтветовАнкет" + ",";
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ПроверенныеДанные) Тогда
		ПроверенныеДанные = Лев(ПроверенныеДанные, СтрДлина(ПроверенныеДанные)-1);
	КонецЕсли;
	
	СтрокаТипов = ТаблицаПроверки.Добавить();
	СтрокаТипов.РеквизитПроверки = НСтр("ru = 'Проверка вхождения в код модуля формы списка требуемого кода'");
	СтрокаТипов.ПроверенныеДанные = ПроверенныеДанные;
	
	ИсключитьТипИзТаблицыПроверки(ТаблицаПроверки, Метаданные.Справочники.ИдентификаторыОбъектовМетаданных.ПолноеИмя());
	
	Возврат ТаблицаПроверки;
	
КонецФункции

#КонецОбласти

#Область НастройкиПрограммы

// Проверка внедрения не предусмотрена (не требуется).

#КонецОбласти

#Область ОбменДанными

// Для подсистемы реализованы следующие проверки:
//
// Табличные проверки:
// 1. Вопрос: "Принять решение о типе плана обмена (РИБ/Универсальный обмен/Универсальный обмен (без правил
// конвертации))".
// Проверки:
// •	флаг метаданных "РаспределеннаяИнформационнаяБаза"
// •	наличие макета "ПравилаОбмена"
// •	состав типа параметра общих команд.
//
// 2. Вопрос: "Принять решение об ограничении миграции данных для плана обмена".
// Проверки:
// •	наличие макета "ПравилаРегистрации"
// •	наличие формы "ФормаНастройкиУзла".
//
// 3. Вопрос: " Принять решение о планах обмена, которые используют функционал БСП".
// Проверки:
// •	наличие и значение соответствующей функции в модуле менеджера плана обмена.
//
// 3.1 Подчиненный вопрос: "Состав плана обмена: <ПолноеИмяПланаОбмена> ".
// Проверки:
// •	состав плана обмена
// •	состав подмножества подписок на события, определенного для этого плана обмена
// •	состав объектов для которых выполняется стандарт "ОбменДанными.Загрузка".
//
// Дополнительные (не табличные) проверки
// •	проверка состава плана обмена на наличие обязательных объектов и объектов исключений из состава
// •	проверка модуля менеджера плана обмена на наличие обязательных функций
// •	проверка на объекты метаданных исключения из подписок на события.
//
// Прочие проверки
// •	размещение в КИ общей команды "СинхронизацияДанных"
// •	правильное задание префикса информационной базы по умолчанию
// •	проверка типа параметра "Тип параметра команды" для общих команд.

// Прочие проверки

Функция Подключаемый_ОбменДаннымиПроверитьЗначениеПрефиксаИнформационнойБазыПоУмолчанию()
	
	// Возвращаемое значение функции.
	ТаблицаВозврата = НоваяТаблицаПроверки();
	
	ПрефиксИнформационнойБазыПоУмолчанию = Вычислить("ОбменДаннымиПереопределяемый.ПрефиксИнформационнойБазыПоУмолчанию()");
	Выполнить("ОбменДаннымиПереопределяемый.ПриОпределенииПрефиксаИнформационнойБазыПоУмолчанию(ПрефиксИнформационнойБазыПоУмолчанию)");
	
	СтрокаДанных = ТаблицаВозврата.Добавить();
	СтрокаДанных.РеквизитПроверки = НСтр("ru = 'Префикс информационной базы'");
	СтрокаДанных.ПроверенныеДанные = ПрефиксИнформационнойБазыПоУмолчанию;
	
	Если Не ЗначениеЗаполнено(ПрефиксИнформационнойБазыПоУмолчанию)
		ИЛИ СтрДлина(ПрефиксИнформационнойБазыПоУмолчанию) > 2 Тогда
		ДобавитьОписаниеПроизвольнойОшибки(ТаблицаВозврата, НСтр("ru = 'Обмен данными: Неправильно задан префикс информационной по умолчанию.'") );
	КонецЕсли;
	
	Возврат ТаблицаВозврата;
	
КонецФункции

Функция Подключаемый_ОбменДаннымиПроверитьРазмещениеКомандыОткрытьФормуУправленияОбменамиДанных()
	
	Возврат ПроверитьРазмещениеВКомандномИнтерфейсе("ОбщаяКоманда.СинхронизацияДанных");
	
КонецФункции

// Табличные проверки

Функция Подключаемый_ОбменДаннымиПроверитьТипПланаОбменаУниверсальный()
	
	// Возвращаемое значение функции.
	ТаблицаВозврата = Неопределено;
	
	// Флаг метаданных РаспределеннаяИБ.
	Результат = Новый Массив;
	
	ВсеПланыОбмена = ПланыОбменаБСП();
	
	Для Каждого ИмяПланаОбмена Из ВсеПланыОбмена Цикл
		
		Если ОбменДаннымиЭтоПланОбменаУниверсальногоОбмена(ИмяПланаОбмена) Тогда
			
			ПолноеИмяПланаОбмена = СтрЗаменить("ПланОбмена.[ИмяПланаОбмена]", "[ИмяПланаОбмена]", ИмяПланаОбмена);
			
			Результат.Добавить(ПолноеИмяПланаОбмена);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДобавитьОписаниеПроизвольнойПроверки(ТаблицаВозврата,
		НСтр("ru = 'ПланОбмена.Свойства.РаспределеннаяИнформационнаяБаза ИЛИ Не ПланОбмена.Макеты.ПравилаОбмена'"),
		МассивВСтроку(Результат));
	
	// Состав типа параметра общих команд.
	ПараметрыОбщихКоманд = ОбменДаннымиПараметрыОбщихКоманд();
	
	Для Каждого ПараметрыКоманды Из ПараметрыОбщихКоманд Цикл
		
		ИмяКоманды = СтрЗаменить("ОбщиеКоманды.[ИмяКоманды].ТипПараметраКоманды", "[ИмяКоманды]", ПараметрыКоманды.Имя);
		
		Если ПараметрыКоманды.ДляУниверсальногоОбмена Тогда
			
			МассивФакт = Неопределено;
			ПроверитьТипы(МассивФакт, ИмяКоманды);
			
			Результат = Новый Массив;
			
			Если МассивФакт.Количество() > 0 Тогда
				
				СоставКоманды = РазложитьСтрокуВМассивПодстрок(МассивФакт[0]["ПроверенныеДанные"]);
				
			КонецЕсли;
			
			Для Каждого ПолноеИмяПланаОбмена Из СоставКоманды Цикл
				
				Если ОбменДаннымиЭтоПланОбменаУниверсальногоОбмена(СтрЗаменить(ПолноеИмяПланаОбмена,"ПланОбмена.","")) Тогда
					
					Результат.Добавить(ПолноеИмяПланаОбмена);
					
				КонецЕсли;
				
			КонецЦикла;
			
			ДобавитьОписаниеПроизвольнойПроверки(ТаблицаВозврата, ИмяКоманды, МассивВСтроку(Результат));
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаВозврата;
	
КонецФункции

Функция Подключаемый_ОбменДаннымиПроверитьТипПланаОбменаУниверсальныйБезПравил()
	
	// Возвращаемое значение функции.
	ТаблицаВозврата = Неопределено;
	
	// Флаг метаданных РаспределеннаяИБ.
	Результат = Новый Массив;
	
	ВсеПланыОбмена = ПланыОбменаБСП();
	
	Для Каждого ИмяПланаОбмена Из ВсеПланыОбмена Цикл
		
		Если ОбменДаннымиЭтоПланОбменаУниверсальногоОбменаБезПравил(ИмяПланаОбмена) Тогда
			
			ПолноеИмяПланаОбмена = СтрЗаменить("ПланОбмена.[ИмяПланаОбмена]", "[ИмяПланаОбмена]", ИмяПланаОбмена);
			
			Результат.Добавить(ПолноеИмяПланаОбмена);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДобавитьОписаниеПроизвольнойПроверки(ТаблицаВозврата,
		НСтр("ru = 'Не ПланОбмена.Свойства.РаспределеннаяИнформационнаяБаза И Не ПланОбмена.Макеты.ПравилаОбмена'"),
		МассивВСтроку(Результат));
	
	// Состав типа параметра общих команд.
	ПараметрыОбщихКоманд = ОбменДаннымиПараметрыОбщихКоманд();
	
	Для Каждого ПараметрыКоманды Из ПараметрыОбщихКоманд Цикл
		
		ИмяКоманды = СтрЗаменить("ОбщиеКоманды.[ИмяКоманды].ТипПараметраКоманды", "[ИмяКоманды]", ПараметрыКоманды.Имя);
		
		Если ПараметрыКоманды.ДляУниверсальногоОбменаБезПравил Тогда
			
			МассивФакт = Неопределено;
			ПроверитьТипы(МассивФакт, ИмяКоманды);
			
			Результат = Новый Массив;
			
			Если МассивФакт.Количество() > 0 Тогда
				
				СоставКоманды = РазложитьСтрокуВМассивПодстрок(МассивФакт[0]["ПроверенныеДанные"]);
				
			КонецЕсли;
			
			Для Каждого ПолноеИмяПланаОбмена Из СоставКоманды Цикл
				
				Если ОбменДаннымиЭтоПланОбменаУниверсальногоОбменаБезПравил(СтрЗаменить(ПолноеИмяПланаОбмена,"ПланОбмена.","")) Тогда
					
					Результат.Добавить(ПолноеИмяПланаОбмена);
					
				КонецЕсли;
				
			КонецЦикла;
			
			ДобавитьОписаниеПроизвольнойПроверки(ТаблицаВозврата, ИмяКоманды, МассивВСтроку(Результат));
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаВозврата;
	
КонецФункции

Функция Подключаемый_ОбменДаннымиПроверитьТипПланаОбменаРИБ()
	
	// Флаг метаданных РаспределеннаяИБ.
	Результат = Новый Массив;
	
	ВсеПланыОбмена = ПланыОбменаБСП();
	
	Для Каждого ИмяПланаОбмена Из ВсеПланыОбмена Цикл
		
		Если ОбменДаннымиЭтоПланОбменаРИБ(ИмяПланаОбмена) Тогда
			
			ПолноеИмяПланаОбмена = СтрЗаменить("ПланОбмена.[ИмяПланаОбмена]", "[ИмяПланаОбмена]", ИмяПланаОбмена);
			
			Результат.Добавить(ПолноеИмяПланаОбмена);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаВозврата = Неопределено;
	ДобавитьОписаниеПроизвольнойПроверки(ТаблицаВозврата, "ПланОбмена.Свойства.РаспределеннаяИнформационнаяБаза", МассивВСтроку(Результат));
	
	// Факт наличия макета ПравилаОбмена - не проверяем для РИБ.
	
	// Состав типа параметра общих команд.
	ПараметрыОбщихКоманд = ОбменДаннымиПараметрыОбщихКоманд();
	
	Для Каждого ПараметрыКоманды Из ПараметрыОбщихКоманд Цикл
		
		ИмяКоманды = СтрЗаменить("ОбщиеКоманды.[ИмяКоманды].ТипПараметраКоманды", "[ИмяКоманды]", ПараметрыКоманды.Имя);
		
		Если ПараметрыКоманды.ДляОбменаРИБ Тогда
			
			МассивФакт = Неопределено;
			ПроверитьТипы(МассивФакт, ИмяКоманды);
			
			Результат = Новый Массив;
			
			Если МассивФакт.Количество() > 0 Тогда
				
				СоставКоманды = РазложитьСтрокуВМассивПодстрок(МассивФакт[0]["ПроверенныеДанные"]);
				
			КонецЕсли;
			
			Для Каждого ПолноеИмяПланаОбмена Из СоставКоманды Цикл
				
				Если ОбменДаннымиЭтоПланОбменаРИБ(СтрЗаменить(ПолноеИмяПланаОбмена,"ПланОбмена.","")) Тогда
					
					Результат.Добавить(ПолноеИмяПланаОбмена);
					
				КонецЕсли;
				
			КонецЦикла;
			
			// Особенность - план обмена РИБ может быть без макета ПРО (нет ограничения миграции),
			// тогда команда ЗагрузитьПравилаРегистрацииОбъектов не должна включать этот план обмена.
			Если ПараметрыКоманды.Имя = "ЗагрузитьПравилаРегистрацииОбъектов" Тогда
				
				ПланыОбменаРИБ = ОбменДаннымиПолучитьПланыОбменаРИБВерсии30();
				
				Для Каждого ИмяПланаОбмена Из ПланыОбменаРИБ Цикл
					
					Если Не ОбменДаннымиМакетПланаОбменаСуществует(ИмяПланаОбмена, "ПравилаРегистрации") Тогда
						
						ПолноеИмяПланаОбмена = "ПланОбмена.[ИмяПланаОбмена]";
						ПолноеИмяПланаОбмена = СтрЗаменить(ПолноеИмяПланаОбмена, "[ИмяПланаОбмена]", ИмяПланаОбмена);
						
						Если Результат.Найти(ПолноеИмяПланаОбмена) = Неопределено Тогда
							
							Результат.Добавить(ПолноеИмяПланаОбмена);
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			ДобавитьОписаниеПроизвольнойПроверки(ТаблицаВозврата, ИмяКоманды, МассивВСтроку(Результат));
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаВозврата;
	
КонецФункции


Функция Подключаемый_ОбменДаннымиПроверитьНаличиеОграниченияМиграцииДанных()
	
	// Возвращаемое значение функции.
	ТаблицаВозврата = Неопределено;
	
	// Наличие макета ПравилаРегистрации.
	Результат = Новый Массив;
	
	ВсеПланыОбмена = ПланыОбменаБСП();
	
	Для Каждого ИмяПланаОбмена Из ВсеПланыОбмена Цикл
		
		Если ОбменДаннымиМакетПланаОбменаСуществует(ИмяПланаОбмена, "ПравилаРегистрации") Тогда
			
			ПолноеИмяПланаОбмена = СтрЗаменить("ПланОбмена.[ИмяПланаОбмена]", "[ИмяПланаОбмена]", ИмяПланаОбмена);
			
			Результат.Добавить(ПолноеИмяПланаОбмена);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДобавитьОписаниеПроизвольнойПроверки(ТаблицаВозврата, "ПланОбмена.Макеты.ПравилаРегистрации", МассивВСтроку(Результат));
	
	// Наличие формы ФормаНастройкиУзла.
	Результат = Новый Массив;
	
	Для Каждого ИмяПланаОбмена Из ВсеПланыОбмена Цикл
		
		Если Метаданные.ПланыОбмена[ИмяПланаОбмена].Формы.Найти("ФормаНастройкиУзла") <> Неопределено Тогда
			
			ПолноеИмяПланаОбмена = СтрЗаменить("ПланОбмена.[ИмяПланаОбмена]", "[ИмяПланаОбмена]", ИмяПланаОбмена);
			
			Результат.Добавить(ПолноеИмяПланаОбмена);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДобавитьОписаниеПроизвольнойПроверки(ТаблицаВозврата, "ПланОбмена.Формы.ФормаНастройкиУзла", МассивВСтроку(Результат));
	
	Возврат ТаблицаВозврата;
	
КонецФункции

Функция Подключаемый_ОбменДаннымиПроверитьПланыОбменаИспользующиеФункционалБСП()
	
	ПланыОбмена30 = ПланыОбменаБСП();
	
	Результат = Новый Массив;
	
	Для Каждого ИмяПланаОбмена Из ПланыОбмена30 Цикл
		
		ПолноеИмяПланаОбмена = СтрЗаменить("ПланОбмена.[ИмяПланаОбмена]", "[ИмяПланаОбмена]", ИмяПланаОбмена);
		
		Результат.Добавить(ПолноеИмяПланаОбмена);
		
	КонецЦикла;
	
	ТаблицаВозврата = Неопределено;
	
	ДобавитьОписаниеПроизвольнойПроверки(ТаблицаВозврата, "ОбменДаннымиПереопределяемый.ПолучитьПланыОбмена()", МассивВСтроку(Результат));
	
	Возврат ТаблицаВозврата;
КонецФункции

Функция Подключаемый_ОбменДаннымиПроверитьСоставПланаОбмена(ОбъектПроверки = Неопределено)
	
	ИмяПланаОбмена = СтрЗаменить(ОбъектПроверки, "ПланОбмена.", "");
	
	ТаблицаВозврата = Неопределено;
	
	// состав плана обмена
	ПроверитьТипыСоставаПланаОбмена(ТаблицаВозврата, ИмяПланаОбмена, Истина);
	
	// Состав подписок на события для плана обмена.
	ИмяПодпискиНаСобытиеОбобщенное = "ПодпискиНаСобытия.[ИмяПланаОбмена]<ВидПодписки>";
	ИмяПодпискиНаСобытиеОбобщенное = СтрЗаменить(ИмяПодпискиНаСобытиеОбобщенное, "[ИмяПланаОбмена]", ИмяПланаОбмена);
	
	// Всего шесть видов подписок на события для каждого плана обмена:
	// <Имя плана обмена>ЗарегистрироватьИзменение.
	// <Имя плана обмена>ЗарегистрироватьИзменениеДокумента.
	// <Имя плана обмена>ЗарегистрироватьИзменениеНабораЗаписей.
	// <Имя плана обмена>ЗарегистрироватьИзменениеНабораЗаписейРасчета.
	// <Имя плана обмена>ЗарегистрироватьИзменениеКонстанты.
	// <Имя плана обмена>ЗарегистрироватьУдаление.
	
	СоставПодпискиОбщий = Новый Массив;
	
	СоставПодписки = ОбменДаннымиПолучитьСоставПодпискиНаСобытиеПоВиду(ИмяПланаОбмена, "ЗарегистрироватьИзменение");
	ДополнитьМассив(СоставПодпискиОбщий, СоставПодписки, Истина);
	
	СоставПодписки = ОбменДаннымиПолучитьСоставПодпискиНаСобытиеПоВиду(ИмяПланаОбмена, "ЗарегистрироватьИзменениеДокумента");
	ДополнитьМассив(СоставПодпискиОбщий, СоставПодписки, Истина);
	
	СоставПодписки = ОбменДаннымиПолучитьСоставПодпискиНаСобытиеПоВиду(ИмяПланаОбмена, "ЗарегистрироватьИзменениеНабораЗаписей");
	ДополнитьМассив(СоставПодпискиОбщий, СоставПодписки, Истина);
	
	СоставПодписки = ОбменДаннымиПолучитьСоставПодпискиНаСобытиеПоВиду(ИмяПланаОбмена, "ЗарегистрироватьИзменениеНабораЗаписейРасчета");
	ДополнитьМассив(СоставПодпискиОбщий, СоставПодписки, Истина);
	
	СоставПодписки = ОбменДаннымиПолучитьСоставПодпискиНаСобытиеПоВиду(ИмяПланаОбмена, "ЗарегистрироватьИзменениеКонстанты");
	ДополнитьМассив(СоставПодпискиОбщий, СоставПодписки, Истина);
	
	СоставПодписки = ОбменДаннымиПолучитьСоставПодпискиНаСобытиеПоВиду(ИмяПланаОбмена, "ЗарегистрироватьУдаление");
	ДополнитьМассив(СоставПодпискиОбщий, СоставПодписки, Истина);
	
	СоставПодпискиОбщийСИсключениями = СкопироватьМассив(СоставПодпискиОбщий);
	
	// Добавляем объекты метаданных исключения из состава подписок.
	ЭтоПланОбменаРИБ = ОбменДаннымиЭтоПланОбменаРИБ(ИмяПланаОбмена);
	ЭтоПланОбменаУниверсальногоОбменаБезПравил = ОбменДаннымиЭтоПланОбменаУниверсальногоОбменаБезПравил(ИмяПланаОбмена);
	
	Если ЭтоПланОбменаРИБ Тогда
		
		СоставПодписки = ОбменДаннымиОбъектыМетаданныхИсключенияСоставаПодписокНаСобытияРИБ();
		
	Иначе
		
		Если ЭтоПланОбменаУниверсальногоОбменаБезПравил Тогда
			
			СоставПодписки = ОбменДаннымиОбъектыМетаданныхИсключенияСоставаПодписокНаСобытияУОБезПравил();
			
		Иначе
			
			СоставПодписки = ОбменДаннымиОбъектыМетаданныхИсключенияСоставаПодписокНаСобытияУО();
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Удаляем подписку, если объекта метаданных нет в составе плана обмена.
	Для Каждого ОбъектМетаданныхПолноеИмя Из СкопироватьМассив(СоставПодписки) Цикл
		
		Если Метаданные.ПланыОбмена[ИмяПланаОбмена].Состав.Найти(Метаданные.НайтиПоПолномуИмени(ОбъектМетаданныхПолноеИмя)) = Неопределено Тогда
			
			УдалитьВсеВхожденияЗначенияИзМассива(СоставПодписки, ОбъектМетаданныхПолноеИмя);
			
		КонецЕсли;
		
	КонецЦикла;
	
	СправочникИОМ = "Справочник.ИдентификаторыОбъектовМетаданных";
	
	ДополнитьМассив(СоставПодпискиОбщийСИсключениями, СоставПодписки, Истина);
	
	ДобавитьОписаниеПроизвольнойПроверки(ТаблицаВозврата, ИмяПодпискиНаСобытиеОбобщенное, МассивВСтроку(СоставПодпискиОбщийСИсключениями));
	
	// Соблюдение стандарта "ОбменДанными.Загрузка" в обработчике "ПередЗаписью".
	Результат = ОбменДаннымиПолучитьОбъектыССоблюдениемСтандартаОбменДаннымиЗагрузка(ИмяПланаОбмена, "ПередЗаписью");
	
	Если ЭтоПланОбменаРИБ И Результат.Найти(СправочникИОМ) = Неопределено Тогда
		Результат.Добавить(СправочникИОМ); // Справочник ИОМ - исключение.
	КонецЕсли;
	
	ДобавитьОписаниеПроизвольнойПроверки(ТаблицаВозврата, "МодульОбъекта.Процедуры.ПередЗаписью.<ОбменДанными.Загрузка>", МассивВСтроку(Результат));
	
	// Соблюдение стандарта "ОбменДанными.Загрузка" в обработчике "ПриЗаписи".
	Результат = ОбменДаннымиПолучитьОбъектыССоблюдениемСтандартаОбменДаннымиЗагрузка(ИмяПланаОбмена, "ПриЗаписи");
	
	ДобавитьОписаниеПроизвольнойПроверки(ТаблицаВозврата, "МодульОбъекта.Процедуры.ПриЗаписи.<ОбменДанными.Загрузка>", МассивВСтроку(Результат));
	
	// Соблюдение стандарта "ОбменДанными.Загрузка" в обработчике "ПередУдалением".
	Результат = ОбменДаннымиПолучитьОбъектыССоблюдениемСтандартаОбменДаннымиЗагрузка(ИмяПланаОбмена, "ПередУдалением");
	
	Если ЭтоПланОбменаРИБ И Результат.Найти(СправочникИОМ) = Неопределено Тогда
		Результат.Добавить(СправочникИОМ); // Справочник ИОМ - исключение.
	КонецЕсли;
	
	ДобавитьОписаниеПроизвольнойПроверки(ТаблицаВозврата, "МодульОбъекта.Процедуры.ПередУдалением.<ОбменДанными.Загрузка>", МассивВСтроку(Результат));
	
	// ============================ {Начало}.
	// Произвольные (не табличные) проверки.
	
	// Проверка на объекты метаданных исключения из подписок на события.
	ОбменДаннымиПроверитьСоставПодписокНаОбъектыМетаданныхИсключения(ТаблицаВозврата, СоставПодпискиОбщий, ИмяПодпискиНаСобытиеОбобщенное);
	
	// Проверка состава плана обмена на наличие обязательных объектов и объектов исключений из состава.
	ОбменДаннымиПроверитьСоставПланаОбменаОбязательныеОбъектыМетаданныхИИсключения(ТаблицаВозврата, ИмяПланаОбмена);
	
	// Проверка модуля менеджера плана обмена на наличие обязательных функций.
	ОбменДаннымиПроверитьФункцииМодуляМенеджераПланаОбмена(ТаблицаВозврата, ИмяПланаОбмена);
	
	// Проверка модуля менеджера плана обмена на наличие обязательных функций.
	ОбменДаннымиПроверитьПроцедурыМодуляМенеджераПланаОбмена(ТаблицаВозврата, ИмяПланаОбмена);
	
	// ============================ {Окончание}.
	
	Возврат ТаблицаВозврата;
	
КонецФункции

// Вспомогательные процедуры и функции.

Процедура ОбменДаннымиПроверитьСоставПодписокНаОбъектыМетаданныхИсключения(ТаблицаВозврата, СоставПодписки, ИмяПодпискиНаСобытие)
	
	ИсключенияСоставаПодписок = ОбменДаннымиОбъектыМетаданныхИсключенияСоставаПодписокНаСобытия();
	
	ИзбыточныеЭлементы = Новый Массив;
	
	ВычислитьПересечениеМассивов(СоставПодписки, ИсключенияСоставаПодписок, , , ИзбыточныеЭлементы);
	
	Если ИзбыточныеЭлементы.Количество() > 0 Тогда
		
		ОписаниеОшибки = НСтр("ru = 'Обмен данными: Подписка на событие [ИмяПодпискиНаСобытие] НЕ должна содержать типы: [СтрокаТипов]'");
		ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "[ИмяПодпискиНаСобытие]", ИмяПодпискиНаСобытие);
		ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "[СтрокаТипов]", МассивВСтроку(ИзбыточныеЭлементы));
		
		ДобавитьОписаниеПроизвольнойОшибки(ТаблицаВозврата, ОписаниеОшибки);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбменДаннымиПроверитьСоставПланаОбменаОбязательныеОбъектыМетаданныхИИсключения(ТаблицаПроверяемыхТипов, ИмяПланаОбмена)
	
	ОбъектыПланаОбмена = ОбменДаннымиСоставПланаОбмена(ИмяПланаОбмена);
	
	ЭтоПланОбменаРИБ = ОбменДаннымиЭтоПланОбменаРИБ(ИмяПланаОбмена);
	ЭтоПланОбменаУниверсальногоОбменаБезПравил = ОбменДаннымиЭтоПланОбменаУниверсальногоОбменаБезПравил(ИмяПланаОбмена);
	
	Если ЭтоПланОбменаРИБ Тогда
		
		ОбязательныеОбъекты = ОбменДаннымиОбязательныеОбъектыМетаданныхПланаОбменаРИБ();
		ОбъектыИсключения = ОбменДаннымиОбъектыМетаданныхИсключенияПланаОбменаРИБ();
		
	Иначе
		
		Если ЭтоПланОбменаУниверсальногоОбменаБезПравил Тогда
			
			ОбязательныеОбъекты = ОбменДаннымиОбязательныеОбъектыМетаданныхПланаОбменаУниверсальногоОбменаБезПравил();
			ОбъектыИсключения = ОбменДаннымиОбъектыМетаданныхИсключенияПланаОбменаУниверсальногоОбменаБезПравил();
			
		Иначе
			
			ОбязательныеОбъекты = ОбменДаннымиОбязательныеОбъектыМетаданныхПланаОбменаУниверсальногоОбмена();
			ОбъектыИсключения = ОбменДаннымиОбъектыМетаданныхИсключенияПланаОбменаУниверсальногоОбмена();
			
		КонецЕсли;
		
	КонецЕсли;
	
	НедостающиеЭлементы = Новый Массив;
	ВычислитьПересечениеМассивов(ОбязательныеОбъекты, ОбъектыПланаОбмена, НедостающиеЭлементы);
	
	ИзбыточныеЭлементы = Новый Массив;
	ВычислитьПересечениеМассивов(ОбъектыИсключения, ОбъектыПланаОбмена, , , ИзбыточныеЭлементы);
	
	Если НедостающиеЭлементы.Количество() > 0 Тогда
		
		ОписаниеОшибки = НСтр("ru = 'Состав плана обмена [ИмяПланаОбмена] должен содержать типы: [СтрокаТипов]'");
		ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "[ИмяПланаОбмена]", ИмяПланаОбмена);
		ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "[СтрокаТипов]", МассивВСтроку(НедостающиеЭлементы));
		
		ДобавитьОписаниеПроизвольнойОшибки(ТаблицаПроверяемыхТипов, ОписаниеОшибки);
		
	КонецЕсли;
	
	Если ИзбыточныеЭлементы.Количество() > 0 Тогда
		
		ОписаниеОшибки = НСтр("ru = 'Состав плана обмена [ИмяПланаОбмена] НЕ должен содержать типы: [СтрокаТипов]'");
		ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "[ИмяПланаОбмена]", ИмяПланаОбмена);
		ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "[СтрокаТипов]", МассивВСтроку(ИзбыточныеЭлементы));
		
		ДобавитьОписаниеПроизвольнойОшибки(ТаблицаПроверяемыхТипов, ОписаниеОшибки);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбменДаннымиПроверитьФункцииМодуляМенеджераПланаОбмена(ТаблицаПроверяемыхТипов, ИмяПланаОбмена)
	
	ИмяМодуля = СтрЗаменить("ПланОбмена.[ИмяПланаОбмена].МодульМенеджера", "[ИмяПланаОбмена]", ИмяПланаОбмена);
	
	ФункцииДляПроверки = ОбменДаннымиОбязательныеФункцииМодуляМенеджераПлановОбмена();
	
	НедостающиеФункции = Новый Массив;
	
	Для Каждого ИмяФункции Из ФункцииДляПроверки Цикл
		
		ФункцияОтсутствует = ПустаяСтрока(НайтиПроцедуруМодуля(ИмяМодуля, ИмяФункции, Ложь));
		
		Если ФункцияОтсутствует Тогда
			
			НедостающиеФункции.Добавить(ИмяФункции);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НедостающиеФункции.Количество() > 0 Тогда
		
		ОписаниеОшибки = НСтр("ru = 'Обмен данными: Для плана обмена [ИмяПланаОбмена] в модуле менеджера должны быть определены функции: [Функции]'");
		ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "[ИмяПланаОбмена]", ИмяПланаОбмена);
		ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "[Функции]", МассивВСтроку(НедостающиеФункции));
		
		ДобавитьОписаниеПроизвольнойОшибки(ТаблицаПроверяемыхТипов, ОписаниеОшибки);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбменДаннымиПроверитьПроцедурыМодуляМенеджераПланаОбмена(ТаблицаПроверяемыхТипов, ИмяПланаОбмена)
	
	ИмяМодуля = СтрЗаменить("ПланОбмена.[ИмяПланаОбмена].МодульМенеджера", "[ИмяПланаОбмена]", ИмяПланаОбмена);
	
	ПроцедурыДляПроверки = ОбменДаннымиОбязательныеПроцедурыМодуляМенеджераПлановОбмена();
	
	НедостающиеПроцедуры = Новый Массив;
	
	Для Каждого ИмяПроцедуры Из ПроцедурыДляПроверки Цикл
		
		ПроцедураОтсутствует = ПустаяСтрока(НайтиПроцедуруМодуля(ИмяМодуля, ИмяПроцедуры, Истина));
		
		Если ПроцедураОтсутствует Тогда
			
			НедостающиеПроцедуры.Добавить(ИмяПроцедуры);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НедостающиеПроцедуры.Количество() > 0 Тогда
		
		ОписаниеОшибки = НСтр("ru = 'Обмен данными: Для плана обмена [ИмяПланаОбмена] в модуле менеджера должны быть определены процедуры: [Процедуры]'");
		ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "[ИмяПланаОбмена]", ИмяПланаОбмена);
		ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "[Процедуры]", МассивВСтроку(НедостающиеПроцедуры));
		
		ДобавитьОписаниеПроизвольнойОшибки(ТаблицаПроверяемыхТипов, ОписаниеОшибки);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбменДаннымиПараметрыОбщихКоманд_НоваяСтрока(ИмяКоманды, ДляОбменаРИБ, ДляУниверсальногоОбмена, ДляУниверсальногоОбменаБезПравил, ПараметрыОбщихКоманд)
	
	НоваяСтрока = ПараметрыОбщихКоманд.Добавить();
	НоваяСтрока.Имя                              = ИмяКоманды;
	НоваяСтрока.ДляОбменаРИБ                     = ДляОбменаРИБ;
	НоваяСтрока.ДляУниверсальногоОбмена          = ДляУниверсальногоОбмена;
	НоваяСтрока.ДляУниверсальногоОбменаБезПравил = ДляУниверсальногоОбменаБезПравил;
	
КонецПроцедуры

Функция ПланыОбменаБСП()
	
	Попытка
		Возврат Вычислить("ОбменДаннымиПовтИсп.ПланыОбменаБСП()");
	Исключение
		Возврат Новый Массив;
	КонецПопытки;
	
КонецФункции

Функция ОбменДаннымиЭтоПланОбменаБСП(ИмяПланаОбмена)
	
	Возврат ПланыОбменаБСП().Найти(ИмяПланаОбмена) <> Неопределено;
	
КонецФункции

Функция ОбменДаннымиЭтоПланОбменаРИБ(ИмяПланаОбмена)
	
	Возврат Метаданные.ПланыОбмена[ИмяПланаОбмена].РаспределеннаяИнформационнаяБаза
		И ОбменДаннымиЭтоПланОбменаБСП(ИмяПланаОбмена);
	
КонецФункции

Функция ОбменДаннымиЭтоПланОбменаУниверсальногоОбмена(ИмяПланаОбмена)
	
	Возврат Не ОбменДаннымиЭтоПланОбменаРИБ(ИмяПланаОбмена)
		И ОбменДаннымиМакетПланаОбменаСуществует(ИмяПланаОбмена, "ПравилаОбмена")
		И ОбменДаннымиЭтоПланОбменаБСП(ИмяПланаОбмена);
	
КонецФункции

Функция ОбменДаннымиЭтоПланОбменаУниверсальногоОбменаБезПравил(ИмяПланаОбмена)
	
	Возврат Не ОбменДаннымиЭтоПланОбменаРИБ(ИмяПланаОбмена)
		И Не ОбменДаннымиМакетПланаОбменаСуществует(ИмяПланаОбмена, "ПравилаОбмена")
		И ОбменДаннымиЭтоПланОбменаБСП(ИмяПланаОбмена);
	
КонецФункции

Функция ОбменДаннымиПолучитьПланыОбменаРИБВерсии30()
	
	// Возвращаемое значение функции.
	Результат = Новый Массив;
	
	ПланыОбменаБСП = ПланыОбменаБСП();
	
	Для Каждого ИмяПланаОбмена Из ПланыОбменаБСП Цикл
		
		Если ОбменДаннымиЭтоПланОбменаРИБ(ИмяПланаОбмена) Тогда
			
			Результат.Добавить(ИмяПланаОбмена);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

Функция ОбменДаннымиМакетПланаОбменаСуществует(ИмяПланаОбмена, ИмяМакета)
	
	Возврат Метаданные.ПланыОбмена[ИмяПланаОбмена].Макеты.Найти(ИмяМакета) <> Неопределено;
	
КонецФункции

Функция ОбменДаннымиПолучитьСоставПодпискиНаСобытие(ИмяПодписки)
	
	Результат = Новый Массив;
	
	МассивФакт = Неопределено;
	ПроверитьТипы(МассивФакт, СтрЗаменить("ПодпискиНаСобытия.[ИмяПодписки].Источник", "[ИмяПодписки]", ИмяПодписки));
	
	Если МассивФакт.Количество() > 0 Тогда
		
		Результат = РазложитьСтрокуВМассивПодстрок(МассивФакт[0]["ПроверенныеДанные"]);
		
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Функция ОбменДаннымиПолучитьСоставПодпискиНаСобытиеПоВиду(ИмяПланаОбмена, ВидПодписки)
	
	ИмяПодпискиНаСобытие = "[ИмяПланаОбмена][ВидПодписки]";
	
	ИмяПодпискиНаСобытие = СтрЗаменить(ИмяПодпискиНаСобытие, "[ИмяПланаОбмена]", ИмяПланаОбмена);
	ИмяПодпискиНаСобытие = СтрЗаменить(ИмяПодпискиНаСобытие, "[ВидПодписки]",    ВидПодписки);
	
	ОбъектМетаданных = ОпределитьПодпискуНаСобытиеПоИмени(ИмяПодпискиНаСобытие);
	
	Если ОбъектМетаданных = Неопределено Тогда
		
		Возврат Новый Массив;
		
	КонецЕсли;
	
	Возврат ОбменДаннымиПолучитьСоставПодпискиНаСобытие(ОбъектМетаданных.Имя);
	
КонецФункции

Функция ОбменДаннымиПолучитьОбъектыССоблюдениемСтандартаОбменДаннымиЗагрузка(ИмяПланаОбмена, ИмяПроцедуры)
	
	// Возвращаемое значение функции.
	Результат = Новый Массив;
	
	// Определяем состав плана обмена.
	СоставПланаОбмена = ОбменДаннымиСоставПланаОбмена(ИмяПланаОбмена);
	
	Для Каждого ИмяОбъектаМетаданных Из СоставПланаОбмена Цикл
		
		Если СтрНайти(ИмяОбъектаМетаданных, "Константа.") <> 0 Тогда
			
			ТипМодуля = "МодульМенеджераЗначения";
			
		ИначеЕсли СтрНайти(ИмяОбъектаМетаданных, "РегистрСведений.") <> 0 Тогда
			
			ТипМодуля = "МодульНабораЗаписей";
			
		ИначеЕсли СтрНайти(ИмяОбъектаМетаданных, "Задача.") <> 0 Тогда
			
			ТипМодуля = "МодульКоманды";
			
		Иначе
			
			ТипМодуля = "МодульОбъекта";
			
		КонецЕсли;
		
		ИмяМодуля = "[ИмяОбъектаМетаданных].[ТипМодуля]";
		
		ИмяМодуля = СтрЗаменить(ИмяМодуля, "[ИмяОбъектаМетаданных]", ИмяОбъектаМетаданных);
		ИмяМодуля = СтрЗаменить(ИмяМодуля, "[ТипМодуля]", ТипМодуля);
		
		ТекстПроцедуры = НайтиПроцедуруМодуля(ИмяМодуля, ИмяПроцедуры);
		
		Если ПустаяСтрока(ТекстПроцедуры) Тогда // Процедуры-обработчика нет; стандарт соблюдается.
			
			Результат.Добавить(ИмяОбъектаМетаданных);
			
		// Есть процедура, есть вызов "ОбменДанными.Загрузка"; стандарт соблюдается.
		ИначеЕсли СтрНайти(ВРег(ТекстПроцедуры), ВРег("ОбменДанными.Загрузка")) <> 0 Тогда
			
			Результат.Добавить(ИмяОбъектаМетаданных);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

Функция ОбменДаннымиСоставПланаОбмена(ИмяПланаОбмена)
	
	Возврат РазложитьСтрокуВМассивПодстрок(ПолучитьТипыСоставаПланаОбмена(ИмяПланаОбмена));
	
КонецФункции

// Константы

Функция ОбменДаннымиОбязательныеОбъектыМетаданныхПланаОбменаРИБ()
	
	Массив = Новый Массив;
	
	ПолучитьОбязательныеОбъектыПланаОбменаРИБ(Массив);
	
	Возврат Массив;
КонецФункции

Функция ОбменДаннымиОбязательныеОбъектыМетаданныхПланаОбменаУниверсальногоОбмена()
	
	Массив = Новый Массив;
	
	Массив.Добавить("РегистрСведений.СоответствияОбъектовИнформационныхБаз");
	
	ПолучитьОбязательныеОбъектыПланаОбменаНеРИБ(Массив);
	
	Возврат Массив;
КонецФункции

Функция ОбменДаннымиОбязательныеОбъектыМетаданныхПланаОбменаУниверсальногоОбменаБезПравил()
	
	Массив = Новый Массив;
	
	ПолучитьОбязательныеОбъектыПланаОбменаНеРИБ(Массив);
	
	Возврат Массив;
КонецФункции

Функция ОбменДаннымиОбъектыМетаданныхИсключенияПланаОбменаРИБ()
	
	Массив = Новый Массив;
	
	ПолучитьОбъектыИсключенияПланаОбменаРИБ(Массив);
	
	Возврат Массив;
КонецФункции

Функция ОбменДаннымиОбъектыМетаданныхИсключенияПланаОбменаУниверсальногоОбмена()
	
	Массив = Новый Массив;
	
	ПолучитьОбъектыИсключенияПланаОбменаНеРИБ(Массив);
	
	Возврат Массив;
КонецФункции

Функция ОбменДаннымиОбъектыМетаданныхИсключенияПланаОбменаУниверсальногоОбменаБезПравил()
	
	Массив = Новый Массив;
	
	// подсистема обмена данными
	Массив.Добавить("РегистрСведений.СоответствияОбъектовИнформационныхБаз");
	
	ПолучитьОбъектыИсключенияПланаОбменаНеРИБ(Массив);
	
	Возврат Массив;
КонецФункции

Функция ОбменДаннымиОбъектыМетаданныхИсключенияСоставаПодписокНаСобытияРИБ()
	
	Массив = Новый Массив;
	
	ПолучитьОбъектыИспользуемыеТолькоДляНачальногоОбразаРИБ(Массив);
	
	Возврат Массив;
КонецФункции

Функция ОбменДаннымиОбъектыМетаданныхИсключенияСоставаПодписокНаСобытияУО()
	
	Массив = Новый Массив;
	
	Массив.Добавить("РегистрСведений.СоответствияОбъектовИнформационныхБаз");
	
	Возврат Массив;
КонецФункции

Функция ОбменДаннымиОбъектыМетаданныхИсключенияСоставаПодписокНаСобытияУОБезПравил()
	
	Массив = Новый Массив;
	
	Возврат Массив;
КонецФункции

Функция ОбменДаннымиОбъектыМетаданныхИсключенияСоставаПодписокНаСобытия()
	
	Массив = Новый Массив;
	
	ПолучитьОбъектыИспользуемыеТолькоДляНачальногоОбразаРИБ(Массив);
	
	Возврат Массив;
КонецФункции

Функция ОбменДаннымиОбязательныеФункцииМодуляМенеджераПлановОбмена()
	
	Результат = Новый Массив;
	Результат.Добавить("ИмяФайлаНастроекДляПриемника");
	Результат.Добавить("НастройкаОтборовНаУзле");
	Результат.Добавить("ЗначенияПоУмолчаниюНаУзле");
	Результат.Добавить("ОписаниеОграниченийПередачиДанных");
	Результат.Добавить("ОписаниеЗначенийПоУмолчанию");
	Результат.Добавить("ИспользоватьПомощникСозданияОбменаДанными");
	Результат.Добавить("ИмяФормыСозданияНачальногоОбраза");
	Результат.Добавить("ИспользуемыеТранспортыСообщенийОбмена");
	
	Результат.Добавить("НастройкаОтборовНаУзлеБазыКорреспондента");
	Результат.Добавить("ЗначенияПоУмолчаниюНаУзлеБазыКорреспондента");
	Результат.Добавить("ОписаниеОграниченийПередачиДанныхБазыКорреспондента");
	Результат.Добавить("ОписаниеЗначенийПоУмолчаниюБазыКорреспондента");
	
	Возврат Результат;
КонецФункции

Функция ОбменДаннымиОбязательныеПроцедурыМодуляМенеджераПлановОбмена()
	
	Результат = Новый Массив;
	Результат.Добавить("ОпределитьНастройки");
	Возврат Результат;
	
КонецФункции

Функция ОбменДаннымиПараметрыОбщихКоманд()
	
	Результат = Новый ТаблицаЗначений;
	
	Результат.Колонки.Добавить("Имя");
	Результат.Колонки.Добавить("ДляОбменаРИБ");
	Результат.Колонки.Добавить("ДляУниверсальногоОбмена");
	Результат.Колонки.Добавить("ДляУниверсальногоОбменаБезПравил");
	
	ОбменДаннымиПараметрыОбщихКоманд_НоваяСтрока("Синхронизировать",                                  Истина, Истина, Истина, Результат);
	ОбменДаннымиПараметрыОбщихКоманд_НоваяСтрока("СинхронизироватьСДополнительнымиПараметрами",       Ложь,   Истина, Ложь,   Результат);
	ОбменДаннымиПараметрыОбщихКоманд_НоваяСтрока("НастроитьПараметрыТранспортаСообщенийОбмена",       Истина, Истина, Истина, Результат);
	ОбменДаннымиПараметрыОбщихКоманд_НоваяСтрока("ЗагрузитьПравилаКонвертацииОбъектов",               Ложь,   Истина, Ложь,   Результат);
	ОбменДаннымиПараметрыОбщихКоманд_НоваяСтрока("ЗагрузитьПравилаРегистрацииОбъектов",               Истина, Истина, Истина, Результат);
	ОбменДаннымиПараметрыОбщихКоманд_НоваяСтрока("СценарииСинхронизации",                             Истина, Истина, Истина, Результат);
	ОбменДаннымиПараметрыОбщихКоманд_НоваяСтрока("СобытияОтправки",                                   Истина, Истина, Истина, Результат);
	ОбменДаннымиПараметрыОбщихКоманд_НоваяСтрока("СобытияПолучения",                                  Истина, Истина, Истина, Результат);
	ОбменДаннымиПараметрыОбщихКоманд_НоваяСтрока("ПолучитьНастройкиСинхронизацииДляДругойПрограммы",  Ложь,   Истина, Истина, Результат);
	ОбменДаннымиПараметрыОбщихКоманд_НоваяСтрока("СоставОтправляемыхДанных",                          Истина, Истина, Истина, Результат);
	ОбменДаннымиПараметрыОбщихКоманд_НоваяСтрока("УдалитьНастройкуСинхронизации",                     Истина, Истина, Истина, Результат);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ОбновлениеВерсииИБ

Функция Подключаемый_ОбновлениеВерсииИБПроверитьРазмещениеОбъектов()
	
	РезультатПроверки = ПроверитьРазмещениеВКомандномИнтерфейсе("ОбщаяФорма.ОписаниеИзмененийПрограммы");
	ПроверитьРазмещениеВКомандномИнтерфейсе("Обработка.РезультатыОбновленияПрограммы", РезультатПроверки);
	
	Если Метаданные.ОбщиеМакеты.Найти("ОписаниеИзмененийСистемы") = Неопределено Тогда
		ДобавитьОписаниеПроизвольнойОшибки(РезультатПроверки,
			НСтр("ru = 'В конфигурации не создан общий макет ОписаниеИзмененийСистемы.'"));
	КонецЕсли;
		
	Возврат РезультатПроверки;
КонецФункции

#КонецОбласти

#Область ОбновлениеКонфигурации

Функция Подключаемый_ОбновлениеКонфигурацииПроверитьРазмещениеОбработки()
	Возврат ПроверитьРазмещениеВКомандномИнтерфейсе("Обработка.ПоискИУстановкаОбновлений");
КонецФункции

#КонецОбласти

#Область Организации

Функция Подключаемый_ОрганизацииПроверитьРазмещениеСправочника()
	Возврат	ПроверитьРазмещениеВКомандномИнтерфейсе("Справочник.Организации");
КонецФункции

#КонецОбласти

#Область ОтправкаSMS

Функция Подключаемый_ОтправкаSMSПроверитьРазмещениеФормыНастройки()
	РезультатПроверки = ПроверитьРазмещениеВКомандномИнтерфейсе("ОбщаяФорма.НастройкаОтправкиSMS");
	Возврат РезультатПроверки;
КонецФункции

#КонецОбласти

#Область ОценкаПроизводительности

Функция Подключаемый_ОценкаПроизводительностиПроверитьРазмещениеОбъектов()
	
	Возврат ПроверитьРазмещениеВКомандномИнтерфейсе("Справочник.КлючевыеОперации");
	
КонецФункции

#КонецОбласти

#Область Печать

Функция Подключаемый_ПечатьПроверитьСоставОбъектов()
	
	ТаблицаПроверки = НоваяТаблицаПроверки();
	
	МодульУправлениеПечатьюПереопределяемый = Неопределено;
	ИмяМодуля = "УправлениеПечатьюПереопределяемый";
	Попытка
		МодульУправлениеПечатьюПереопределяемый = Вычислить(ИмяМодуля);
	Исключение
		Возврат ТаблицаПроверки;
	КонецПопытки;
	
	МодульУправлениеПечатью = Неопределено;
	ИмяМодуля = "УправлениеПечатью";
	Попытка
		МодульУправлениеПечатью = Вычислить(ИмяМодуля);
	Исключение
		Возврат ТаблицаПроверки;
	КонецПопытки;
	
	СписокОбъектов = Новый СписокЗначений;
	МодульУправлениеПечатьюПереопределяемый.ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов);
	
	ПроверяемыеОбъекты = Новый Массив;
	ИменаОбъектов = Новый Массив;
	Для Каждого Элемент Из СписокОбъектов Цикл
		ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗнч(Элемент.Значение));
		ПроверяемыеОбъекты.Добавить(ОбъектМетаданных);
		ИменаОбъектов.Добавить(ОбъектМетаданных.ПолноеИмя());
	КонецЦикла;
	
	// Список объектов, где запланировано внедрение.
	
	ПроверкаНаличияДобавитьКомандыПечати = ТаблицаПроверки.Добавить();
	ПроверкаНаличияДобавитьКомандыПечати.РеквизитПроверки = НСтр("ru = 'Состав объектов в процедуре УправлениеПечатьюПереопределяемый.ПриОпределенииОбъектовСКомандамиПечати()'");
	ПроверкаНаличияДобавитьКомандыПечати.ПроверенныеДанные = СтрСоединить(ИменаОбъектов, ",");
	
	// Список объектов, где обнаружена процедура ДобавитьКомандыПечати.
	
	ПроверкаНаличияДобавитьКомандыПечати = ТаблицаПроверки.Добавить();
	ПроверкаНаличияДобавитьКомандыПечати.РеквизитПроверки = НСтр("ru = 'Отсутствует процедура ""ДобавитьКомандыПечати"" в модуле менеджера объекта'");
	Для Каждого ИмяОбъекта Из ИменаОбъектов Цикл
		ТекстПроцедуры = НайтиПроцедуруМодуля(ИмяОбъекта + ".МодульМенеджера", "ДобавитьКомандыПечати", Истина);
		Если Не ПустаяСтрока(ТекстПроцедуры) Тогда 
			ДобавитьОбъектВПроверенныеДанные(ПроверкаНаличияДобавитьКомандыПечати, ИмяОбъекта);
		КонецЕсли;
	КонецЦикла;
	
	// Проверка встраивания в формах.
	
	ПроверкаОсновнойФормыОбъектаПриСозданииНаСервере = ТаблицаПроверки.Добавить();
	ПроверкаОсновнойФормыОбъектаПриСозданииНаСервере.РеквизитПроверки = НСтр("ru = 'Отсутствует вызов УправлениеПечатью.ПриСозданииНаСервере в основной форме объекта'");
	ПроверкаОсновнойФормыОбъектаПодключаемыйВыполнитьКомандуПечати = ТаблицаПроверки.Добавить();
	ПроверкаОсновнойФормыОбъектаПодключаемыйВыполнитьКомандуПечати.РеквизитПроверки = НСтр("ru = 'Отсутствует обработчик Подключаемый_ВыполнитьКомандуПечати в основной форме объекта'");
	
	ПроверкаОсновнойФормыСпискаПриСозданииНаСервере = ТаблицаПроверки.Добавить();
	ПроверкаОсновнойФормыСпискаПриСозданииНаСервере.РеквизитПроверки = НСтр("ru = 'Отсутствует вызов УправлениеПечатью.ПриСозданииНаСервере в основной форме списка'");
	ПроверкаОсновнойФормыСпискаПодключаемыйВыполнитьКомандуПечати = ТаблицаПроверки.Добавить();
	ПроверкаОсновнойФормыСпискаПодключаемыйВыполнитьКомандуПечати.РеквизитПроверки = НСтр("ru = 'Отсутствует обработчик Подключаемый_ВыполнитьКомандуПечати в основной форме списка'");
	
	ПроверкаОсновнойФормыПриСозданииНаСервере = ТаблицаПроверки.Добавить();
	ПроверкаОсновнойФормыПриСозданииНаСервере.РеквизитПроверки = НСтр("ru = 'Отсутствует вызов УправлениеПечатью.ПриСозданииНаСервере в основной форме'");
	ПроверкаОсновнойФормыПодключаемыйВыполнитьКомандуПечати = ТаблицаПроверки.Добавить();
	ПроверкаОсновнойФормыПодключаемыйВыполнитьКомандуПечати.РеквизитПроверки = НСтр("ru = 'Отсутствует обработчик Подключаемый_ВыполнитьКомандуПечати в основной форме'");
	
	Для Каждого ИмяОбъекта Из ИменаОбъектов Цикл
		ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ИмяОбъекта);
		Если Метаданные.ЖурналыДокументов.Содержит(ОбъектМетаданных) Тогда
			ОсновнаяФорма = ОбъектМетаданных.ОсновнаяФорма;
			ОсновнаяФормаОбъекта = Неопределено;
			ОсновнаяФормаСписка = Неопределено;
		ИначеЕсли Метаданные.Обработки.Содержит(ОбъектМетаданных)
			Или Метаданные.Отчеты.Содержит(ОбъектМетаданных) Тогда
				ОсновнаяФорма = Неопределено; // Не выполнять проверку формы.
				ОсновнаяФормаОбъекта = Неопределено;
				ОсновнаяФормаСписка = Неопределено;
		Иначе
			ОсновнаяФорма = Неопределено;
			ОсновнаяФормаОбъекта = ОбъектМетаданных.ОсновнаяФормаОбъекта;
			ОсновнаяФормаСписка = ОбъектМетаданных.ОсновнаяФормаСписка;
		КонецЕсли;
		
		ПроверитьНаличиеВызоваУправлениеПечатьюПриСозданииНаСервере(ПроверкаОсновнойФормыОбъектаПриСозданииНаСервере, ИмяОбъекта, ОсновнаяФормаОбъекта);
		ПроверитьНаличиеВызоваУправлениеПечатьюПриСозданииНаСервере(ПроверкаОсновнойФормыСпискаПриСозданииНаСервере, ИмяОбъекта, ОсновнаяФормаСписка);
		ПроверитьНаличиеВызоваУправлениеПечатьюПриСозданииНаСервере(ПроверкаОсновнойФормыПриСозданииНаСервере, ИмяОбъекта, ОсновнаяФорма);
		
		ПроверитьНаличиеПроцедурыПодключаемыйВыполнитьКомандуПечати(ПроверкаОсновнойФормыОбъектаПодключаемыйВыполнитьКомандуПечати, ИмяОбъекта, ОсновнаяФормаОбъекта);
		ПроверитьНаличиеПроцедурыПодключаемыйВыполнитьКомандуПечати(ПроверкаОсновнойФормыСпискаПодключаемыйВыполнитьКомандуПечати, ИмяОбъекта, ОсновнаяФормаСписка);
		ПроверитьНаличиеПроцедурыПодключаемыйВыполнитьКомандуПечати(ПроверкаОсновнойФормыПодключаемыйВыполнитьКомандуПечати, ИмяОбъекта, ОсновнаяФорма);
		
	КонецЦикла;
	
	Возврат ТаблицаПроверки;
	
КонецФункции

Процедура ПроверитьНаличиеВызоваУправлениеПечатьюПриСозданииНаСервере(Проверка, ИмяОбъекта, Форма)
	Если Форма = Неопределено Тогда
		ДобавитьОбъектВПроверенныеДанные(Проверка, ИмяОбъекта);
	Иначе
		ТекстПроцедуры = НайтиПроцедуруМодуля(Форма.ПолноеИмя() + ".Форма.Модуль", "ПриСозданииНаСервере", Истина);
		Если СтрНайти(ТекстПроцедуры, Символы.Таб + "УправлениеПечатью.ПриСозданииНаСервере(") > 0 Тогда
			ДобавитьОбъектВПроверенныеДанные(Проверка, ИмяОбъекта);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ПроверитьНаличиеПроцедурыПодключаемыйВыполнитьКомандуПечати(Проверка, ИмяОбъекта, Форма)
	Если Форма = Неопределено Тогда
		ДобавитьОбъектВПроверенныеДанные(Проверка, ИмяОбъекта);
	Иначе
		ТекстПроцедуры = НайтиПроцедуруМодуля(Форма.ПолноеИмя() + ".Форма.Модуль", "Подключаемый_ВыполнитьКомандуПечати", Истина);
		Если Не ПустаяСтрока(ТекстПроцедуры) Тогда
			ДобавитьОбъектВПроверенныеДанные(Проверка, ИмяОбъекта);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ДобавитьОбъектВПроверенныеДанные(Проверка, ИмяОбъекта)
	Если Не ПустаяСтрока(Проверка.ПроверенныеДанные) Тогда
		Проверка.ПроверенныеДанные = Проверка.ПроверенныеДанные + ",";
	КонецЕсли;
	Проверка.ПроверенныеДанные = Проверка.ПроверенныеДанные + ИмяОбъекта;
КонецПроцедуры

Функция Подключаемый_ПечатьПроверитьРазмещениеРегистраСведенийПользовательскиеМакетыПечати()
	Возврат ПроверитьРазмещениеВКомандномИнтерфейсе("РегистрСведений.ПользовательскиеМакетыПечати");
КонецФункции

#КонецОбласти

#Область ПолнотекстовыйПоиск

Функция Подключаемый_ПолнотекстовыйПоискПроверитьРазмещениеОбработкиПоискВДанных()
	Возврат ПроверитьРазмещениеВКомандномИнтерфейсе("Обработка.ПолнотекстовыйПоискВДанных");
КонецФункции

#КонецОбласти

#Область ПолучениеФайловИзИнтернета

Функция Подключаемый_ПолучениеФайловИзИнтернетаПроверитьРазмещениеОбъектов()
	
	ТаблицаПроверки = ПроверитьРазмещениеВКомандномИнтерфейсе("ОбщаяФорма.ПараметрыПроксиСервера");
	
	СписокНеПроверяемых = НоваяТаблицаПроверки();
	ДобавитьНеПроверяемуюСтроку(СписокНеПроверяемых,
		НСтр("ru = 'Разместите в форме персональных настроек команду для открытия формы ПараметрыПроксиСервера.'"),
		"Произвольная", НСтр("ru = 'Получение файлов из Интернета'"));
	
	РезультатПроверки = Новый Структура("ТаблицаПроверки, ТаблицаНеПроверяемых", ТаблицаПроверки, СписокНеПроверяемых);
	Возврат РезультатПроверки;

КонецФункции

#КонецОбласти

#Область Пользователи

Функция Подключаемый_ПользователиПроверитьСоставОбъектов()
	
	ТаблицаПроверки = НоваяТаблицаПроверки();
	
	ПроверитьТипы(ТаблицаПроверки, "ОпределяемыеТипы.ВнешнийПользователь.Тип");
	ПроверитьТипы(ТаблицаПроверки, "Справочники.ВнешниеПользователи.Команды.ВнешнийДоступ.ТипПараметраКоманды");
	
	РезультатПроверки = ПроверитьТипы(ТаблицаПроверки, "ПодпискиНаСобытия.ОбновитьПредставлениеВнешнегоПользователя.Источник");
	УдалитьРегистрациюОбъекта(РезультатПроверки, "Справочник.ВнешниеПользователи");
	
	Если ПодсистемаВнедрена("УправлениеДоступом") Тогда
		РезультатПроверки = ПроверитьТипы(ТаблицаПроверки, "ОпределяемыеТипы.Пользователь.Тип");
		УдалитьРегистрациюОбъекта(РезультатПроверки, "Справочник.Пользователи");
	КонецЕсли;
	
	Возврат ТаблицаПроверки;
	
КонецФункции

Функция Подключаемый_ПользователиПроверитьРазмещениеСправочникаПользователи()
	
	Возврат ПроверитьРазмещениеВКомандномИнтерфейсе("Справочник.Пользователи");
	
КонецФункции

Функция Подключаемый_ПользователиПроверитьРазмещениеСправочникаВнешниеПользователи()
	Возврат ПроверитьРазмещениеВКомандномИнтерфейсе("Справочник.ВнешниеПользователи");
КонецФункции

Функция Подключаемый_ПользователиПроверитьРазмещениеСправочникаГруппыПользователи()
	Возврат ПроверитьРазмещениеВКомандномИнтерфейсе("Справочник.ГруппыПользователей");
КонецФункции

Функция Подключаемый_ПользователиПроверитьРазмещениеСправочникаГруппыВнешнихПользователей()
	Возврат ПроверитьРазмещениеВКомандномИнтерфейсе("Справочник.ГруппыВнешнихПользователей");
КонецФункции

Функция Подключаемый_ПользователиМестоВКИДляОбработкиНастройкиПользователей()
	
	Результат = ПроверитьРазмещениеВКомандномИнтерфейсе("Обработка.НастройкиПользователей");
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПрефиксацияОбъектов

// Для подсистемы реализованы следующие проверки:
//
// Проверка состава подписок на события назначения префиксов
// проверка пересечения составов подписок на события назначения префиксов
// проверка задания подписки на событие переназначения номера документа по дате
// проверка задания подписки на событие переназначения номера документа по дате и организации.

// Проверка подписок назначения префиксов.

Функция Подключаемый_ПрефиксацияОбъектовПроверитьСоставОбъектовСПрефиксомОрганизации()
	
	ТаблицаВозврата = НоваяТаблицаПроверки();
	
	СоставПодпискиОбщий = Новый Массив;
	
	ПолучитьСоставПодпискиПоИмениОбработчика(СоставПодпискиОбщий, "ПрефиксацияОбъектовСобытия.УстановитьПрефиксОрганизации");
	ПолучитьСоставПодпискиПоИмениОбработчика(СоставПодпискиОбщий, "ПрефиксацияОбъектовСобытия.УстановитьПрефиксИнформационнойБазыИОрганизации");
	
	РеквизитПроверки = НСтр("ru = 'Ожидается наличие подписки на событие с обработчиком: ПрефиксацияОбъектовСобытия.УстановитьПрефиксОрганизации ИЛИ ПрефиксацияОбъектовСобытия.УстановитьПрефиксИнформационнойБазыИОрганизации'");
	
	ДобавитьОписаниеПроизвольнойПроверки(ТаблицаВозврата, РеквизитПроверки, МассивВСтроку(СоставПодпискиОбщий));
	
	Возврат ТаблицаВозврата;
КонецФункции

Функция Подключаемый_ПрефиксацияОбъектовПроверитьСоставОбъектовСПрефиксомИнформационнойБазы()
	
	ТаблицаВозврата = НоваяТаблицаПроверки();
	
	СоставПодпискиОбщий = Новый Массив;
	
	ПолучитьСоставПодпискиПоИмениОбработчика(СоставПодпискиОбщий, "ПрефиксацияОбъектовСобытия.УстановитьПрефиксИнформационнойБазы");
	ПолучитьСоставПодпискиПоИмениОбработчика(СоставПодпискиОбщий, "ПрефиксацияОбъектовСобытия.УстановитьПрефиксИнформационнойБазыИОрганизации");
	
	РеквизитПроверки = НСтр("ru = 'Ожидается наличие подписки на событие с обработчиком: ПрефиксацияОбъектовСобытия.УстановитьПрефиксИнформационнойБазы ИЛИ ПрефиксацияОбъектовСобытия.УстановитьПрефиксИнформационнойБазыИОрганизации'");
	
	ДобавитьОписаниеПроизвольнойПроверки(ТаблицаВозврата, РеквизитПроверки, МассивВСтроку(СоставПодпискиОбщий));
	
	// Проверка пересечения составов подписок на события назначения префиксов.
	ПрефиксацияОбъектовПроверитьПересеченияСоставовПодписокНазначенияПрефикса(ТаблицаВозврата);
	
	// Проверка задания подписки на событие переназначения номера документа по дате.
	ПрефиксацияОбъектовПроверитьСоставПодписки_ПроверитьНомерДокументаПоДате(ТаблицаВозврата);
	
	// Проверка задания подписки на событие переназначения номера документа по дате и организации.
	ПрефиксацияОбъектовПроверитьСоставПодписки_ПроверитьНомерДокументаПоДатеИОрганизации(ТаблицаВозврата);
	
	Возврат ТаблицаВозврата;
КонецФункции

// Проверка подписок переназначения номеров (кодов).

Процедура ПрефиксацияОбъектовПроверитьСоставПодписки_ПроверитьНомерДокументаПоДатеИОрганизации(ТаблицаПроверяемыхТипов)
	
	СоставПодписокОбнуленияНомераКода = ПрефиксацияОбъектовПолучитьСоставПодписокОбнуленияНомераКода(ТаблицаПроверяемыхТипов, "ПрефиксацияОбъектовСобытия.ПроверитьНомерДокументаПоДатеИОрганизации");
	СоставПодпискиНазначенияПрефикса = ПрефиксацияОбъектовПолучитьСоставПодпискиНазначенияПрефиксаПоОрганизации("Документ");
	ПрефиксацияОбъектовПроверитьСоставПодпискиОбнуленияНомераКода(ТаблицаПроверяемыхТипов, СоставПодпискиНазначенияПрефикса, СоставПодписокОбнуленияНомераКода);
	
КонецПроцедуры

Процедура ПрефиксацияОбъектовПроверитьСоставПодписки_ПроверитьНомерДокументаПоДате(ТаблицаПроверяемыхТипов)
	
	СоставПодписокОбнуленияНомераКода = ПрефиксацияОбъектовПолучитьСоставПодписокОбнуленияНомераКода(ТаблицаПроверяемыхТипов, "ПрефиксацияОбъектовСобытия.ПроверитьНомерДокументаПоДате");
	СоставПодпискиНазначенияПрефиксаПоОрганизации = ПрефиксацияОбъектовПолучитьСоставПодпискиНазначенияПрефиксаПоОрганизации("Документ");
	
	// Все документы (которые имеют заданную периодичность номера) кроме документов, которые имеют префикс организации.
	СоставПодпискиНазначенияПрефикса = Новый Массив;
	
	Для Каждого ОбъектМетаданныхДокумент Из Метаданные.Документы Цикл
		
		Если ОбъектМетаданныхДокумент.ПериодичностьНомера <> Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Непериодический Тогда
			Если СоставПодпискиНазначенияПрефиксаПоОрганизации.Найти(ОбъектМетаданныхДокумент.ПолноеИмя()) = Неопределено Тогда
				СоставПодпискиНазначенияПрефикса.Добавить(ОбъектМетаданныхДокумент.ПолноеИмя());
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	ПрефиксацияОбъектовПроверитьСоставПодпискиОбнуленияНомераКода(ТаблицаПроверяемыхТипов, СоставПодпискиНазначенияПрефикса, СоставПодписокОбнуленияНомераКода);
	
КонецПроцедуры

Процедура ПрефиксацияОбъектовПроверитьСоставПодпискиОбнуленияНомераКода(ТаблицаПроверяемыхТипов, СоставПодпискиНазначенияПрефикса, СоставПодписокОбнуленияНомераКода)
	
	Если СоставПодписокОбнуленияНомераКода.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НедостающиеТипы = Новый Массив;
	ИзбыточныеТипы = Новый Массив;
	
	СоставПодпискиОбнуленияНомераКода = Новый Массив;
	Для каждого ПодпискаОбнуленияНомераКода Из СоставПодписокОбнуленияНомераКода Цикл
		ДополнитьМассив(СоставПодпискиОбнуленияНомераКода, РазложитьСтрокуВМассивПодстрок(ПодпискаОбнуленияНомераКода.ПроверенныеДанные), Истина);
	КонецЦикла;
	
	ВычислитьПересечениеМассивов(СоставПодпискиНазначенияПрефикса, СоставПодпискиОбнуленияНомераКода, НедостающиеТипы, ИзбыточныеТипы);
	
	Если СоставПодписокОбнуленияНомераКода.Количество() > 1 Тогда
		Для каждого ПодпискаОбнуленияНомераКода Из СоставПодписокОбнуленияНомераКода Цикл
			ИмяПодпискиНаСобытие = ИмяПодпискиНаСобытие + ?(ПустаяСтрока(ИмяПодпискиНаСобытие), "", ", ") + ПодпискаОбнуленияНомераКода.РеквизитПроверки;
		КонецЦикла;
	Иначе
		ИмяПодпискиНаСобытие = СоставПодписокОбнуленияНомераКода[0].РеквизитПроверки;
	КонецЕсли;
	
	Если НедостающиеТипы.Количество() > 0 Тогда
		
		Если СоставПодписокОбнуленияНомераКода.Количество() > 1 Тогда
			ОписаниеОшибки = НСтр("ru = 'В одной из подписок на событие 
				|[ИмяПодпискиНаСобытие]
				|должны быть включены типы ([КоличествоТипов]):
				|[СтрокаТипов]'");
		Иначе	
			ОписаниеОшибки = НСтр("ru = 'Подписка на событие [ИмяПодпискиНаСобытие] должна содержать типы ([КоличествоТипов]):	
				|[СтрокаТипов]'");
		КонецЕсли;
		ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "[ИмяПодпискиНаСобытие]", ИмяПодпискиНаСобытие);
		ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "[КоличествоТипов]", НедостающиеТипы.Количество());
		ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "[СтрокаТипов]", МассивВСтроку(НедостающиеТипы, Символы.ПС));
		
		ДобавитьОписаниеПроизвольнойОшибки(ТаблицаПроверяемыхТипов, ОписаниеОшибки);
		
	КонецЕсли;
	
	Если ИзбыточныеТипы.Количество() > 0 Тогда
		
		Если СоставПодписокОбнуленияНомераКода.Количество() > 1 Тогда
			ОписаниеОшибки = НСтр("ru = 'Из одной из подписок на событие 
				|[ИмяПодпискиНаСобытие]
				|должны быть исключены типы ([КоличествоТипов]):
				|[СтрокаТипов]'");
		Иначе	
			ОписаниеОшибки = НСтр("ru = 'Из подписки на событие [ИмяПодпискиНаСобытие] должны быть исключены типы ([КоличествоТипов]):	
				|[СтрокаТипов]'");
		КонецЕсли;
		ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "[ИмяПодпискиНаСобытие]", ИмяПодпискиНаСобытие);
		ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "[КоличествоТипов]", НедостающиеТипы.Количество());
		ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "[СтрокаТипов]", МассивВСтроку(НедостающиеТипы, Символы.ПС));
		
		ДобавитьОписаниеПроизвольнойОшибки(ТаблицаПроверяемыхТипов, ОписаниеОшибки);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрефиксацияОбъектовДополнитьМассив(Результат, Временный, ИмяТипа)
	
	Для Каждого ИмяОбъектаМетаданных Из Временный Цикл
		
		Если СтрНайти(ИмяОбъектаМетаданных, ИмяТипа + ".") > 0 Тогда
			
			Если Результат.Найти(ИмяОбъектаМетаданных) = Неопределено Тогда
				
				Результат.Добавить(ИмяОбъектаМетаданных);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПрефиксацияОбъектовПолучитьСоставПодпискиНазначенияПрефиксаПоОрганизации(Знач ИмяТипаОбъектаМетаданных)
	
	// Возвращаемое значение функции.
	Результат = Новый Массив;
	
	Подписки = ПолучитьПодпискиНаСобытияПоИмениОбработчика("ПрефиксацияОбъектовСобытия.УстановитьПрефиксОрганизации");
	
	Для Каждого ИмяПодпискиНаСобытие Из Подписки Цикл
		
		МассивФакт = Неопределено;
		ПроверитьТипы(МассивФакт, СтрЗаменить("ПодпискиНаСобытия.[ИмяПодписки].Источник", "[ИмяПодписки]", ИмяПодпискиНаСобытие));
		
		Если МассивФакт.Количество() > 0 Тогда
			
			РезультатВременный = РазложитьСтрокуВМассивПодстрок(МассивФакт[0].ПроверенныеДанные);
			
			ПрефиксацияОбъектовДополнитьМассив(Результат, РезультатВременный, ИмяТипаОбъектаМетаданных);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Подписки = ПолучитьПодпискиНаСобытияПоИмениОбработчика("ПрефиксацияОбъектовСобытия.УстановитьПрефиксИнформационнойБазыИОрганизации");
	
	Для Каждого ИмяПодпискиНаСобытие Из Подписки Цикл
		
		МассивФакт = Неопределено;
		ПроверитьТипы(МассивФакт, СтрЗаменить("ПодпискиНаСобытия.[ИмяПодписки].Источник", "[ИмяПодписки]", ИмяПодпискиНаСобытие));
		
		Если МассивФакт.Количество() > 0 Тогда
			
			РезультатВременный = РазложитьСтрокуВМассивПодстрок(МассивФакт[0].ПроверенныеДанные);
			
			ПрефиксацияОбъектовДополнитьМассив(Результат, РезультатВременный, ИмяТипаОбъектаМетаданных);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

Функция ПрефиксацияОбъектовПолучитьСоставПодписокОбнуленияНомераКода(ТаблицаПроверяемыхТипов, Знач ИмяОбработчика)
	
	Результат = НоваяТаблицаПроверки();
	
	Подписки = ПолучитьПодпискиНаСобытияПоИмениОбработчика(ИмяОбработчика);
	Если Подписки.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	Для Каждого ИмяПодпискиНаСобытие Из Подписки Цикл 
		ПроверитьТипы(Результат, СтрЗаменить("ПодпискиНаСобытия.[ИмяПодписки].Источник", "[ИмяПодписки]", ИмяПодпискиНаСобытие));
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Вспомогательные процедуры и функции.

Процедура ПрефиксацияОбъектовПроверитьПересеченияСоставовПодписокНазначенияПрефикса(ТаблицаВозврата)
	
	Состав1 = Новый Массив;
	Состав2 = Новый Массив;
	Состав3 = Новый Массив;
	
	ПолучитьСоставПодпискиПоИмениОбработчика(Состав1, "ПрефиксацияОбъектовСобытия.УстановитьПрефиксОрганизации");
	ПолучитьСоставПодпискиПоИмениОбработчика(Состав2, "ПрефиксацияОбъектовСобытия.УстановитьПрефиксИнформационнойБазы");
	ПолучитьСоставПодпискиПоИмениОбработчика(Состав3, "ПрефиксацияОбъектовСобытия.УстановитьПрефиксИнформационнойБазыИОрганизации");
	
	// Проверяем пересечение: Состав1 и Состав2.
	ПрефиксацияОбъектовПроверитьПересеченияСоставовПодписок(ТаблицаВозврата, Состав1, Состав2);
	
	// Проверяем пересечение: Состав1 и Состав3.
	ПрефиксацияОбъектовПроверитьПересеченияСоставовПодписок(ТаблицаВозврата, Состав1, Состав3);
	
	// Проверяем пересечение: Состав2 и Состав3.
	ПрефиксацияОбъектовПроверитьПересеченияСоставовПодписок(ТаблицаВозврата, Состав2, Состав3);
	
КонецПроцедуры

Процедура ПрефиксацияОбъектовПроверитьПересеченияСоставовПодписок(ТаблицаВозврата, Состав1, Состав2)
	
	ИзбыточныеЭлементы = Новый Массив;
	ВычислитьПересечениеМассивов(Состав1, Состав2, , , ИзбыточныеЭлементы);
	
	Если ИзбыточныеЭлементы.Количество() > 0 Тогда
		
		ОписаниеОшибки = НСтр("ru = 'Префиксация объектов: Пересечение составов подписок на события. Следует использовать только одну подписку для объектов: [СтрокаТипов]'");
		ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "[СтрокаТипов]", МассивВСтроку(ИзбыточныеЭлементы));
		
		ДобавитьОписаниеПроизвольнойОшибки(ТаблицаВозврата, ОписаниеОшибки);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПрисоединенныеФайлы

Функция Подключаемый_ПрисоединенныеФайлыПроверитьСоставОбъектов()
	
	ТаблицаПроверки = НоваяТаблицаПроверки();
	
	// Проверяем явные установки типов - владельцев файлов, там где это возможно.
	ПроверитьТипы(ТаблицаПроверки, "РегистрыСведений.НаличиеПрисоединенныхФайлов.Измерения.ОбъектСФайлами.Тип");
	РезультатПроверки = ПроверитьТипы(ТаблицаПроверки, "ОбщиеКоманды.ПрисоединенныеФайлыКОбъекту.ТипПараметраКоманды");
	
	ПроверенныеДанные = "";
	
	ВладельцыФайлов = Новый Массив;
	
	// Делаем проверку по справочнику хранимых файлов, его реквизиту ВладелецФайла и регистру сведений ПрисоединенныеФайлы.
	Для Каждого ОМСправочник Из Метаданные.Справочники Цикл
		Если НЕ СтрЗаканчиваетсяНа(ОМСправочник.Имя, "ПрисоединенныеФайлы") Тогда
			Продолжить;
		КонецЕсли;
		ПрисоединенныйФайлТип = ОМСправочник.СтандартныеРеквизиты.Ссылка.Тип.Типы()[0];
		
		ВключенВСоставТиповИзмерения = Метаданные.РегистрыСведений.ПрисоединенныеФайлы.Измерения.ПрисоединенныйФайл.Тип.СодержитТип(ПрисоединенныйФайлТип);
		Если НЕ ВключенВСоставТиповИзмерения Тогда
			ДобавитьОписаниеПроизвольнойОшибки(ТаблицаПроверки, ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Справочник присоединенных файлов %1 не включен в состав типов измерения ПрисоединенныйФайл регистра сведений ПрисоединенныеФайлы'"),
				ОМСправочник.Имя));
			Продолжить;
		КонецЕсли;
		
		ВключенВСоставИсточникаПодписки = ПроверитьТипВключенВСоставИсточниковПодписокПрисоединенныхФайлов(ПрисоединенныйФайлТип, ТаблицаПроверки);
		Если НЕ ВключенВСоставИсточникаПодписки Тогда
			Продолжить;
		КонецЕсли;
		
		Для каждого ВладелецТип Из ОМСправочник.Реквизиты.ВладелецФайла.Тип.Типы() Цикл
			ВладелецОМ = Метаданные.НайтиПоТипу(ВладелецТип);
			Если ВладелецОМ = Неопределено Тогда
				ДобавитьОписаниеПроизвольнойОшибки(ТаблицаПроверки, ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Справочник присоединенных файлов %1 не содержит владельцев файлов в реквизите ВладелецФайла.'"),
					ОМСправочник.Имя));
			ИначеЕсли ВладельцыФайлов.Найти(ВладелецОМ.ПолноеИмя()) = Неопределено Тогда
				ПроверенныеДанные = ПроверенныеДанные + ВладелецОМ.ПолноеИмя() + ",";
				ВладельцыФайлов.Добавить(ВладелецОМ.ПолноеИмя());
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(ПроверенныеДанные) Тогда
		ПроверенныеДанные = Лев(ПроверенныеДанные, СтрДлина(ПроверенныеДанные)-1);
	КонецЕсли;
	
	РезультатПроверки = ТаблицаПроверки.Добавить();
	РезультатПроверки.РеквизитПроверки = НСтр("ru = 'Проверка справочника присоединенных файлов и реквизита ВладелецФайлов - ошибки см. в отчете'");
	РезультатПроверки.ПроверенныеДанные = ПроверенныеДанные;
	
	Возврат ТаблицаПроверки;
КонецФункции

Функция ПроверитьТипВключенВСоставИсточниковПодписокПрисоединенныхФайлов(ПрисоединенныйФайлТип, ТаблицаПроверки)
	
	Подписки = Новый Массив;
	
	НайтиОбъектыМетаданныхОбработкуПоВхождениюСтроки(Подписки, "ВыполнитьДействияПередЗаписьюПрисоединенногоФайла");
	НайтиОбъектыМетаданныхОбработкуПоВхождениюСтроки(Подписки, "ВыполнитьДействияПередУдалениемПрисоединенногоФайла");
	НайтиОбъектыМетаданныхОбработкуПоВхождениюСтроки(Подписки, "ВыполнитьДействияПриЗаписиПрисоединенногоФайла");
	НайтиОбъектыМетаданныхОбработкуПоВхождениюСтроки(Подписки, "ПереопределитьПолучаемуюФормуПрисоединенногоФайла");
	
	ИмяСправочника = Метаданные.НайтиПоТипу(ПрисоединенныйФайлТип).Имя;
	ОбъектныйТип = Тип("СправочникОбъект."   + Метаданные.НайтиПоТипу(ПрисоединенныйФайлТип).Имя);
	ТипМенеджера = Тип("СправочникМенеджер." + Метаданные.НайтиПоТипу(ПрисоединенныйФайлТип).Имя);
	
	Включен = Истина;
	Включен = ПроверитьТипЕстьВПодписках(Подписки, "ВыполнитьДействияПередЗаписьюПрисоединенногоФайла",   ОбъектныйТип, ТаблицаПроверки, ИмяСправочника) И Включен;
	Включен = ПроверитьТипЕстьВПодписках(Подписки, "ВыполнитьДействияПередУдалениемПрисоединенногоФайла", ОбъектныйТип, ТаблицаПроверки, ИмяСправочника) И Включен;
	Включен = ПроверитьТипЕстьВПодписках(Подписки, "ВыполнитьДействияПриЗаписиПрисоединенногоФайла",      ОбъектныйТип, ТаблицаПроверки, ИмяСправочника) И Включен;
	Включен = ПроверитьТипЕстьВПодписках(Подписки, "ПереопределитьПолучаемуюФормуПрисоединенногоФайла",   ТипМенеджера, ТаблицаПроверки, ИмяСправочника) И Включен;
	
	Возврат Включен;
	
КонецФункции

Процедура НайтиОбъектыМетаданныхОбработкуПоВхождениюСтроки(Подписки, Строка)
	
	Для Каждого ОМПодписка Из Метаданные.ПодпискиНаСобытия Цикл
		Если СтрНайти(ОМПодписка.Имя, Строка) > 0 Тогда
			Подписки.Добавить(ОМПодписка);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПроверитьТипЕстьВПодписках(Подписки, КлючПодписки, ОбъектныйТип, ТаблицаПроверки, ИмяСправочника)
	
	ЧислоВхождений = 0;
	
	Для Каждого ПодпискаОМ Из Подписки Цикл
		Если СтрНайти(ПодпискаОМ.Имя, КлючПодписки) = 0 Тогда
			Продолжить;
		КонецЕсли;
		Если ПодпискаОМ.Источник.СодержитТип(ОбъектныйТип) Тогда
			ЧислоВхождений = ЧислоВхождений + 1;
		КонецЕсли;
	КонецЦикла;
	
	Если ЧислоВхождений = 0 Тогда
		ДобавитьОписаниеПроизвольнойОшибки(ТаблицаПроверки, 
			ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Справочник %1 не включен в состав источника подписки [%2]'"),
				ИмяСправочника,
				КлючПодписки) );
		Возврат Ложь;
	ИначеЕсли ЧислоВхождений > 1 Тогда
		ДобавитьОписаниеПроизвольнойОшибки(ТаблицаПроверки, 
			ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Справочник %1 включен в состав более одной подписки [%2]'"),
				ИмяСправочника,
				КлючПодписки) );
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область ПроверкаЛегальностиПолученияОбновления

// Проверка внедрения не предусмотрена (не требуется).

#КонецОбласти

#Область РаботаВМоделиСервиса

// Проверка внедрения не предусмотрена.

#КонецОбласти

#Область РаботаСПочтовымиСообщениями

Функция Подключаемый_РаботаСПочтовымиСообщениямиПроверитьРазмещениеСправочника()
	Возврат ПроверитьРазмещениеВКомандномИнтерфейсе("Справочник.УчетныеЗаписиЭлектроннойПочты");
КонецФункции

Функция Подключаемый_РаботаСПочтовымиСообщениямиПроверитьРазмещениеОбщейКоманды()
	Возврат ПроверитьРазмещениеВКомандномИнтерфейсе("ОбщаяКоманда.НастройкаСистемнойУчетнойЗаписиЭлектроннойПочты");
КонецФункции

#КонецОбласти

#Область РаботаСФайлами

Функция Подключаемый_РаботаСФайламиПроверитьРазмещениеКомандыПапкиФайлов()
	// Этого достаточно для проверки размещения в КИ команды ПапкиФайлов.
	Возврат ПроверитьРазмещениеВКомандномИнтерфейсе("Справочник.Файлы");
	
КонецФункции

Функция Подключаемый_РаботаСФайламиПроверитьТипыВладельцев()
	
	ТаблицаВозврата = Неопределено;
	СписокНеПроверяемых = НоваяТаблицаПроверки();
	ДобавитьНеПроверяемуюСтроку(СписокНеПроверяемых, 
		НСтр("ru = 'Разместите в форме персональных настроек настройки работы с файлами: ""Действие при выборе файла"", ""Показывать подсказки при редактировании файла"", ""Показывать занятые файлы при завершении работы"", ""Показывать колонку Размер в списках файлов"", ""Сравнивать версии при помощи"", ""Настройка основного рабочего каталога"".'"), "Произвольная", НСтр("ru = 'Работа с файлами'"));
	ДобавитьНеПроверяемуюСтроку(СписокНеПроверяемых, 
		НСтр("ru = 'Разместите в форме настроек программы поля для редактирования констант: ЗапрещатьЗагрузкуФайловПоРасширению ИзвлекатьТекстыФайловНаСервере МаксимальныйРазмерФайла СписокЗапрещенныхРасширений ТипХраненияФайлов.'"), "Произвольная", НСтр("ru = 'Работа с файлами'"));
	ПроверитьТипы(ТаблицаВозврата, "ОпределяемыеТипы.ВладелецФайлов.Тип");
	СтруктураВозврата = Новый Структура("ТаблицаПроверки, ТаблицаНеПроверяемых", ТаблицаВозврата, СписокНеПроверяемых);
	Возврат СтруктураВозврата;
	
КонецФункции

#КонецОбласти

#Область РассылкаОтчетов

Функция Подключаемый_РассылкаОтчетовТипыПолучателейПроверка()
	
	Результат = НоваяТаблицаПроверки();
	
	КонтактнаяИнформацияГруппыТипов = Новый Соответствие;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВидыКонтактнойИнформации.Ссылка,
	|	ВидыКонтактнойИнформации.ИмяПредопределенныхДанных
	|ИЗ
	|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	|ГДЕ
	|	ВидыКонтактнойИнформации.Предопределенный
	|	И ВидыКонтактнойИнформации.ЭтоГруппа
	|	И ВидыКонтактнойИнформации.Родитель = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ПустаяСсылка)";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		КонтактнаяИнформацияГруппыТипов.Вставить(Выборка.ИмяПредопределенныхДанных, Выборка.Ссылка);
	КонецЦикла;
	
	ПолныйПутьКТипу = "ОпределяемыеТипы.ПолучательРассылки.Тип";
	ОписаниеТиповПолучателей = Вычислить("Метаданные." + ПолныйПутьКТипу);
	Для Каждого ТипПолучателей Из ОписаниеТиповПолучателей.Типы() Цикл
		Если ТипПолучателей = Тип("СправочникСсылка.ГруппыПользователей") Тогда
			Продолжить;
		КонецЕсли;
		
		ПолучательМетаданные = Метаданные.НайтиПоТипу(ТипПолучателей);
		Если ПолучательМетаданные = Неопределено Тогда
			// Ошибка: Указан не объект метаданных.
			ТекстОшибки = ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В типе ""%1"" указан не объектный тип получателей ""%2"".'"),
				ПолныйПутьКТипу,
				Строка(ТипПолучателей));
			СтрокаВозврата = Результат.Добавить();
			СтрокаВозврата.РеквизитПроверки  = "ПроизвольнаяОшибка";
			СтрокаВозврата.ПроверенныеДанные = ТекстОшибки;
			Продолжить;
		КонецЕсли;
		
		ПолучательПолноеИмя = ПолучательМетаданные.ПолноеИмя();
		
		КонтактнаяИнформацияГруппаСсылка = КонтактнаяИнформацияГруппыТипов.Получить(СтрЗаменить(ПолучательПолноеИмя, ".", ""));
		Если КонтактнаяИнформацияГруппаСсылка = Неопределено Тогда
			// Ошибка: Не определена группа контактной информации.
			ТекстОшибки = ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Для объекта метаданных ""%1"" не найдена группа контактной информации. Для него необходимо:
				|  • Либо выполнить внедрение подсистемы ""КонтактнаяИнформация"";
				|  • Либо исключить из типа ""%2"".'"),
				ПолучательПолноеИмя,
				ПолныйПутьКТипу);
			СтрокаВозврата = Результат.Добавить();
			СтрокаВозврата.РеквизитПроверки  = "ПроизвольнаяОшибка";
			СтрокаВозврата.ПроверенныеДанные = ТекстОшибки;
			Продолжить;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 1 ИЗ Справочник.ВидыКонтактнойИнформации ГДЕ Родитель = &Родитель И Тип = &Тип";
		Запрос.УстановитьПараметр("Родитель", КонтактнаяИнформацияГруппаСсылка);
		Запрос.Параметры.Вставить("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
		Если Запрос.Выполнить().Пустой() Тогда
			// Ошибка: Не добавлен основной вид контактной информации типа "e-mail".
			ТекстОшибки = ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Для получателей ""%1"" необходимо добавить вид контактной информации типа ""Адрес электронной почты"".'"),
				Строка(ТипПолучателей));
			СтрокаВозврата = Результат.Добавить();
			СтрокаВозврата.РеквизитПроверки  = "ПроизвольнаяОшибка";
			СтрокаВозврата.ПроверенныеДанные = ТекстОшибки;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция Подключаемый_РассылкаОтчетовРазмещениеСпискаПроверка()
	Возврат ПроверитьРазмещениеВКомандномИнтерфейсе("Справочник.РассылкиОтчетов");
КонецФункции

#КонецОбласти

#Область РегламентныеЗадания

Функция Подключаемый_РегламентныеЗаданияПроверитьРазмещениеОбработки()
	Возврат ПроверитьРазмещениеВКомандномИнтерфейсе("Обработка.РегламентныеИФоновыеЗадания");
КонецФункции

#КонецОбласти

#Область РезервноеКопированиеИБ

Функция Подключаемый_РезервноеКопированиеИБПроверитьРазмещениеОбработкиРезервноеКопирование()
	Возврат ПроверитьРазмещениеВКомандномИнтерфейсе("Обработка.РезервноеКопированиеИБ");
КонецФункции

Функция Подключаемый_РезервноеКопированиеИБПроверитьРазмещениеОбработкиНастройкаРезервногоКопирования()
	Возврат ПроверитьРазмещениеВКомандномИнтерфейсе("Обработка.НастройкаРезервногоКопированияИБ");
КонецФункции

#КонецОбласти

#Область Свойства

Функция Подключаемый_СвойстваПроверитьСоставОбъектовСДополнительнымиРеквизитами()
	
	ТаблицаПроверки = НоваяТаблицаПроверки();
	
	// 1. Проверяем объекты с табличной частью.
	
	ИменаОбъектовСДопРеквизитами = НайтиОМСДопРеквизитамиПоТабличнойЧасти(ТаблицаПроверки);
	ПроверенныеДанные = "";
	
	Для Каждого ИмяОМСДопРеквизитами Из ИменаОбъектовСДопРеквизитами Цикл
		ПроверенныеДанные = ПроверенныеДанные + ИмяОМСДопРеквизитами + ",";
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(ПроверенныеДанные) Тогда
		ПроверенныеДанные = Лев(ПроверенныеДанные, СтрДлина(ПроверенныеДанные)-1);
	КонецЕсли;
		
	РезультатПроверки = ТаблицаПроверки.Добавить();
	РезультатПроверки.РеквизитПроверки = НСтр("ru = 'Проверка встраивания табличной части в объекты со свойствами'");
	РезультатПроверки.ПроверенныеДанные = ПроверенныеДанные;
	
	// 2. Проверяем код в модуле формы объекта.
	
	ТребуемыеПроверки = Новый Массив;
	
	Проверка = НовоеОписаниеТребуемыхПроверокСтрокВызоваВПроцедурахМодуля(ТребуемыеПроверки).Добавить();
	Проверка.ИмяПроцедуры = "Подключаемый_РедактироватьСоставСвойств";
	Проверка.СтрокиВызова.Добавить("УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтотОбъект");
	
	Проверка = НовоеОписаниеТребуемыхПроверокСтрокВызоваВПроцедурахМодуля(ТребуемыеПроверки).Добавить();
	Проверка.ИмяПроцедуры = "ПриСозданииНаСервере";
	Проверка.СтрокиВызова.Добавить("УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект");
	
	ОписаниеПроверок = НовоеОписаниеТребуемыхПроверокСтрокВызоваВПроцедурахМодуля(ТребуемыеПроверки);
	Проверка = ОписаниеПроверок.Добавить();
	Проверка.ИмяПроцедуры = "ОбработкаОповещения";
	Проверка.СтрокиВызова.Добавить("УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр)");
	Проверка.СтрокиВызова.Добавить("ОбновитьЭлементыДополнительныхРеквизитов()");
	Проверка = ОписаниеПроверок.Добавить();
	Проверка.ИмяПроцедуры = "ОбновитьЭлементыДополнительныхРеквизитов";
	Проверка.СтрокиВызова.Добавить("УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект");
	
	Проверка = НовоеОписаниеТребуемыхПроверокСтрокВызоваВПроцедурахМодуля(ТребуемыеПроверки).Добавить();
	Проверка.ИмяПроцедуры = "ПриЧтенииНаСервере";
	Проверка.СтрокиВызова.Добавить("УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект)");
	
	Проверка = НовоеОписаниеТребуемыхПроверокСтрокВызоваВПроцедурахМодуля(ТребуемыеПроверки).Добавить();
	Проверка.ИмяПроцедуры = "ОбработкаПроверкиЗаполненияНаСервере";
	Проверка.СтрокиВызова.Добавить("УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты)");
	
	Проверка = НовоеОписаниеТребуемыхПроверокСтрокВызоваВПроцедурахМодуля(ТребуемыеПроверки).Добавить();
	Проверка.ИмяПроцедуры = "ПередЗаписьюНаСервере";
	Проверка.СтрокиВызова.Добавить("УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект)");
	
	ИменаМодулейОбъектов = СформироватьИменаМодулей(Истина);
	
	ПроверенныеДанные = "";
	
	Для Каждого ИмяМодуля Из ИменаМодулейОбъектов Цикл
		
		РазложенноеИмя = РазложитьСтрокуВМассивПодстрок(ИмяМодуля, ".");
		ИмяОМСДопРеквизитами = РазложенноеИмя[0] + "." + РазложенноеИмя[1];
		Если ИменаОбъектовСДопРеквизитами.Найти(ИмяОМСДопРеквизитами) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЕстьОшибки = Ложь;
		ПроверитьСтрокиВызоваВПроцедурахМодуляФормыОбъекта(ИмяМодуля, ТребуемыеПроверки, ТаблицаПроверки, ЕстьОшибки);
		
		Если ЕстьОшибки Тогда
			Продолжить;
		КонецЕсли;
		ПроверенныеДанные = ПроверенныеДанные + ИмяОМСДопРеквизитами + ",";
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(ПроверенныеДанные) Тогда
		ПроверенныеДанные = Лев(ПроверенныеДанные, СтрДлина(ПроверенныеДанные)-1);
	КонецЕсли;
	
	РезультатПроверки = ТаблицаПроверки.Добавить();
	РезультатПроверки.РеквизитПроверки = НСтр("ru = 'Проверка встраивания дополнительных реквизитов в модули форм объектов - ошибки см. в отчете'");
	РезультатПроверки.ПроверенныеДанные = ПроверенныеДанные;
	
	// 3. Проверка предопределенных элементов справочника.
	
	ИменаОбъектовСДопСведениями = ПолучитьИменаОбъектовСДополнительнымиСведениями();
	
	ПроверенныеДанные = "";
	Для Каждого ИмяОбъекта Из ПолучитьМассивОбъектовСДопСвойствами() Цикл
		
		Если ИменаОбъектовСДопРеквизитами.Найти(ИмяОбъекта) <> Неопределено
		 ИЛИ ИменаОбъектовСДопСведениями.Найти(ИмяОбъекта) = Неопределено Тогда
			
			ПроверенныеДанные = ПроверенныеДанные + ИмяОбъекта + ",";
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(ПроверенныеДанные) Тогда
		ПроверенныеДанные = Лев(ПроверенныеДанные, СтрДлина(ПроверенныеДанные)-1);
	КонецЕсли;
	
	РезультатПроверки = ТаблицаПроверки.Добавить();
	РезультатПроверки.РеквизитПроверки = НСтр("ru = 'Проверка создания предопределенных элементов в справочнике НаборыДополнительныхРеквизитовИСведений'");
	РезультатПроверки.ПроверенныеДанные = ПроверенныеДанные;
	
	Возврат ТаблицаПроверки;
	
КонецФункции

Функция Подключаемый_СвойстваПроверитьСоставОбъектовСДополнительнымиСведениями()
	
	ТаблицаПроверки = НоваяТаблицаПроверки();
	
	ПроверенныеДанные = "";
	
	Для Каждого ИмяОбъекта Из ПолучитьИменаОбъектовСДополнительнымиСведениями() Цикл
		ПроверенныеДанные = ПроверенныеДанные + ИмяОбъекта + ",";
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(ПроверенныеДанные) Тогда
		ПроверенныеДанные = Лев(ПроверенныеДанные, СтрДлина(ПроверенныеДанные)-1);
	КонецЕсли;
		
	РезультатПроверки = ТаблицаПроверки.Добавить();
	РезультатПроверки.РеквизитПроверки  = НСтр("ru = 'ОбщаяКоманда.ДополнительныеСведения.ТипПараметраКоманды'");
	РезультатПроверки.ПроверенныеДанные = ПроверенныеДанные;
	
	Возврат ТаблицаПроверки;
	
КонецФункции

Функция Подключаемый_СвойстваПроверитьТипыЗначенийДополнительныхСвойств()
	
	ТаблицаПроверки = НоваяТаблицаПроверки();
	
	ПроверенныеДанные = "";
	
	Для Каждого Тип Из Метаданные.ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.Тип.Типы() Цикл
		
		Если НЕ ЭтоСсылка(Тип) Тогда
			Продолжить;
		КонецЕсли;
		
		ОбъектМетаданныхТипа = Метаданные.НайтиПоТипу(Тип);
		
		Если ОбъектМетаданныхТипа.ПолноеИмя() <> "Справочник.ЗначенияСвойствОбъектовИерархия"
		 ИЛИ ОбъектМетаданныхТипа.ПолноеИмя() <> "Справочник.ЗначенияСвойствОбъектов" Тогда
			
			ПроверенныеДанные = ПроверенныеДанные + Метаданные.НайтиПоТипу(Тип).ПолноеИмя() + ",";
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(ПроверенныеДанные) Тогда
		ПроверенныеДанные = Лев(ПроверенныеДанные, СтрДлина(ПроверенныеДанные)-1);
	КонецЕсли;
	
	РезультатПроверки = ТаблицаПроверки.Добавить();
	РезультатПроверки.РеквизитПроверки = НСтр("ru = 'Метаданные.ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.Тип'");
	РезультатПроверки.ПроверенныеДанные = ПроверенныеДанные;
	
	Возврат ТаблицаПроверки;
	
КонецФункции

Функция Подключаемый_ДополнительныеРеквизитыИСведенияПроверитьРазмещение()
	
	Возврат ПроверитьРазмещениеВКомандномИнтерфейсе("Справочник.НаборыДополнительныхРеквизитовИСведений");
	
КонецФункции

Функция ПолучитьИменаОбъектовСДополнительнымиСведениями()
	
	ИменаОбъектовСДопСведениями = Новый Массив;
	
	ТипыОбъектовСДопСведениями = Метаданные.ОбщиеКоманды.ДополнительныеСведенияКоманднаяПанель.ТипПараметраКоманды.Типы();
	
	Для Каждого ТипОбъекта Из ТипыОбъектовСДопСведениями Цикл
		ИменаОбъектовСДопСведениями.Добавить(Метаданные.НайтиПоТипу(ТипОбъекта).ПолноеИмя());
	КонецЦикла;
	
	Возврат ИменаОбъектовСДопСведениями;
	
КонецФункции

Функция ПолучитьМассивОбъектовСДопСвойствами()
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	НаборыДополнительныхРеквизитовИСведений.Ссылка
		|ИЗ
		|	Справочник.НаборыДополнительныхРеквизитовИСведений КАК НаборыДополнительныхРеквизитовИСведений
		|ГДЕ
		|	НаборыДополнительныхРеквизитовИСведений.Предопределенный
		|УПОРЯДОЧИТЬ ПО
		|	НаборыДополнительныхРеквизитовИСведений.Ссылка ИЕРАРХИЯ";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	ДеревоНаборов = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	ИменаОбъектовСоСвойствами = Новый Массив;
	
	Для Каждого СтрокаДерева Из ДеревоНаборов.Строки Цикл
		ИмяПредопределенного = ИмяПредопределенного(СтрокаДерева.Ссылка);
		Поз = СтрНайти(ИмяПредопределенного, "_");
		ЛевЧасть  = Лев(ИмяПредопределенного, Поз - 1);
		ПравЧасть = Прав(ИмяПредопределенного, СтрДлина(ИмяПредопределенного) - СтрДлина(ЛевЧасть) - 1);
		ИменаОбъектовСоСвойствами.Добавить(ЛевЧасть + "." + ПравЧасть);
	КонецЦикла;
	
	Возврат ИменаОбъектовСоСвойствами;
	
КонецФункции

Функция НайтиОМСДопРеквизитамиПоТабличнойЧасти(ТаблицаПроверки)
	
	МассивИменОбъектов = Новый Массив;
	
	ДобавитьОбъектыСДопРеквизитамиПоТабличнойЧасти(ТаблицаПроверки, МассивИменОбъектов, "Справочники");
	ДобавитьОбъектыСДопРеквизитамиПоТабличнойЧасти(ТаблицаПроверки, МассивИменОбъектов, "Документы");
	ДобавитьОбъектыСДопРеквизитамиПоТабличнойЧасти(ТаблицаПроверки, МассивИменОбъектов, "БизнесПроцессы");
	ДобавитьОбъектыСДопРеквизитамиПоТабличнойЧасти(ТаблицаПроверки, МассивИменОбъектов, "Задачи");
	
	Возврат МассивИменОбъектов;
	
КонецФункции

Процедура ДобавитьОбъектыСДопРеквизитамиПоТабличнойЧасти(ТаблицаПроверки, МассивИменОбъектов, КлассОбъектов)
	
	СоответствиеТиповВТабличнойЧастиКИ = Новый Соответствие;
	СоответствиеТиповВТабличнойЧастиКИ.Вставить("Свойство",        Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
	СоответствиеТиповВТабличнойЧастиКИ.Вставить("ТекстоваяСтрока", Новый ОписаниеТипов("Строка"));
	СоответствиеТиповВТабличнойЧастиКИ.Вставить("Значение",        Метаданные.ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.Тип);
	
	Для Каждого ОбъектМетаданных Из Метаданные[КлассОбъектов] Цикл
		Если ОбъектМетаданных.ПолноеИмя() = "Справочник.НаборыДополнительныхРеквизитовИСведений" Тогда
			// Это исключение
			Продолжить;
		КонецЕсли;
		Если ОбъектМетаданных.ТабличныеЧасти.Найти("ДополнительныеРеквизиты") <> Неопределено Тогда
			МассивИменОбъектов.Добавить(ОбъектМетаданных.ПолноеИмя());
			
			// проверяем состав типов
			Для Каждого ОписаниеРеквизитаОМ Из ОбъектМетаданных.ТабличныеЧасти.ДополнительныеРеквизиты.Реквизиты Цикл
				Если СоответствиеТиповВТабличнойЧастиКИ[ОписаниеРеквизитаОМ.Имя] = Неопределено Тогда 
					ДобавитьОписаниеПроизвольнойОшибки(ТаблицаПроверки, 
						ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Не ожидалось наличие реквизита %1 в табличной части ДополнительныеРеквизиты объекта метаданных %2'"),
							ОписаниеРеквизитаОМ.Имя,
							ОбъектМетаданных.Имя));
					Продолжить;
				КонецЕсли;
				Если СоответствиеТиповВТабличнойЧастиКИ[ОписаниеРеквизитаОМ.Имя].Типы()[0] <> ОписаниеРеквизитаОМ.Тип.Типы()[0] Тогда
					ДобавитьОписаниеПроизвольнойОшибки(ТаблицаПроверки, 
						ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Неверный тип реквизита %1 табличной части ДополнительныеРеквизиты объекта метаданных %2'"),
							ОписаниеРеквизитаОМ.Имя,
							ОбъектМетаданных.Имя));
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СтруктураПодчиненности

 Функция Подключаемый_СтруктураПодчиненностиПроверитьСоставДокументов()
 
	МассивФакт = Неопределено;
	ПроверитьТипы(МассивФакт, "ОбщиеКоманды.СтруктураПодчиненности.ТипПараметраКоманды");
	ПроверитьТипы(МассивФакт, "КритерииОтбора.СвязанныеДокументы.Тип");
	
	СписокНеПроверяемых = НоваяТаблицаПроверки();
	ДобавитьНеПроверяемуюСтроку(СписокНеПроверяемых,
		НСтр("ru = 'Необходимо установить состав реквизитов, в которых требуется осуществлять поиск родительских документов
				| Этот состав необходимо указать в свойстве ""Состав"" критерия отбора ""СвязанныеДокументы""'"), 
		"Произвольная", НСтр("ru = 'Структура подчиненности'"));
				
	РезультатПроверки = Новый Структура("ТаблицаПроверки, ТаблицаНеПроверяемых", МассивФакт, СписокНеПроверяемых);
	Возврат РезультатПроверки;
	
 КонецФункции

#КонецОбласти

#Область УправлениеДоступом

Функция Подключаемый_УправлениеДоступомРежимРаботы()
	
	Результат = НоваяТаблицаПроверки();
	
	Попытка
		РежимРаботы = Вычислить("УправлениеДоступомСлужебный.УпрощенныйИнтерфейсНастройкиПравДоступа()");
	Исключение
		// Если это функции нет, продолжаем выполнение.
		РежимРаботы = Ложь;
	КонецПопытки;
	
	СтрокаТаблицы = Результат.Добавить();
	СтрокаТаблицы.РеквизитПроверки = "УправлениеДоступомПереопределяемый.ПриОпределенииИнтерфейсаНастройкиДоступа";
	СтрокаТаблицы.ПроверенныеДанные = ?(РежимРаботы, "Упрощенный", "Обычный");
	
	Возврат Результат;
	
КонецФункции

Функция Подключаемый_УправлениеДоступомВидыДоступа()
	
	Результат = НоваяТаблицаПроверки();
	
	СтрокаТаблицы = Результат.Добавить();
	СтрокаТаблицы.РеквизитПроверки = "СписокВидовДоступа";
	СтрокаТаблицы.ПроверенныеДанные = "";
	
	Попытка
		ВидыДоступа = Вычислить("УправлениеДоступомСлужебныйПовтИсп.Параметры().СвойстваВидовДоступа.Массив");
	Исключение
		Возврат Результат; // Если подсистема еще не внедрена, то пустой результат.
	КонецПопытки;
	
	МассивИменВидовДоступа = Новый Массив;
	Для каждого ВидДоступа Из ВидыДоступа Цикл
		МассивИменВидовДоступа.Добавить(ВидДоступа.Имя);
	КонецЦикла;
	
	СтрокаТаблицы.ПроверенныеДанные = МассивВСтроку(МассивИменВидовДоступа);
	
	Возврат Результат;
	
КонецФункции

Функция Подключаемый_УправлениеДоступомТипыЗначенийДоступа()
	
	Результат = НоваяТаблицаПроверки();
	
	СтрокаТаблицы = Результат.Добавить();
	СтрокаТаблицы.РеквизитПроверки  = "ТипыЗначенийДоступа";
	СтрокаТаблицы.ПроверенныеДанные = "";
	
	Попытка
		ВидыДоступа = Вычислить("УправлениеДоступомСлужебныйПовтИсп.Параметры().СвойстваВидовДоступа.Массив");
	Исключение
		Возврат Результат; // Если подсистема еще не внедрена, то пустой результат.
	КонецПопытки;
	
	ТипыЗначенийДоступа = Новый Массив;
	Для каждого ВидДоступа Из ВидыДоступа Цикл
		ТипыЗначенийДоступа.Добавить(Метаданные.НайтиПоТипу(ВидДоступа.ТипЗначений).ПолноеИмя());
	КонецЦикла;
	
	СтрокаТаблицы.ПроверенныеДанные = МассивВСтроку(ТипыЗначенийДоступа);
	
	Возврат Результат;
	
КонецФункции

Функция Подключаемый_УправлениеДоступомЛогикаОграниченийДоступа()
	
	ТаблицаПроверки = НоваяТаблицаПроверки();
	
	ДобавитьОписаниеПроизвольнойОшибки(ТаблицаПроверки,
		НСтр("ru = 'Убедиться, что логика ограничения прав доступа пользователей реализована согласно проектным решениям.'"));
	
КонецФункции

Функция Подключаемый_УправлениеДоступомВладельцыНастроекПравОбъектов()
	
	Результат = НоваяТаблицаПроверки();
	
	СтрокаТаблицы = Результат.Добавить();
	СтрокаТаблицы.РеквизитПроверки  = "ВладельцыНастроекПрав";
	СтрокаТаблицы.ПроверенныеДанные = "";
	
	Попытка
		ВозможныеПрава = Вычислить("УправлениеДоступомСлужебныйПовтИсп.Параметры().ВозможныеПраваДляНастройкиПравОбъектов");
	Исключение
		Возврат Результат; // Если подсистема еще не внедрена, то пустой результат.
	КонецПопытки;
	
	МассивИменВладельцев = Новый Массив();
	Для каждого ОписаниеВозможныхПравВладельца Из ВозможныеПрава.ПоПолнымИменам Цикл
		МассивИменВладельцев.Добавить(ОписаниеВозможныхПравВладельца.Ключ);
	КонецЦикла;
	СтрокаТаблицы.ПроверенныеДанные = МассивВСтроку(МассивИменВладельцев);
	
	Возврат Результат;
	
КонецФункции

Функция Подключаемый_УправлениеДоступомРазмещениеВКИ()
	
	ТаблицаПроверки = НоваяТаблицаПроверки();
	ПроверитьРазмещениеВКомандномИнтерфейсе("Справочник.ГруппыДоступа", ТаблицаПроверки);
	ПроверитьРазмещениеВКомандномИнтерфейсе("Справочник.ПрофилиГруппДоступа", ТаблицаПроверки);
	
	СписокНеПроверяемых = НоваяТаблицаПроверки();
	
	ДобавитьНеПроверяемуюСтроку(СписокНеПроверяемых,
		НСтр("ru = 'Убедиться, что константа ОграничиватьДоступНаУровнеЗаписей размещена в форме настроек системы.'"),
		"Произвольная",
		НСтр("ru = 'Управление доступом'"));
	
	Результат = Новый Структура;
	Результат.Вставить("ТаблицаПроверки",      ТаблицаПроверки);
	Результат.Вставить("ТаблицаНеПроверяемых", СписокНеПроверяемых);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область УправлениеИтогамиИАгрегатами

Функция Подключаемый_УправлениеИтогамиИАгрегатамиПроверитьРазмещениеОбработки()
	Возврат ПроверитьРазмещениеВКомандномИнтерфейсе("Обработка.УправлениеИтогамиИАгрегатами");
КонецФункции

#КонецОбласти

#Область ФайловыеФункции

Функция Подключаемый_ФайловыеФункцииПроверитьРазмещениеОбъектов()
	РезультатПроверки = ПроверитьРазмещениеВКомандномИнтерфейсе("Справочник.ТомаХраненияФайлов");
	ПроверитьРазмещениеВКомандномИнтерфейсе("Обработка.АвтоматическоеИзвлечениеТекстов", РезультатПроверки);
	Возврат РезультатПроверки;
КонецФункции

#КонецОбласти

#Область ЭлектроннаяПодпись

// Дописывает в ТаблицуПроверяемыхТипов данные о наличии реквизита и табличной части ЭП, зачитывая их из конфигурации.
//
// Параметры : 
//	ТаблицаПроверки - Неопределено - если проверка выполняется в первый раз, 
//		ТаблицаЗначений - результат выполнения предыдущих функций проверки (см, например, функцию
//		                  ПроверитьРазмещениеВКомандномИнтерфейсе();
//
Процедура ПроверитьНаличиеРеквизитаИТабличнойЧастиЭП(ТаблицаПроверки)
	
	// Если это первая проверка - тогда сформируем структуру итоговой таблицы.
	Если ТаблицаПроверки = Неопределено Тогда
		ТаблицаПроверки = НоваяТаблицаПроверки();
	КонецЕсли;
	
	
	СтрокаТаблицы = ТаблицаПроверки.Добавить();
	СтрокаТаблицы.РеквизитПроверки = "ПодписанЭП";
	
	Для Каждого СправочникМета Из Метаданные.Справочники Цикл
		
		ЕстьРеквизит = (СправочникМета.Реквизиты.Найти("ПодписанЭП") <> Неопределено);
		ЕстьТаблЧасть = (СправочникМета.ТабличныеЧасти.Найти("ЭлектронныеПодписи") <> Неопределено);
		
		Если ЕстьРеквизит И ЕстьТаблЧасть Тогда
			
			ТекущийОбъект = СправочникМета;
			Если ТекущийОбъект <> Неопределено Тогда
				СтрокаТаблицы.ПроверенныеДанные = ?(ПустаяСтрока(СтрокаТаблицы.ПроверенныеДанные), 
				ТекущийОбъект.ПолноеИмя(), СтрокаТаблицы.ПроверенныеДанные + "," + ТекущийОбъект.ПолноеИмя());
			КонецЕсли;
			
		КонецЕсли;	
		
	КонецЦикла;	
	
КонецПроцедуры

Функция Подключаемый_ЭлектроннаяПодписьПроверитьТипыВладельцев()
	
	ТаблицаПроверки = Неопределено;
	
	СписокНеПроверяемых = НоваяТаблицаПроверки();
	ДобавитьНеПроверяемуюСтроку(СписокНеПроверяемых,
		НСтр("ru = 'Разместите в форме настроек программы поля для редактирования константы ИспользоватьЭлектронныеПодписи.'"), "Произвольная", НСтр("ru = 'Электронная подпись'"));
	ДобавитьНеПроверяемуюСтроку(СписокНеПроверяемых,
		НСтр("ru = 'Разместите в форме настроек программы поля для редактирования константы ИспользоватьШифрование.'"), "Произвольная", НСтр("ru = 'Электронная подпись'"));
	ДобавитьНеПроверяемуюСтроку(СписокНеПроверяемых,
		НСтр("ru = 'Разместите в форме настроек программы команду для открытия формы НастройкиЭлектроннойПодписиИШифрования.'"), "Произвольная", НСтр("ru = 'Электронная подпись'"));
	ДобавитьНеПроверяемуюСтроку(СписокНеПроверяемых,
		НСтр("ru = 'Разместите в форме персональных настроек команду для открытия формы НастройкиЭлектроннойПодписиИШифрования.'"), "Произвольная", НСтр("ru = 'Электронная подпись'"));
	ПроверитьНаличиеРеквизитаИТабличнойЧастиЭП(ТаблицаПроверки);
	
	РезультатПроверки = Новый Структура("ТаблицаПроверки, ТаблицаНеПроверяемых", ТаблицаПроверки, СписокНеПроверяемых);
	Возврат РезультатПроверки;
	
КонецФункции

#КонецОбласти

///////////////////////////////////////////////////////////////////////////////
// Общие процедуры и функции для выполнения проверки внедрения подсистем.
///////////////////////////////////////////////////////////////////////////////

#Область СлужебныеПроцедурыИФункции

// Возвращает пустую таблицу с результатами проверки внедрения.
//
// Возвращаемое значение
//   ТаблицаЗначений - с колонками:
//	  * РеквизитПроверки  - Строка - имя проверяемого объекта.
//    * ПроверенныеДанные - Строка - результат проверки. Например, для функции ПроверитьНаНаличиеОбъектовВКИ - 
//                                   это список полных имен подсистем через запятую, в состав которых входит объект.
// 
Функция НоваяТаблицаПроверки()
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("РеквизитПроверки", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ПроверенныеДанные", Новый ОписаниеТипов("Строка"));
	Возврат Результат;
КонецФункции

// Дописывает в ТаблицуПроверяемыхТипов данные о типах указанного объекта проверки, зачитывая их из конфигурации.
//
// Параметры: 
//	ТаблицаПроверки - Неопределено - если проверка выполняется в первый раз, 
//		ТаблицаЗначений - результат выполнения предыдущих функций проверки (см, например, функцию
//		                  ПроверитьРазмещениеВКомандномИнтерфейсе();
// 	ОбъектПроверки - строка, полное имя проверяемого объекта, как оно задано во встроенном языке.
// 		Например "ПодпискиНаСобытия.ЗаписатьВСписокБизнесПроцессов.Источник.Тип" или.
//		"Документы.Встреча.Реквизиты.Автор.Тип".
//
Функция ПроверитьТипы(ТаблицаПроверки, ОбъектПроверки)
	
	// Если это первая проверка - тогда сформируем структуру итоговой таблицы.
	Если ТаблицаПроверки = Неопределено Тогда
		ТаблицаПроверки = НоваяТаблицаПроверки();
	КонецЕсли;

	Попытка 
		СоставТиповПроверки = Вычислить("Метаданные." + ОбъектПроверки);
	Исключение
		Если РежимОтладкиПомощника() Тогда
			ВызватьИсключение;  // Надо исправлять ошибку в коде проверки.
		КонецЕсли;
		ТекстСообщения = НСтр("ru = 'В конфигурации отсутствует реквизит (свойство) %1. Проверка пропущена.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ОбъектПроверки);
		СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
	КонецПопытки;
	
	// Ожидаем ОписаниеТипов или КоллекцияЗначенийСвойстваОбъектаМетаданных.
	ФактическийТип = ТипЗнч(СоставТиповПроверки);
	Если Не (ФактическийТип = Тип("ОписаниеТипов") 
		Или ФактическийТип = Тип("КоллекцияЗначенийСвойстваОбъектаМетаданных")) Тогда
		Если РежимОтладкиПомощника() Тогда
			ТекстСообщения = НСтр("ru = '%1 содержит некорректный тип: %2'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ОбъектПроверки);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%2", Строка(ФактическийТип));
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;	
		ТекстСообщения = НСтр("ru = 'В конфигурации реквизит (свойство) %1 имеет тип, отличный от ожидаемого. Проверка пропущена.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ОбъектПроверки);
		СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;
	
	СтрокаТаблицы = ТаблицаПроверки.Добавить();
	СтрокаТаблицы.РеквизитПроверки = ОбъектПроверки;
	
	Если ТипЗнч(СоставТиповПроверки) = Тип("КоллекцияЗначенийСвойстваОбъектаМетаданных") Тогда
		ОписаниеТипов = Новый Массив();
		Для каждого ОбъектМетаданныхДляПроверки Из СоставТиповПроверки Цикл
			 ОписаниеТипов.Добавить(ОбъектМетаданныхДляПроверки);
		КонецЦикла;
	Иначе
		ОписаниеТипов = СоставТиповПроверки.Типы();
	КонецЕсли;
	
	СтрокаТаблицы.ПроверенныеДанные = МассивТиповВСтроку(ОписаниеТипов);
	
	// Исключаем справочник ИдентификаторыОбъектовМетаданных из объектов проверки для присоединенных файлов.
	Если ОбъектПроверки = "РегистрыСведений.НаличиеПрисоединенныхФайлов.Измерения.ОбъектСФайлами.Тип" 
		Или ОбъектПроверки = "ОбщиеКоманды.ПрисоединенныеФайлыКОбъекту.ТипПараметраКоманды" Тогда
		СтрокаТаблицы.ПроверенныеДанные = СтрЗаменить(СтрокаТаблицы.ПроверенныеДанные, ",Справочник.ИдентификаторыОбъектовМетаданных", "")
	КонецЕсли;
	
	Возврат СтрокаТаблицы;
КонецФункции

// Найти текст указанной процедуры(функции) в указанном общем модуле.
//
// Параметры: 
//   ИмяМодуля - Строка, полное имя модуля, в котором надо искать требуемую процедуру(функцию).
//   ИмяПроцедуры - Строка, имя процедуры(функции) в указанном модуле, которую необходимо вернуть.
//   ИскатьПроцедуру - Булево. Если Истина - будет произведена попытка найти процедуру, иначе - функцию.
//
// Возвращаемое значение: 
//   Строка - полный текст искомой процедуры или функции. В случае ее отсутствия или ошибок
//   выполнения возвращается пустая строка.
//
Функция НайтиПроцедуруМодуля(ИмяМодуля, ИмяПроцедуры, ИскатьПроцедуру = Истина)
	
	// Найдем во временном каталоге с текстами модулей интересующий нас.
	// Если такого нет - вернемся ни с чем.
	
	КаталогСМодулями =  КаталогВыгрузкиМодулей;
	МассивМодулей = НайтиФайлы(КаталогСМодулями, ИмяМодуля+".txt");
	Если МассивМодулей.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	// Теперь найденный текст модуля загрузим в программу и попробуем поискать процедуру или
	// функцию с требуемым именем.
	ТекстМодуля = Новый ТекстовыйДокумент;
	ТекстМодуля.Прочитать(МассивМодулей[0].ПолноеИмя);
	СтрокаТекста = ТекстМодуля.ПолучитьТекст();
	СтрокаВозврата = "";
	Если ИскатьПроцедуру Тогда
		СтрокаПоискаПоТекстуМодуля = "Процедура "+ ИмяПроцедуры + "(";
		СтрокаОкончания = "КонецПроцедуры";
	Иначе
		СтрокаПоискаПоТекстуМодуля = "Функция "+ ИмяПроцедуры + "(";
		СтрокаОкончания = "КонецФункции";
	КонецЕсли;
	
	ПозПроцедуры = СтрНайти(СтрокаТекста, СтрокаПоискаПоТекстуМодуля);
	
	// Если не нашли таковую - вернемся ни с чем...
	Если ПозПроцедуры = 0 Тогда 
		Возврат "";
	Иначе
		// Теперь надо найти, где процедура заканчивается.
		ПозОкончанияПроцедуры = 0;
		Пока ПозОкончанияПроцедуры < ПозПроцедуры Цикл
			СтрокаТекста = Сред(СтрокаТекста, ПозОкончанияПроцедуры+1);
			ПозПроцедуры = ПозПроцедуры - ПозОкончанияПроцедуры;
			ПозОкончанияПроцедуры = СтрНайти(СтрокаТекста, СтрокаОкончания);
			Если ПозОкончанияПроцедуры = 0 Тогда
				Возврат "";
			КонецЕсли;
		КонецЦикла;
		// Добавим в итоговую строку текст процедуры, который мы ограничили.
		СтрокаВозврата = Сред(СтрокаТекста,ПозПроцедуры, ПозОкончанияПроцедуры-ПозПроцедуры);
	КонецЕсли;
	Возврат СтрокаВозврата;
КонецФункции

// Возвращает таблицу, которая передается в процедуру ПроверитьСтрокиВызоваВПроцедурахМодуляФормыОбъекта.
//
// Возвращаемое значение:
//  ТаблицаЗначений - содержит поля:
//    - ИмяПроцедуры  - Строка
//    - ИскатьФункцию - Булево
//    - СтрокиВызова  - Массив строк.
//
Функция НовоеОписаниеТребуемыхПроверокСтрокВызоваВПроцедурахМодуля(ТребуемыеПроверки)
	
	Проверки = Новый ТаблицаЗначений;
	Проверки.Колонки.Добавить("ИмяПроцедуры",  Новый ОписаниеТипов("Строка"));
	Проверки.Колонки.Добавить("ИскатьФункцию", Новый ОписаниеТипов("Булево"));
	Проверки.Колонки.Добавить("СтрокиВызова",  Новый ОписаниеТипов("Массив"));
	
	ТребуемыеПроверки.Добавить(Проверки);
	
	Возврат Проверки;
	
КонецФункции

// Проверят строки вызова в процедурах модуля.
// Параметры:
//  ИмяМодуля                  - Строка - полное имя модуля.
//  ТребуемыеПроверки          - ТаблицаЗначений - шаблон возвращается функцией
//                                                 НовоеОписаниеТребуемыхПроверокСтрокВызоваВПроцедурахМодуля.
//  ТаблицаРезультатовПроверки - ТаблицаЗначений - шаблон возвращается функцией НоваяТаблицаПроверки.
//  ЕстьОшибки                 - Булево - возвращаемое значений, устанавливается Истина, если искомая строка вызова не
//                                        найдена.
// 
Процедура ПроверитьСтрокиВызоваВПроцедурахМодуляФормыОбъекта(ИмяМодуля, ТребуемыеПроверки, ТаблицаРезультатовПроверки, ЕстьОшибки)
	
	Подстроки = РазложитьСтрокуВМассивПодстрок(ИмяМодуля, ".");
	ПолноеИмя = Подстроки[0] + "." + Подстроки[1];
	
	Для каждого Проверки Из ТребуемыеПроверки Цикл
		СтрокаВызоваНайдена = Ложь;
		Для каждого Проверка Из Проверки Цикл
			Для каждого СтрокаВызова Из Проверка.СтрокиВызова Цикл
				ТекстПроцедуры = НайтиПроцедуруМодуля(ИмяМодуля, Проверка.ИмяПроцедуры, НЕ Проверка.ИскатьФункцию);
				Если СтрНайти(ТекстПроцедуры, СтрокаВызова) > 0 Тогда
					СтрокаВызоваНайдена = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		Если Не СтрокаВызоваНайдена Тогда
			ЕстьОшибки = Истина;
			Если Проверки.Количество() = 1 Тогда
				Проверка = Проверки[0];
				Если Проверка.СтрокиВызова.Количество() = 1 Тогда
					ДобавитьОписаниеПроизвольнойОшибки(ТаблицаРезультатовПроверки, ПодставитьПараметрыВСтроку(
						НСтр("ru = 'В модуле формы объекта (%1) в обработчике %2 не обнаружена строка вызова ""%3"".'"),
						ПолноеИмя, Проверка.ИмяПроцедуры, СтрокаВызова));
				Иначе
					СтрокиВызова = "";
					Для каждого СтрокаВызова Из Проверка.СтрокиВызова Цикл
						Если СтрокиВызова <> "" Тогда
							СтрокиВызова = СтрокиВызова + ", ";
						КонецЕсли;
						СтрокиВызова = СтрокиВызова + """" + СтрокаВызова + """";
					КонецЦикла;
					ДобавитьОписаниеПроизвольнойОшибки(ТаблицаРезультатовПроверки, ПодставитьПараметрыВСтроку(
						НСтр("ru = 'В модуле формы объекта (%1) в обработчике %2 не обнаружено ни одной из строк вызова %3.'"),
						ПолноеИмя, Проверка.ИмяПроцедуры, СтрокиВызова));
				КонецЕсли;
			Иначе
				Текст = ПодставитьПараметрыВСтроку(НСтр("ru = 'В модуле формы объекта (%1)'"), ПолноеИмя);
				Для каждого Проверка Из Проверки Цикл
					Если Проверка.СтрокиВызова.Количество() = 1 Тогда
						Текст = Текст + " " + ПодставитьПараметрыВСтроку(
							НСтр("ru = 'ни в обработчике %1 не обнаружена строка вызова ""%2"",'"),
							Проверка.ИмяПроцедуры, СтрокаВызова);
					Иначе
						СтрокиВызова = "";
						Для каждого СтрокаВызова Из Проверка.СтрокиВызова Цикл
							Если СтрокиВызова <> "" Тогда
								СтрокиВызова = СтрокиВызова + ", ";
							КонецЕсли;
							СтрокиВызова = СтрокиВызова + """" + СтрокаВызова + """";
						КонецЦикла;
						Текст = Текст + " " + ПодставитьПараметрыВСтроку(
							НСтр("ru = 'ни в обработчике %1 не обнаружено ни одной из строк вызова %2,'"),
							Проверка.ИмяПроцедуры, СтрокиВызова);
					КонецЕсли;
				КонецЦикла;
				ДобавитьОписаниеПроизвольнойОшибки(ТаблицаРезультатовПроверки, Лев(Текст, СтрДлина(Текст)-1) + ".");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Определить подсистемы (разделы командного интерфейса), в состав которых входит объект.
//
// Ограничение на использование: 
// В эту функцию нельзя передавать объект типа "Команда" (не "ОбщаяКоманда"), потому что 
// нет технической возможности проверить включение к командный интерфейс объектов этого типа.
// В таком случае, необходимо проверять наличие в командном интерфейсе объекта-владельца данной команды.
//
// Параметры:
//   Объект            - Строка - полное имя объекта метаданных конфигурации, по которому необходимо провести проверку.
//                                Например, "Справочник.Валюты".
//   РезультатПроверки - ТаблицаЗначений - результат предыдущей проверки. Для случая, когда нужно проверить 
//                                         размещение нескольких объектов в одних и тех же подсистемах.
//
// Возвращаемое значение
//   ТаблицаЗначений - с колонками:
//	  * РеквизитПроверки  - Строка - имя проверяемого объекта.
//    * ПроверенныеДанные - Строка - список полных имен подсистем через запятую, в состав которых входит объект.
//
Функция ПроверитьРазмещениеВКомандномИнтерфейсе(Объект, РезультатПроверки = Неопределено)
	
	Если СтрНайти(Объект, ".Команды")> 0 Тогда
		Текст = НСтр("ru = 'Невозможно проверить наличие команды в командном интерфейсе : %1'");
		Текст = СтрЗаменить(Текст, "%1", Объект);
		ВызватьИсключение Текст;
	КонецЕсли;
	// Запишем в структуру (если ранее не записывали) соответствие подсистемы и объектов ее состава
	// а также признака наличия командного интерфейса у подсистемы.
	Если СоответствиеОбъектовПодсистемам = Неопределено Тогда
		СоответствиеОбъектовПодсистемам = НовоеСоответствиеОбъектовПодсистемам();
	КонецЕсли;
	
	// Определим параметры поиска в соответствии с входными параметрами функции.
	
	Если Объект = "" Тогда
		ПараметрыОтбора = Новый Структура("ЕстьКИ", Истина);
	Иначе
		ПараметрыОтбора = Новый Структура("Объект, ЕстьКИ", Объект, Истина);
	КонецЕсли;
	
	// Найдем в соответствии с параметрами поиска нужные подсистемы,
	
	ПодсистемыСОбъектом = СоответствиеОбъектовПодсистемам.НайтиСтроки(ПараметрыОтбора);
	СтрокаОтвета = "";
	
	 // И добавим их в строку ответа.
	
	Для Каждого Подсистема Из ПодсистемыСОбъектом Цикл
		СтрокаОтвета = ?(ПустаяСтрока(СтрокаОтвета), Подсистема.ИмяПодсистемы, СтрокаОтвета + "," + Подсистема.ИмяПодсистемы);
	КонецЦикла;
	
	// После чего сформируем и вернем итоговую таблицу.
	Если РезультатПроверки = Неопределено Тогда
		РезультатПроверки = НоваяТаблицаПроверки();
	КонецЕсли;
	
	СтрокаВозврата = РезультатПроверки.Добавить();
	СтрокаВозврата.РеквизитПроверки = Объект;
	СтрокаВозврата.ПроверенныеДанные = СтрокаОтвета;
	Возврат РезультатПроверки;
	
КонецФункции

Функция НовоеСоответствиеОбъектовПодсистемам(Знач УчитыватьКомандыОбъектов = Ложь)
	ТипСтрока = Новый ОписаниеТипов("Строка");
	ТипБулево = Новый ОписаниеТипов("Булево");
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("ИмяПодсистемы", ТипСтрока);
	Результат.Колонки.Добавить("Объект",        ТипСтрока);
	Результат.Колонки.Добавить("ЕстьКИ",        ТипБулево);
	
	Результат.Индексы.Добавить("Объект");
	Результат.Индексы.Добавить("Объект, ЕстьКИ");
	
	ДополнитьСоответствиеОбъектамиПодсистемыРекурсивно(Результат, Метаданные.Подсистемы, УчитыватьКомандыОбъектов);
	
	Возврат Результат;
КонецФункции

Процедура ДополнитьСоответствиеОбъектамиПодсистемыРекурсивно(ТаблицаСоответствия, Знач КоллекцияПодсистем, Знач УчитыватьКомандыОбъектов)
	
	КэшКомандОбъектов = Новый Соответствие;
	
	Для Каждого ИсследуемаяПодсистема Из КоллекцияПодсистем Цикл
		ИмяПодсистемы = ПолноеИмяПодсистемы(ИсследуемаяПодсистема);
		
		Для Каждого ОбъектСостава Из ИсследуемаяПодсистема.Состав Цикл
			НоваяСтрока = ТаблицаСоответствия.Добавить();
			НоваяСтрока.ИмяПодсистемы = ИмяПодсистемы;
			НоваяСтрока.Объект        = ОбъектСостава.ПолноеИмя();
			НоваяСтрока.ЕстьКИ        = ИсследуемаяПодсистема.ВключатьВКомандныйИнтерфейс;
			
			Если УчитыватьКомандыОбъектов Тогда
				// Дополним коллекцией команд
				ДополнитьСоответствиеКомандамиОбъекта(ТаблицаСоответствия, ОбъектСостава, КэшКомандОбъектов, ИмяПодсистемы, НоваяСтрока.ЕстьКИ);
			КонецЕсли;
		КонецЦикла;
			
		ДополнитьСоответствиеОбъектамиПодсистемыРекурсивно(ТаблицаСоответствия, ИсследуемаяПодсистема.Подсистемы, УчитыватьКомандыОбъектов);
	КонецЦикла;
	
КонецПроцедуры

Функция ПолноеИмяПодсистемы(Знач МетаПодсистема)
	ТекущаяПодсистема = МетаПодсистема;
	ТипМета = Тип("ОбъектМетаданных");
	
	Пока ТипЗнч(ТекущаяПодсистема) = ТипМета Цикл
		Результат = ТекущаяПодсистема.Имя + "." + Результат;
		ТекущаяПодсистема = ТекущаяПодсистема.Родитель();
	КонецЦикла;
	Результат = НСтр("ru = 'Подсистема'") + "." + Результат;
	
	Возврат Лев(Результат, СтрДлина(Результат) - 1);
КонецФункции

Процедура ДополнитьСоответствиеКомандамиОбъекта(ТаблицаСоответствия, Знач МетаОбъект, Знач КэшКомандОбъектов, Знач ИмяПодсистемы, Знач ПодсистемаВключенаВКИ)
	
	ИменаКоманд = КэшКомандОбъектов.Получить(МетаОбъект);
	Если ИменаКоманд = Неопределено Тогда
		// Добавим в кэш
		ИменаКоманд = Новый Массив;
		
		РеквизитыОбъекта = Новый Структура("Команды", Новый Массив);
		ЗаполнитьЗначенияСвойств(РеквизитыОбъекта, МетаОбъект);
		Для Каждого МетаКоманда Из РеквизитыОбъекта.Команды Цикл
			ИменаКоманд.Добавить( МетаКоманда.ПолноеИмя() );
		КонецЦикла;
		
		КэшКомандОбъектов.Вставить(МетаОбъект, ИменаКоманд);
	КонецЕсли;
	
	// Объект уже входит в состав подсистемы, поэтому имя системы просто передаем из параметра.
	Для Каждого ИмяКоманды Из ИменаКоманд Цикл
		НоваяСтрока = ТаблицаСоответствия.Добавить();
		НоваяСтрока.ИмяПодсистемы = ИмяПодсистемы;
		НоваяСтрока.Объект        = ИмяКоманды;
		НоваяСтрока.ЕстьКИ        = ПодсистемаВключенаВКИ;
	КонецЦикла;
КонецПроцедуры

// Добавляет в результат проверки строку с текстом произвольной ошибки внедрения.
// 
// Параметры: 
//   РезультатПроверки - ТаблицаЗначений - таблица с ответами, или Неопределено, 
//                                         если данная процедура вызывается впервые.
//   ОписаниеОшибки    - Строка          - текстовое описание ошибки внедрения.
//
Процедура ДобавитьОписаниеПроизвольнойОшибки(РезультатПроверки, ОписаниеОшибки)
	
	ДобавитьОписаниеПроизвольнойПроверки(РезультатПроверки, "ПроизвольнаяОшибка", ОписаниеОшибки);
	
КонецПроцедуры

// Добавляет в таблицу результатов проверки новую строку.
// 
// Параметры: 
//   РезультатПроверки - ТаблицаЗначений - таблица с ответами, или Неопределено, 
//                                         если данная процедура вызывается впервые.
//   РеквизитПроверки  - Строка          - имя проверяемого объекта.
//   ПроверенныеДанные - Строка          - результат проверки.
//
Процедура ДобавитьОписаниеПроизвольнойПроверки(РезультатПроверки, РеквизитПроверки, ПроверенныеДанные)
	
	Если РезультатПроверки = Неопределено Тогда
		РезультатПроверки = НоваяТаблицаПроверки();
	КонецЕсли;
	
	СтрокаВозврата = РезультатПроверки.Добавить();
	СтрокаВозврата.РеквизитПроверки  = РеквизитПроверки;
	СтрокаВозврата.ПроверенныеДанные = ПроверенныеДанные;
	
КонецПроцедуры

Процедура УдалитьРегистрациюОбъекта(РезультатПроверки, ОбъектСтрока)
	
	Если НЕ ПустаяСтрока(РезультатПроверки.ПроверенныеДанные) Тогда
		МассивПодстрок = РазложитьСтрокуВМассивПодстрок(РезультатПроверки.ПроверенныеДанные);
		Позиция = МассивПодстрок.Найти(ОбъектСтрока);
		Если Позиция <> Неопределено Тогда
			МассивПодстрок.Удалить(Позиция);
		КонецЕсли;
		РезультатПроверки.ПроверенныеДанные = МассивВСтроку(МассивПодстрок);
	КонецЕсли;
	
КонецПроцедуры

// Дописывает в ТаблицуПроверяемыхТипов данные о типах состава плана обмена.
//
// Параметры:
//  ТаблицаПроверяемыхТипов - Неопределено - если проверка выполняется в первый раз, 
//      ТаблицаЗначений - результат выполнения предыдущих функций проверки (см, например, функцию
//                        ПроверитьРазмещениеВКомандномИнтерфейсе();
//  ИмяПланаОбмена - Строка - имя плана обмена, как объекта метаданных, для которого выполняется процедура проверки.
// 
Процедура ПроверитьТипыСоставаПланаОбмена(ТаблицаПроверяемыхТипов, ИмяПланаОбмена, ТолькоЭлементыАвторегистрацияЗапрещена = Ложь)
	
	// Если это первая проверка - тогда сформируем структуру итоговой таблицы.
	Если ТаблицаПроверяемыхТипов = Неопределено Тогда
		ТаблицаПроверяемыхТипов = НоваяТаблицаПроверки();
	КонецЕсли;
	
	СтрокаТаблицы = ТаблицаПроверяемыхТипов.Добавить();
	СтрокаТаблицы.РеквизитПроверки = СтрЗаменить("ПланыОбмена.[ИмяПланаОбмена].Состав", "[ИмяПланаОбмена]", ИмяПланаОбмена);
	СтрокаТаблицы.ПроверенныеДанные = ПолучитьТипыСоставаПланаОбмена(ИмяПланаОбмена, ТолькоЭлементыАвторегистрацияЗапрещена);
	
КонецПроцедуры

// Возвращает типы метаданных элементов состава плана обмена.
//
// Параметры:
//   ИмяПланаОбмена - Строка - имя плана обмена, как объекта метаданных, для которого выполняется функция.
// 
// Возвращаемое значение:
//   Строка - строка типов метаданных элементов состава плана обмена.
//
Функция ПолучитьТипыСоставаПланаОбмена(ИмяПланаОбмена, ТолькоЭлементыАвторегистрацияЗапрещена = Ложь)
	
	// Возвращаемое значение функции.
	Результат = "";
	Состав = Метаданные.ПланыОбмена[ИмяПланаОбмена].Состав;
	Для Каждого ЭлементСостава Из Состав Цикл
		
		// Фильтр по признаку Авторегистрация.
		Если ТолькоЭлементыАвторегистрацияЗапрещена
			И ЭлементСостава.АвтоРегистрация <> АвтоРегистрацияИзменений.Запретить Тогда
			Продолжить;
		КонецЕсли;
		Результат = Результат + ?(ПустаяСтрока(Результат), "", ",") + ЭлементСостава.Метаданные.ПолноеИмя();
	КонецЦикла;
	Возврат Результат;
КонецФункции

Процедура ДобавитьИменаМодулейФормОбъектов(ИменаМодулей, КоллекцияМетаданных)
	Для Каждого ОбъектМетаданных Из КоллекцияМетаданных Цикл
		ИменаМодулей.Добавить(ПолучитьИмяМодуляФормыОбъектаПоИмениОМ(ОбъектМетаданных.ПолноеИмя()));
	КонецЦикла;
КонецПроцедуры

Процедура ДобавитьИменаМодулейФормСписков(ИменаМодулей, КоллекцияМетаданных)
	
	Для Каждого ОбъектМетаданных Из КоллекцияМетаданных Цикл
		ИменаМодулей.Добавить(ПолучитьИмяМодуляФормыСпискаПоИмениОМ(ОбъектМетаданных.ПолноеИмя()));
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьИменаМодулейМенеджеров(ИменаМодулей, КоллекцияМетаданных)
	
	Для Каждого ОбъектМетаданных Из КоллекцияМетаданных Цикл
		ИменаМодулей.Добавить(ОбъектМетаданных.ПолноеИмя()+".МодульМенеджера");
	КонецЦикла;
	
КонецПроцедуры

Функция СформироватьИменаМодулей(Знач ДобавлятьМодулиФормОбъекта = Ложь,
								 Знач ДобавлятьМодулиФормСписка = Ложь,
								 Знач ДобавлятьМодулиМенеджеров = Ложь)
	
	ИменаМодулей = Новый Массив;
	
	Если ДобавлятьМодулиФормОбъекта Тогда
	
		ДобавитьИменаМодулейФормОбъектов(ИменаМодулей, Метаданные.Справочники);
		ДобавитьИменаМодулейФормОбъектов(ИменаМодулей, Метаданные.Документы);
		ДобавитьИменаМодулейФормОбъектов(ИменаМодулей, Метаданные.ПланыВидовХарактеристик);
		ДобавитьИменаМодулейФормОбъектов(ИменаМодулей, Метаданные.БизнесПроцессы);
		ДобавитьИменаМодулейФормОбъектов(ИменаМодулей, Метаданные.Задачи);
		ДобавитьИменаМодулейФормОбъектов(ИменаМодулей, Метаданные.ПланыОбмена);
		ДобавитьИменаМодулейФормОбъектов(ИменаМодулей, Метаданные.ПланыСчетов);
		ДобавитьИменаМодулейФормОбъектов(ИменаМодулей, Метаданные.ПланыВидовРасчета);
		
	КонецЕсли;
	
	Если ДобавлятьМодулиФормСписка Тогда
	
		ДобавитьИменаМодулейФормСписков(ИменаМодулей, Метаданные.Справочники);
		ДобавитьИменаМодулейФормСписков(ИменаМодулей, Метаданные.Документы);
		ДобавитьИменаМодулейФормСписков(ИменаМодулей, Метаданные.ПланыВидовХарактеристик);
		ДобавитьИменаМодулейФормСписков(ИменаМодулей, Метаданные.БизнесПроцессы);
		ДобавитьИменаМодулейФормСписков(ИменаМодулей, Метаданные.Задачи);
		ДобавитьИменаМодулейФормСписков(ИменаМодулей, Метаданные.ПланыОбмена);
		ДобавитьИменаМодулейФормСписков(ИменаМодулей, Метаданные.ПланыСчетов);
		ДобавитьИменаМодулейФормСписков(ИменаМодулей, Метаданные.ПланыВидовРасчета);
		
	КонецЕсли;
	
	Если ДобавлятьМодулиМенеджеров Тогда
		
		ДобавитьИменаМодулейМенеджеров(ИменаМодулей, Метаданные.Справочники);
		ДобавитьИменаМодулейМенеджеров(ИменаМодулей, Метаданные.Документы);
		ДобавитьИменаМодулейМенеджеров(ИменаМодулей, Метаданные.ПланыВидовХарактеристик);
		ДобавитьИменаМодулейМенеджеров(ИменаМодулей, Метаданные.БизнесПроцессы);
		ДобавитьИменаМодулейМенеджеров(ИменаМодулей, Метаданные.Задачи);
		ДобавитьИменаМодулейМенеджеров(ИменаМодулей, Метаданные.ПланыОбмена);
		ДобавитьИменаМодулейМенеджеров(ИменаМодулей, Метаданные.ПланыСчетов);
		ДобавитьИменаМодулейМенеджеров(ИменаМодулей, Метаданные.ПланыВидовРасчета);
		ДобавитьИменаМодулейМенеджеров(ИменаМодулей, Метаданные.Обработки);
		ДобавитьИменаМодулейМенеджеров(ИменаМодулей, Метаданные.Отчеты);
		
	КонецЕсли;
	
	Возврат ИменаМодулей;
	
КонецФункции

// Получает имя модуля формы объекта на диске (без расширения) по полному имени объекта.
// Используется для объектов: Документы, Справочники.
// Параметры:
//  ИмяОМ - строка - полное имя объекта метаданных.
//
Функция ПолучитьИмяМодуляФормыСпискаПоИмениОМ(ПолноеИмяОМ)
	
	ИмяМодуляФормыСписка = "[ПолноеИмяОбъектаМетаданных].Форма.[ИмяФормыСписка].Форма.Модуль";
	
	ОсновнаяФорма = Метаданные.НайтиПоПолномуИмени(ПолноеИмяОМ).ОсновнаяФормаСписка;
	
	Если ОсновнаяФорма = Неопределено Тогда
		ИмяФормыСписка = "ФормаСписка";
	Иначе
		ИмяФормыСписка = ОсновнаяФорма.Имя;
	КонецЕсли;
	
	ИмяМодуляФормыСписка = СтрЗаменить(ИмяМодуляФормыСписка, "[ПолноеИмяОбъектаМетаданных]", ПолноеИмяОМ);
	ИмяМодуляФормыСписка = СтрЗаменить(ИмяМодуляФормыСписка, "[ИмяФормыСписка]",             ИмяФормыСписка);
	
	Возврат ИмяМодуляФормыСписка;
	
КонецФункции

// Получает имя модуля формы объекта на диске (без расширения) по полному имени объекта.
// Используется для объектов: Документы, Справочники.
// Параметры:
//  ИмяОМ - строка - полное имя объекта метаданных.
//
Функция ПолучитьИмяМодуляФормыОбъектаПоИмениОМ(ПолноеИмяОМ)
	
	ИмяМодуляФормыОбъекта = "[ПолноеИмяОбъектаМетаданных].Форма.[ИмяФормыОбъекта].Форма.Модуль";
	КлассОМ = РазложитьСтрокуВМассивПодстрок(ПолноеИмяОМ, ".")[0];
	
	ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ПолноеИмяОМ);
	Если ЭтоРегистр(ОбъектМетаданных) Тогда
		ОсновнаяФорма = ОбъектМетаданных.ОсновнаяФормаЗаписи;
	Иначе
		ОсновнаяФорма = ОбъектМетаданных.ОсновнаяФормаОбъекта;
	КонецЕсли;
	
	Если ОсновнаяФорма = Неопределено Тогда
		
		Если      КлассОМ = "Справочник" Тогда
			ИмяФормыОбъекта = "ФормаЭлемента";
			
		ИначеЕсли КлассОМ = "Документ" Тогда
			ИмяФормыОбъекта = "ФормаДокумента";
			
		ИначеЕсли КлассОМ = "ПланВидовХарактеристик" Тогда
			ИмяФормыОбъекта = "ФормаЭлемента";
			
		ИначеЕсли КлассОМ = "БизнесПроцесс" Тогда
			ИмяФормыОбъекта = "ФормаБизнесПроцесса";
			
		ИначеЕсли КлассОМ = "Задача" Тогда
			ИмяФормыОбъекта = "ФормаЗадачи";
			
		ИначеЕсли КлассОМ = "ПланОбмена" Тогда
			ИмяФормыОбъекта = "ФормаУзла";
			
		ИначеЕсли КлассОМ = "ПланСчетов" Тогда
			ИмяФормыОбъекта = "ФормаПланаСчетов";
			
		ИначеЕсли КлассОМ = "ПланВидовРасчета" Тогда
			ИмяФормыОбъекта = "ФормаПланаВидовРасчета";
			
		ИначеЕсли ЭтоРегистр(ОбъектМетаданных) Тогда
			ИмяФормыОбъекта = "ФормаЗаписи";
			
		Иначе
			ИмяФормыОбъекта = "ФормаОбъекта";
			
		КонецЕсли;
		
	Иначе
		ИмяФормыОбъекта = ОсновнаяФорма.Имя;
	КонецЕсли;
	
	ИмяМодуляФормыОбъекта = СтрЗаменить(ИмяМодуляФормыОбъекта, "[ПолноеИмяОбъектаМетаданных]", ПолноеИмяОМ);
	ИмяМодуляФормыОбъекта = СтрЗаменить(ИмяМодуляФормыОбъекта, "[ИмяФормыОбъекта]",   ИмяФормыОбъекта);
	
	Возврат ИмяМодуляФормыОбъекта;
	
КонецФункции

// Проверка того, что тип имеет ссылочный тип данных.
//
Функция ЭтоСсылка(Тип)
	
	Возврат Справочники.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ Документы.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ Перечисления.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ ПланыСчетов.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ БизнесПроцессы.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ БизнесПроцессы.ТипВсеСсылкиТочекМаршрутаБизнесПроцессов().СодержитТип(Тип)
		ИЛИ Задачи.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ ПланыОбмена.ТипВсеСсылки().СодержитТип(Тип);
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Вспомогательные процедуры и функции.

Функция СообщитьПользователю(ТекстСообщения)
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ТекстСообщения;
	Сообщение.Сообщить();
КонецФункции

Функция ПодсистемаВнедрена(Знач ИмяПодсистемы)
	Возврат Метаданные.НайтиПоПолномуИмени("Подсистема.СтандартныеПодсистемы.Подсистема." + ИмяПодсистемы) <> Неопределено;	
КонецФункции

// Возвращает Истина, если обработка запущена как внутренняя (как правило, для отладки).
//
//  Возвращаемое значение:
//    Булево - Истина, если обработка запускается как внутренняя (как правило, для отладки).
//             Ложь, если запущена как внешняя (как правило, ответственным за внедрение БСП).
//
Функция РежимОтладкиПомощника()
	
	Возврат Метаданные.Обработки.Содержит(ЭтотОбъект.Метаданные());
	
КонецФункции

// Процедура выполняет вычитание Массива 1 из Массива 2.
// Результат работы процедуры передается в параметры МассивРезультат1, МассивРезультат2, МассивРезультат12.
//
// Параметры:
//  Массив1 - Массив - массив элементов, который используется в операторе вычитания массивов;
//  Массив2 - Массив - массив элементов, который используется в операторе вычитания массивов;
//  МассивРезультат1 (необязательный) - Массив - содержит элементы массива 1, которых нет в массиве 2;
//  МассивРезультат2 (необязательный) - Массив - содержит элементы массива 2, которых нет в массиве 1;
//  МассивРезультат12 (необязательный)  - Массив - содержит элементы, которые есть в массиве 1 и массиве 2;
//
Процедура ВычислитьПересечениеМассивов(Массив1, Массив2, МассивРезультат1 = Неопределено, МассивРезультат2 = Неопределено, МассивРезультат12 = Неопределено)
	
	МассивРезультат1  = ?(МассивРезультат1  = Неопределено, Новый Массив, МассивРезультат1);
	МассивРезультат2  = ?(МассивРезультат2  = Неопределено, Новый Массив, МассивРезультат2);
	МассивРезультат12 = ?(МассивРезультат12 = Неопределено, Новый Массив, МассивРезультат12);
	
	Для Каждого Значение Из Массив1 Цикл
		
		Если Массив2.Найти(Значение) = Неопределено Тогда
			
			Если МассивРезультат1.Найти(Значение) = Неопределено Тогда
				
				МассивРезультат1.Добавить(Значение);
				
			КонецЕсли;
			
		Иначе
			
			Если МассивРезультат12.Найти(Значение) = Неопределено Тогда
				
				МассивРезультат12.Добавить(Значение);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Значение Из Массив2 Цикл
		
		Если Массив1.Найти(Значение) = Неопределено Тогда
			
			Если МассивРезультат2.Найти(Значение) = Неопределено Тогда
				
				МассивРезультат2.Добавить(Значение);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Вставить в массив Приемник все элементы массива Источник.
// Если КонтрольУникальности = Истина, то элементы уже существующие в Приемник
// повторно не добавляются.
//
Процедура ДополнитьМассив(Приемник, Источник, КонтрольУникальности = Ложь)
	
	Для каждого ЭлементМассива Из Источник Цикл
		Если КонтрольУникальности И Приемник.Найти(ЭлементМассива) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Приемник.Добавить(ЭлементМассива);
	КонецЦикла;
	
КонецПроцедуры

// Удаляет все вхождения переданного значения из массива.
//
// Параметры:
//  Массив - массив, из которого необходимо удалить значение;
//  Значение - удаляемое значение из массива.
// 
Процедура УдалитьВсеВхожденияЗначенияИзМассива(Массив, Значение)
	
	КоличествоЭлементовКоллекции = Массив.Количество();
	
	Для ОбратныйИндекс = 1 По КоличествоЭлементовКоллекции Цикл
		
		Индекс = КоличествоЭлементовКоллекции - ОбратныйИндекс;
		
		Если Массив[Индекс] = Значение Тогда
			
			Массив.Удалить(Индекс);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Преобразует массив типов МассивТипов в строку имен, разделенных запятыми.
// Элементы массива МассивТипов могут быть как типа ОписаниеТипа, так и ОбъектМетаданных.
//
Функция МассивТиповВСтроку(МассивТипов)
	
	Результат = "";
	Для Каждого ОбъектМетаданныхИлиТип Из МассивТипов Цикл
		Если ТипЗнч(ОбъектМетаданныхИлиТип) = Тип("ОбъектМетаданных") Тогда
			ТекущийОбъект = ОбъектМетаданныхИлиТип;
		Иначе
			ТекущийОбъект = Метаданные.НайтиПоТипу(ОбъектМетаданныхИлиТип);
		КонецЕсли;
		Если ТекущийОбъект <> Неопределено Тогда
			Результат = ?(ПустаяСтрока(Результат), 
				ТекущийОбъект.ПолноеИмя(), Результат + "," + ТекущийОбъект.ПолноеИмя());
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

// Выполняет копирование массива. Возвращает новый экземпляр массива.
//
// Параметры:
//  Массив - массив, который необходимо скопировать.
//
// Возвращаемое значение:
//   Массив - Новый экземпляр массива.
//
Функция СкопироватьМассив(Массив)
	
	Результат = Новый Массив;
	
	Для Каждого Элемент Из Массив Цикл
		
		Результат.Добавить(Элемент);
		
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

// Добавить в отчет по дополнительным параметрам внедрения запись с напоминанием 
// по поводу необходимости ручной проверки по поводу указанного параметра ИмяПараметра.
// Ручные проверки требуется задавать в тех случаях, когда автоматическую проверку
// невозможно реализовать технически.
//
// Параметры:
//   Таблица - ТаблицаЗначений - список строк, в который добавляется данная запись.
//                               См. НоваяТаблицаПроверки()
//   ИмяПараметра - Строка     - имя объекта метаданных, реквизита или свойства,
//                               по поводу которого должна быть добавлена запись.
//   ТипПараметра - Строка     - одно из трех значений:
//     * ТипРеквизита - означает, что в параметре ИмяПараметра указано имя реквизита,
//         по поводу которого нужно вывести напоминание вида:
//         "Необходимо, чтобы в реквизите [ИмяРеквизита] были указаны типы: [СписокТипов]".
//     * РазмещениеОбъектаВКИ - означает, что в параметре ИмяПараметра указано имя объекта
//         (объекта метаданных или команды), по поводу которого нужно вывести напоминание вида:
//         "Необходимо, чтобы объект [ИмяОбъекта] был размещен в разделах командного интерфейса: [СписокРазделов]".
//     * Произвольная - в параметре ИмяПараметра содержится произвольная текстовая строка для 
//         вывода в отчет.
//   Подсистема   - Строка     - представление подсистемы БСП (для группировки в отчете).
//
// Примеры:
//   ДобавитьНеПроверяемуюСтроку(СписокНеПроверяемых, 
//     НСтр("ru = 'Разместите в форме настроек программы поле для редактирования константы
//     ИспользоватьБиблиотекуФайлов.'"),
//     "Произвольная", "Веб-сервисы работы с файлами");
//   ДобавитьНеПроверяемуюСтроку(СписокНеПроверяемых, "ОбщиеФормы.АдреснаяКнига.КонтактыПоПредмету.Ссылка", 
//     "ТипРеквизита", "Взаимодействия");
//   ДобавитьНеПроверяемуюСтроку(СписокНеПроверяемых, "Задача.ЗадачаИсполнителя.Команда.МоиЗадачи", 
//     "РазмещениеОбъектаВКИ", "Бизнес-процессы и задачи");
//  
Процедура ДобавитьНеПроверяемуюСтроку(Таблица, ИмяПараметра, ТипПараметра, Подсистема)
	
	Если Таблица.Колонки.Найти("Подсистема") = Неопределено Тогда
		Таблица.Колонки.Добавить("Подсистема");
	КонецЕсли;
	
	НоваяСтрока = Таблица.Добавить();
	НоваяСтрока.РеквизитПроверки = ТипПараметра;
	НоваяСтрока.ПроверенныеДанные = ИмяПараметра;
	НоваяСтрока.Подсистема = Подсистема;
	
КонецПроцедуры

// Формирует заголовок для элемента "НеТребуетсяРазмещатьВКомандномИнтерфейсе" 
// формы "ВводДополнительныхПараметровВнедрения".
//
// Возвращаемое значение:
//	Строка - заголовок элемента.
//
Функция СформироватьЗаголовокДляНеИспользоватьВКИ()
	
	Возврат НСтр("ru = 'Не требуется размещать в командном интерфейсе'");
	
КонецФункции	

// Формирует заголовок для элемента "РазмещатьНаРабочемСтоле" 
// формы "ВводДополнительныхПараметровВнедрения".
//
// Возвращаемое значение:
//	Строка - заголовок элемента.
//
Функция СформироватьЗаголовокДляРазмещатьНаРабочемСтоле()
	
	Возврат НСтр("ru = 'Размещать на рабочем столе'");
	
КонецФункции	

Функция ИмяФормыОбработки(ИмяТекущейФормы, ИмяОткрываемойФормы) Экспорт
	
	МассивФормы = РазложитьСтрокуВМассивПодстрок(ИмяТекущейФормы, ".");
	МассивФормы[МассивФормы.Количество()-1] = ИмяОткрываемойФормы;
	Возврат МассивВСтроку(МассивФормы, ".");
	
КонецФункции

// Подставляет параметры в строку. Максимально возможное число параметров - 9.
// Параметры в строке задаются как %<номер параметра>. Нумерация параметров начинается с единицы.
//
// Параметры:
//  СтрокаПодстановки  - Строка - шаблон строки с параметрами (вхождениями вида "%ИмяПараметра");
//  Параметр<n>        - Строка - подставляемый параметр.
//
// Возвращаемое значение:
//  Строка   - текстовая строка с подставленными параметрами.
//
// Пример:
//  ПодставитьПараметрыВСтроку(НСтр("ru='%1 пошел в %2'"), "Вася", "Зоопарк") = "Вася пошел в Зоопарк".
//
Функция ПодставитьПараметрыВСтроку(Знач СтрокаПодстановки,
	Знач Параметр1,	Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
	Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
	Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено) Экспорт
	
	Если СтрокаПодстановки = Неопределено ИЛИ СтрДлина(СтрокаПодстановки) = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	Результат = "";
	НачПозиция = 1;
	Позиция = 1;
	Пока Позиция <= СтрДлина(СтрокаПодстановки) Цикл
		СимволСтроки = Сред(СтрокаПодстановки, Позиция, 1);
		Если СимволСтроки <> "%" Тогда
			Позиция = Позиция + 1;
			Продолжить;
		КонецЕсли;
		Результат = Результат + Сред(СтрокаПодстановки, НачПозиция, Позиция - НачПозиция);
		Позиция = Позиция + 1;
		СимволСтроки = Сред(СтрокаПодстановки, Позиция, 1);
		
		Если СимволСтроки = "%" Тогда
			Позиция = Позиция + 1;
			НачПозиция = Позиция;
			Продолжить;
		КонецЕсли;
		
		Попытка
			НомерПараметра = Число(СимволСтроки);
		Исключение
			ВызватьИсключение НСтр("ru='Входная строка СтрокаПодстановки имеет неверный формат: %'" + СимволСтроки);
		КонецПопытки;
		
		Если СимволСтроки = "1" Тогда
			ЗначениеПараметра = Параметр1;
		ИначеЕсли СимволСтроки = "2" Тогда
			ЗначениеПараметра = Параметр2;
		ИначеЕсли СимволСтроки = "3" Тогда
			ЗначениеПараметра = Параметр3;
		ИначеЕсли СимволСтроки = "4" Тогда
			ЗначениеПараметра = Параметр4;
		ИначеЕсли СимволСтроки = "5" Тогда
			ЗначениеПараметра = Параметр5;
		ИначеЕсли СимволСтроки = "6" Тогда
			ЗначениеПараметра = Параметр6;
		ИначеЕсли СимволСтроки = "7" Тогда
			ЗначениеПараметра = Параметр7;
		ИначеЕсли СимволСтроки = "8" Тогда
			ЗначениеПараметра = Параметр8;
		ИначеЕсли СимволСтроки = "9" Тогда
			ЗначениеПараметра = Параметр9;
		Иначе
			ВызватьИсключение НСтр("ru='Входная строка СтрокаПодстановки имеет неверный формат: %'" + ЗначениеПараметра);
		КонецЕсли;
		Если ЗначениеПараметра = Неопределено Тогда
			ЗначениеПараметра = "";
		Иначе
			ЗначениеПараметра = Строка(ЗначениеПараметра);
		КонецЕсли;
		Результат = Результат + ЗначениеПараметра;
		Позиция = Позиция + 1;
		НачПозиция = Позиция;
	
	КонецЦикла;
	
	Если (НачПозиция <= СтрДлина(СтрокаПодстановки)) Тогда
		Результат = Результат + Сред(СтрокаПодстановки, НачПозиция, СтрДлина(СтрокаПодстановки) - НачПозиция + 1);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// СРасщепляет" строку на подстроки, используя заданный
//  разделитель. Разделитель может иметь любую длину.
//  Если в качестве разделителя задан пробел, рядом стоящие пробелы
//  считаются одним разделителем, а ведущие и хвостовые пробелы параметра Стр
//  игнорируются.
//
//  Параметры:
//      Стр -           строка, которую необходимо разложить на подстроки.
//                      Параметр передается по значению.
//      Разделитель -   строка-разделитель, по умолчанию - запятая.
//
//  Возвращаемое значение:
//      массив значений, элементы которого - подстроки.
//
Функция РазложитьСтрокуВМассивПодстрок(Знач Стр, Разделитель = ",") Экспорт
	
	МассивСтрок = Новый Массив();
	Если Разделитель = " " Тогда
		Стр = СокрЛП(Стр);
		Пока 1 = 1 Цикл
			Поз = СтрНайти(Стр, Разделитель);
			Если Поз = 0 Тогда
				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр, Поз - 1));
			Стр = СокрЛ(Сред(Стр, Поз));
		КонецЦикла;
	Иначе
		ДлинаРазделителя = СтрДлина(Разделитель);
		Пока 1 = 1 Цикл
			Поз = СтрНайти(Стр, Разделитель);
			Если Поз = 0 Тогда
				Если (СокрЛП(Стр) <> "") Тогда
					МассивСтрок.Добавить(Стр);
				КонецЕсли;
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр,Поз - 1));
			Стр = Сред(Стр, Поз + ДлинаРазделителя);
		КонецЦикла;
	КонецЕсли;
	
КонецФункции

///  Объединяет строки из массива в строку с разделителями.
//
// Параметры:
//  Массив      - Массив - массив строк которые необходимо объединить в одну строку;
//  Разделитель - Строка - любой набор символов, который будет использован в качестве разделителя.
//
// Возвращаемое значение:
//  Строка - строка с разделителями.
// 
Функция СтрокаИзМассиваПодстрок(Массив, Разделитель = ",", СокращатьНепечатаемыеСимволы = Ложь) Экспорт
	
	Результат = "";
	
	Для Индекс = 0 По Массив.ВГраница() Цикл
		Подстрока = Массив[Индекс];
		
		Если СокращатьНепечатаемыеСимволы Тогда
			Подстрока = СокрЛП(Подстрока);
		КонецЕсли;
		
		Если ТипЗнч(Подстрока) <> Тип("Строка") Тогда
			Подстрока = Строка(Подстрока);
		КонецЕсли;
		
		Если Индекс > 0 Тогда
			Результат = Результат + Разделитель;
		КонецЕсли;
		
		Результат = Результат + Подстрока;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Определяет принадлежность объекта метаданных к типу регистр.
//
// Параметры:
//  ОбъектМетаданных - объект метаданных, для которого необходимо определить принадлежность к заданному типу.
//
// Возвращаемое значение:
//  Истина - объект метаданных принадлежит заданному типу, иначе Ложь.
//
Функция ЭтоРегистр(ОбъектМетаданных) Экспорт
	
	Возврат Метаданные.РегистрыБухгалтерии.Содержит(ОбъектМетаданных)
		Или Метаданные.РегистрыНакопления.Содержит(ОбъектМетаданных)
		Или Метаданные.РегистрыРасчета.Содержит(ОбъектМетаданных)
		Или Метаданные.РегистрыСведений.Содержит(ОбъектМетаданных);
		
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Работа с подписками на события.

Процедура ПолучитьСоставПодпискиПоИмениОбработчика(Состав, ИмяОбработчика)
	
	Подписки = ПолучитьПодпискиНаСобытияПоИмениОбработчика(ИмяОбработчика);
	
	Для Каждого ИмяПодпискиНаСобытие Из Подписки Цикл
		
		МассивФакт = Неопределено;
		ПроверитьТипы(МассивФакт, СтрЗаменить("ПодпискиНаСобытия.[ИмяПодписки].Источник", "[ИмяПодписки]", ИмяПодпискиНаСобытие));
		
		Если МассивФакт.Количество() > 0 Тогда
			
			СоставПодписки = РазложитьСтрокуВМассивПодстрок(МассивФакт[0]["ПроверенныеДанные"]);
			ДополнитьМассив(Состав, СоставПодписки, Истина);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьСоставТиповПодписокНаСобытия(ТаблицаПроверки, СтрокаВПодписке)
	
	Подписки = Новый Массив;
	НайтиОбъектыМетаданныхОбработкуПоВхождениюСтроки(Подписки, СтрокаВПодписке);
	
	ПроверенныеДанные = "";
	Для Каждого ОМПодписка Из Подписки Цикл
		Для Каждого ТипВладельца Из ОМПодписка.Источник.Типы() Цикл
			ПолноеИмя = Метаданные.НайтиПоТипу(ТипВладельца).ПолноеИмя();
			ПроверенныеДанные = ПроверенныеДанные + ПолноеИмя + ",";
		КонецЦикла;
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(ПроверенныеДанные) Тогда
		ПроверенныеДанные = Лев(ПроверенныеДанные, СтрДлина(ПроверенныеДанные)-1);
	КонецЕсли;
	
	РезультатПроверки = ТаблицаПроверки.Добавить();
	РезультатПроверки.РеквизитПроверки = 
			СтрЗаменить(
					НСтр("ru = 'Проверка владельца в источнике подписки(ок) %1'"),"%1", 
					СтрокаВПодписке);
	
	РезультатПроверки.ПроверенныеДанные = ПроверенныеДанные;
	
КонецПроцедуры

Процедура ПроверитьСоставТиповГруппыПодписокНаСобытия(ТаблицаПроверки, ИменаПодписок)
	
	ПроверенныеДанные = "";
	ИменаПодписок = СтрРазделить(ИменаПодписок, ",");
	
	Для Каждого ИмяПодписки Из ИменаПодписок Цикл
		Подписки = Новый Массив;
		НайтиОбъектыМетаданныхОбработкуПоВхождениюСтроки(Подписки, ИмяПодписки);
		Для Каждого ОМПодписка Из Подписки Цикл
			Для Каждого ТипВладельца Из ОМПодписка.Источник.Типы() Цикл
				ПолноеИмя = Метаданные.НайтиПоТипу(ТипВладельца).ПолноеИмя();
				ПроверенныеДанные = ПроверенныеДанные + ПолноеИмя + ",";
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	РезультатПроверки = ТаблицаПроверки.Добавить();
	РезультатПроверки.РеквизитПроверки = 
			СтрЗаменить(
					НСтр("ru = 'Проверка владельца в источнике подписки(ок) %1'"),"%1", 
					СтрСоединить(ИменаПодписок,", "));
	
	Если НЕ ПустаяСтрока(ПроверенныеДанные) Тогда
		ПроверенныеДанные = Лев(ПроверенныеДанные, СтрДлина(ПроверенныеДанные)-1);
	КонецЕсли;
	
	РезультатПроверки.ПроверенныеДанные = ПроверенныеДанные;
	
КонецПроцедуры

// Получает подписки на события с заданным именем обработчика события.
//
// Параметры:
//  ИмяОбработчика - Строка - имя процедуры-обработчика события подписки.
//                   Например: "ПрефиксацияОбъектовСобытия.УстановитьПрефиксИнформационнойБазы".
//
// Возвращаемое значение:
//  Массив - Массив с именами подписок на события, которые имеют заданный обработчик события.
//
Функция ПолучитьПодпискиНаСобытияПоИмениОбработчика(ИмяОбработчика)
	
	Результат = Новый Массив;
	
	ВРегИмяОбработчика = ВРег(ИмяОбработчика);
	
	Для Каждого ОбъектМетаданных Из Метаданные.ПодпискиНаСобытия Цикл
		
		Если ВРег(ОбъектМетаданных.Обработчик) = ВРегИмяОбработчика Тогда
			
			Результат.Добавить(ОбъектМетаданных.Имя);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

// Возвращает объект метаданных "подписка на событие" по указанному части имени объекта метаданных.
//
// Параметры:
//  ИмяПодписки - Строка - имя или часть имени подписки на событие, объект метаданных которой требуется получить.
// 
//  Возвращаемое значение:
//   Неопределено - если объект метаданных подписки на событие не найден;
//   ОбъектМетаданных: ПодпискаНаСобытие - если подписка на событие найдена.
//
Функция ОпределитьПодпискуНаСобытиеПоИмени(ИмяПодписки)
	
	Для Каждого Объект Из Метаданные.ПодпискиНаСобытия Цикл
		
		Если СтрНайти(Объект.Имя, ИмяПодписки) > 0 Тогда
			
			Возврат Объект;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Служебные процедуры и функции.
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Функции формирования отчетов.

// Функция разделяет имя дополнительного вопроса на структуру параметров.
//
// Параметры: ИмяВопроса - строка, имя исследуемого дополнительного вопроса.
//
// Возвращаемое значение: Структура с полями.
//	ИмяВопросаРодителя - строка, имя родительского вопроса,
//  ИмяДополнительногоВопроса - строка, имя доп.вопроса, как он задан в электронном вопроснике.
//  ОбъектДопВопроса - строка, представление объекта из ответов на главный вопрос, по которому проверяется данный доп.
//                     вопрос.
//
Функция ПолучитьСтруктуруДопВопроса(ИмяВопроса) Экспорт
	СтруктураДопВопроса = Новый Структура;
	ПозКвадратнойСкобки = СтрНайти(ИмяВопроса, "[");
	СтруктураДопВопроса.Вставить("ИмяВопросаРодителя", Лев(ИмяВопроса, ПозКвадратнойСкобки -1));
	ПозЗакрывающейКвадратнойСкобки = СтрНайти(ИмяВопроса, "]");
	СтруктураДопВопроса.Вставить("ИмяДополнительногоВопроса", Сред(ИмяВопроса, ПозКвадратнойСкобки + 1, ПозЗакрывающейКвадратнойСкобки - ПозКвадратнойСкобки - 1));
	ПозЗакрывающейКруглойСкобки = СтрНайти(ИмяВопроса, ")");
	СтруктураДопВопроса.Вставить("ОбъектДопВопроса", Сред(ИмяВопроса, ПозЗакрывающейКвадратнойСкобки + 2, ПозЗакрывающейКруглойСкобки - ПозЗакрывающейКвадратнойСкобки -2));
	Возврат СтруктураДопВопроса;
КонецФункции

Функция ЭтоДопВопрос(ИмяВопроса)
	Если СтрНайти(ИмяВопроса, "[")Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

Функция ПолучитьСтруктуруОтветовНаВопрос(НомерВопроса)
	
	ЧтениеХМЛ = Новый ЧтениеXML;
	ЧтениеХМЛ.ОткрытьФайл(ПутьКФайлу);
	
	Если ЭтоДопВопрос(НомерВопроса) Тогда
		Текст = Новый ТекстовыйДокумент;
		Текст.Прочитать(ПутьКФайлу);

		ИмяВопроса= ПолучитьСтруктуруДопВопроса(НомерВопроса).ИмяДополнительногоВопроса;
		ИмяОбъекта = ПолучитьСтруктуруДопВопроса(НомерВопроса).ОбъектДопВопроса;
	Иначе
		ИмяВопроса = НомерВопроса;
	КонецЕсли;

	НашлиВопрос = Ложь;
	НашлиПодчиненныйВопрос = Ложь;
	Пока ЧтениеХМЛ.Прочитать() Цикл
		Если ЧтениеХмл.ПолучитьАтрибут("НомерПП") = ИмяВопроса Тогда
			НашлиВопрос = Истина;
		КонецЕсли;
		
		Если ЧтениеХМЛ.ЛокальноеИмя = "НомерПППодчиненный" И ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			ЧтениеХМЛ.Прочитать();
			Если ЧтениеХМЛ.Значение = ИмяВопроса Тогда
				НашлиПодчиненныйВопрос = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если НашлиПодчиненныйВопрос  И ЧтениеХМЛ.ЛокальноеИмя = "ОбъектОтвета" И ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			ЧтениеХМЛ.Прочитать();
			Если ЧтениеХМЛ.Значение = ИмяОбъекта Тогда
				НашлиВопрос = Истина;
			Иначе
				НашлиПодчиненныйВопрос = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Если Не НашлиВопрос Тогда 
			Продолжить;
		КонецЕсли;
		
		Если ЧтениеХМЛ.ЛокальноеИмя = "Ответ" И ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			ЧтениеХМЛ.Прочитать();
			Возврат ЧтениеХМЛ.Значение;
		КонецЕсли;
	КонецЦикла;
КонецФункции

Функция НайтиНомерДопВопроса(ТекстВопроса)
	ПозНачалаНомера = СтрНайти(ТекстВопроса, "[");
	ПозОкончанияНомера = СтрНайти(ТекстВопроса, "]");
	Возврат Сред(ТекстВопроса, ПозНачалаНомера + 1, ПозОкончанияНомера - ПозНачалаНомера - 1);
КонецФункции

Функция ПолучитьИмяПодчиненногоВопроса(ЧтениеХМЛ) 
	Если ЧтениеХМЛ.ЛокальноеИмя = "НомерПППодчиненный" И ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
		ЧтениеХМЛ.Прочитать();
		Возврат ЧтениеХМЛ.Значение;
	КонецЕсли;
	Возврат Неопределено;
КонецФункции

Функция ПолучитьПроцедуруПроверкиИзМакета(НомерПП)
	ДопВопрос = Ложь;
	// доп. вопрос
	Если СтрНайти(НомерПП, "[") > 0 И СтрНайти(НомерПП, "(") > 0 Тогда
		НомерВопроса = НайтиНомерДопВопроса(НомерПП);
		ДопВопрос = Истина;
	Иначе
		НомерВопроса = НомерПП;
	КонецЕсли;
	
	ЧтениеХМЛ = Новый ЧтениеXML;
	Макет = ПолучитьМакет("ЭлектронныйВопросник");
	ВременныйФайл = КаталогВременныхФайлов() + "Вопросник.xml";
	Макет.Записать(ВременныйФайл);
	ПередаватьВПроверку = Ложь;
	СтруктураВозврата = Новый Структура;
	
	ЧтениеХМЛ = Новый ЧтениеXML;
	ЧтениеХМЛ.ОткрытьФайл(ВременныйФайл);
	НашлиВопрос = Ложь;
	Пока ЧтениеХМЛ.Прочитать() Цикл
		Если ЧтениеХМЛ.ПолучитьАтрибут("НомерПП") = НомерВопроса Тогда
			НашлиВопрос = Истина;
			СтруктураВозврата.Вставить("ДополнительныйВопрос", Ложь);
		КонецЕсли;
			
		Если ПолучитьИмяПодчиненногоВопроса(ЧтениеХМЛ) = НомерВопроса Тогда
			НашлиВопрос = Истина;
			СтруктураВозврата.Вставить("ДополнительныйВопрос", Истина);
		КонецЕсли;
		
		Если Не НашлиВопрос Тогда
			Продолжить;
		КонецЕсли;
	
		Если ЧтениеХМЛ.ЛокальноеИмя = "Проверка" И ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			
			
			ЧтениеХМЛ.Прочитать();
			СтруктураВозврата.Вставить("ПроцедураПроверки", ЧтениеХМЛ.Значение);
			
			Возврат СтруктураВозврата;
		КонецЕсли;
	КонецЦикла;
КонецФункции

// Запуск проверки внедрения.
//
// Параметры:
//   СписокПодсистем - список значений, подсистемы, подлежащие проверке.
//   Путь - Строка, путь к файлу с ответами.
//
Функция ПроверитьВнедрение(СписокПодсистем, Путь) Экспорт
	ТекстовыеВопросы = Новый ТаблицаЗначений;
	ТекстовыеВопросы.Колонки.Добавить("ТекстВопроса");
	ТекстовыеВопросы.Колонки.Добавить("Подсистема");
	ТекстовыеВопросы.Колонки.Добавить("ПредставлениеПодсистемы");
	Если СводкаОтчета = Неопределено Тогда
		СводкаОтчета = Новый ТабличныйДокумент;
	КонецЕсли;
	
	Если ПутьКФайлу = Неопределено Тогда
		ПутьКФайлу = Путь;
	КонецЕсли;
	
	Если СоответствиеВопросовНомерамКолонок = Неопределено Тогда
		СоответствиеВопросовНомерамКолонок = Новый ТаблицаЗначений;
		СоответствиеВопросовНомерамКолонок.Колонки.Добавить("ТекстВопроса");
		СоответствиеВопросовНомерамКолонок.Колонки.Добавить("Подсистема");
		СоответствиеВопросовНомерамКолонок.Колонки.Добавить("ПредставлениеПодсистемы");
		ЗаписатьСтруктуруВопросовОтветов(СписокПодсистем);
	КонецЕсли;
	
	ТекстовыйОтчет.Очистить();
	ТекстовыйОтчет.Колонки.Добавить("Подсистема");
	ТекстовыйОтчет.Колонки.Добавить("ОписаниеОшибки");
	
	ТаблицаИзлишних = Новый ТаблицаЗначений;
	ТаблицаИзлишних.Колонки.Добавить("НомерВопроса");
	ТаблицаИзлишних.Колонки.Добавить("Объект");
	ТаблицаИзлишних.Колонки.Добавить("Реквизиты");
	ТаблицаИзлишних.Колонки.Добавить("Подсистема");
	ТаблицаИзлишних.Колонки.Добавить("ПредставлениеПодсистемы");
	
	ТаблицыВнедрения = Новый Структура;
	ТаблицыВнедрения.Вставить("ТаблицаИзлишних", ТаблицаИзлишних);
	ТаблицыВнедрения.Вставить("ТаблицаНедостаточных", ТаблицаИзлишних.Скопировать());
	ТаблицыВнедрения.Вставить("ТаблицаПравильных", ТаблицаИзлишних.Скопировать());
	ТаблицыВнедрения.Вставить("ТаблицаНедовстроенных", ТаблицаИзлишних.Скопировать());
	ТаблицыВнедрения.Вставить("ТаблицаПеревстроенных", ТаблицаИзлишних.Скопировать());
	ТаблицыВнедрения.Вставить("ТаблицаПроизвольныхОшибок", ТаблицаИзлишних.Скопировать());
	
	// Проверим табличные вопросы
	Для Каждого Вопрос Из СоответствиеВопросовНомерамКолонок Цикл
		СтруктураОтвета = ПолучитьСтруктуруОтветовНаВопрос(Вопрос.ТекстВопроса);
		ПроцедураПроверки = ПолучитьПроцедуруПроверкиИзМакета(Вопрос.ТекстВопроса);
		СтруктураПравильныхОтветов = ВыполнитьПроцедуруПроверки(Вопрос, ПроцедураПроверки, СтруктураОтвета);
		ОбновитьТаблицы(Вопрос, СтруктураПравильныхОтветов, ТаблицыВнедрения);
	КонецЦикла;
	
	// проверим текстовые вопросы
	Для Каждого ТекстовыйВопрос Из ТекстовыеВопросы Цикл
		СтруктураОтвета = ПолучитьСтруктуруОтветовНаВопрос(ТекстовыйВопрос.ТекстВопроса);
		ПроцедураПроверки = ПолучитьПроцедуруПроверкиИзМакета(ТекстовыйВопрос.ТекстВопроса);
		СтруктураПравильныхОтветов = ВыполнитьПроцедуруПроверки(ТекстовыйВопрос, ПроцедураПроверки, СтруктураОтвета);
		ОбновитьТаблицы(ТекстовыйВопрос, СтруктураПравильныхОтветов, ТаблицыВнедрения);
	КонецЦикла;
	
	Возврат ВывестиОтчет(ПутьКФайлу, СписокПодсистем, ТаблицыВнедрения);
	
КонецФункции

Процедура ОбновитьТаблицы(СтруктураВопроса, СтруктураПолученныхОтветов, ТаблицыВнедрения)
	Если ТипЗнч(СтруктураПолученныхОтветов) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьТаблицу(ТаблицыВнедрения.ТаблицаИзлишних, СтруктураПолученныхОтветов.ИзлишниеОбъекты, СтруктураВопроса);
	ОбновитьТаблицу(ТаблицыВнедрения.ТаблицаНедостаточных, СтруктураПолученныхОтветов.НедостаточныеОбъекты, СтруктураВопроса);
	ОбновитьТаблицу(ТаблицыВнедрения.ТаблицаПравильных, СтруктураПолученныхОтветов.КорректныеОбъекты, СтруктураВопроса);
	ОбновитьТаблицу(ТаблицыВнедрения.ТаблицаНедовстроенных, СтруктураПолученныхОтветов.НедовстроенныеОбъекты, СтруктураВопроса);
	ОбновитьТаблицу(ТаблицыВнедрения.ТаблицаПеревстроенных, СтруктураПолученныхОтветов.ПеревстроенныеОбъекты, СтруктураВопроса);
	
	Если СтруктураПолученныхОтветов.ТекстПроизвольныхОшибок <> Неопределено Тогда
		КоличествоПроизвольныхОшибок = СтруктураПолученныхОтветов.ТекстПроизвольныхОшибок.КоличествоСтрок();
		Если КоличествоПроизвольныхОшибок > 0 Тогда
			ТекущаяОшибка = 1;
			Пока ТекущаяОшибка <= КоличествоПроизвольныхОшибок Цикл
				ПроизвольнаяОшибка = ТаблицыВнедрения.ТаблицаПроизвольныхОшибок.Добавить();
				ПроизвольнаяОшибка.НомерВопроса = СтруктураВопроса.ТекстВопроса;
				ПроизвольнаяОшибка.Объект = "";
				ПроизвольнаяОшибка.Реквизиты = СтруктураПолученныхОтветов.ТекстПроизвольныхОшибок.ПолучитьСтроку(ТекущаяОшибка);
				ПроизвольнаяОшибка.Подсистема = СтруктураВопроса.Подсистема;
				ПроизвольнаяОшибка.ПредставлениеПодсистемы = СтруктураВопроса.ПредставлениеПодсистемы;
				ТекущаяОшибка = ТекущаяОшибка + 1;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ОбновитьТаблицу(Таблица, МассивОтветов, СтруктураВопроса)
	
	Для Каждого Ответ Из МассивОтветов Цикл
		СтрокаТаблицы = Таблица.Добавить();
		СтрокаТаблицы.НомерВопроса = СтруктураВопроса.ТекстВопроса;
		СтрокаТаблицы.Объект = Ответ.Объект;
		СтрокаТаблицы.Реквизиты = Ответ.Реквизиты;
		СтрокаТаблицы.Подсистема = СтруктураВопроса.Подсистема;
		СтрокаТаблицы.ПредставлениеПодсистемы = СтруктураВопроса.ПредставлениеПодсистемы;
	КонецЦикла;
	Таблица.Свернуть("НомерВопроса, Объект, Реквизиты, Подсистема, ПредставлениеПодсистемы");
	
КонецПроцедуры

Функция ПолучитьПредставлениеИзМакета(ИмяВопроса)
	Макет = ПолучитьМакет("ЭлектронныйВопросник");
	КоличествоСтрок = Макет.КоличествоСтрок();
	ТекущаяСтрока = 1;
	НашлиВопрос = Ложь;
	Пока ТекущаяСтрока < КоличествоСтрок Цикл
		ТекстСтроки = Макет.ПолучитьСтроку(ТекущаяСтрока);
		Если СтрНайти(ТекстСтроки, ИмяВопроса)> 0  Тогда
			НашлиВопрос = Истина;
		КонецЕсли;
		
		Если Не НашлиВопрос Тогда
			ТекущаяСтрока = ТекущаяСтрока + 1;
			Продолжить;
		КонецЕсли;
		
		Если СтрНайти(ТекстСтроки,"<ПредставлениеВТаблице>") >  0 Тогда
			СтрокаВозврата = СтрЗаменить(ТекстСтроки, "<ПредставлениеВТаблице>", "");
			СтрокаВозврата = СтрЗаменить(СтрокаВозврата, "</ПредставлениеВТаблице>", "");
			Возврат СтрокаВозврата;
		КонецЕсли;
		ТекущаяСтрока = ТекущаяСтрока + 1;
	КонецЦикла;	
	Возврат "";
КонецФункции

// Выводит отчет в таблицу.
//
// Параметры:
//   Путь : строка, путь к файлу с ответами.
//   ВыводимыеПодсистемы: список значений, список проверенных подсистем.
//   ТаблицаИзлишних : таблица значений, определяет излишне внедренные в подсистемы объекты.
//   ТаблицаНедостаточных : таблица значений, определяет недостаточно внедренные в подсистемы объекты.
//   ТаблицаПравильных : таблица значений, определяет корректно внедренные в подсистемы объекты.
//   ТаблицаНедовстроенных : таблица значений, определяет неполностью внедренные в подсистемы объекты.
//   ТаблицаПереВстроенных : таблица значений, определяет сверх внедренные в подсистемы объекты.
//   ТекстПроизвольныхОшибок : текстовый документ, описание произвольных ошибок.
//   ВывестиТекущееСостояниеВнедрения : Булево, признак "зачитки" из конфигурации.
//
// Возвращаемое значение: 
//   Структура, состоящая из полей: 
//    ТаблицаОтчета - табличный документ, результат вывода ошибок.
//    СтруктураОписанияОшибок - структура с описанием ошибок таблицы. Поля : 
//         Адрес - Строка, адрес ячейки в таблице, к которой идет описание.
//         ОписаниеОшибки - строка, описание ошибки в данной ячейке.
//
Функция ВывестиОтчет(Путь, ВыводимыеПодсистемы, ТаблицыВнедрения)
	
	Если ПутьКФайлу = Неопределено Тогда
		ПутьКФайлу = Путь;
	КонецЕсли;
	
	Если СоответствиеВопросовНомерамКолонок = Неопределено Тогда
		СоответствиеВопросовНомерамКолонок = Новый ТаблицаЗначений;
		СоответствиеВопросовНомерамКолонок.Колонки.Добавить("ТекстВопроса");
		СоответствиеВопросовНомерамКолонок.Колонки.Добавить("Подсистема");
		СоответствиеВопросовНомерамКолонок.Колонки.Добавить("ПредставлениеПодсистемы");
		ЗаписатьСтруктуруВопросовОтветов(ВыводимыеПодсистемы);
	КонецЕсли;
	
	// Выведем в макет следующие элементы : структуру метаданных конфигурации и внедренные подсистемы.
	ТаблицаОтчета = Новый ТабличныйДокумент;
	Макет = СформироватьМакет();
	СписокМетаданных = ПолучитьСписокВозможныхТиповМетаданныхДляВнедрения();
	
	// Выведем шапку отчета
	// Выведем свойства подсистем
	
	Область = Макет.ПолучитьОбласть("ШапкаТаблицы|Наименование");
	ТаблицаОтчета.Вывести(Область);

	Для Каждого ВыводимыйВопрос Из 	СоответствиеВопросовНомерамКолонок Цикл
		ИмяОбласти = ВыводимыйВопрос.ТекстВопроса;
		
		Если ЭтоДопВопрос(ИмяОбласти) Тогда
			СтруктураВопроса = ПолучитьСтруктуруДопВопроса(ИмяОбласти);
			ПредставлениеДопВопроса = ПолучитьПредставлениеИзМакета(СтруктураВопроса.ИмяДополнительногоВопроса);
			ПараметрВТаблицу = ПредставлениеДопВопроса + НСтр("ru = '. Объект :'") + СтруктураВопроса.ОбъектДопВопроса;
			
			Область = Макет.ПолучитьОбласть("ШапкаТаблицы|ОбластьДопВопросов");
			Область.Параметры.ЗаголовокВопроса = ПараметрВТаблицу;
			ТаблицаОтчета.Присоединить(Область);
		Иначе
			Область = Макет.ПолучитьОбласть("ШапкаТаблицы|"+ИмяОбласти);
			ТаблицаОтчета.Присоединить(Область);
		КонецЕсли;
	КонецЦикла;
	
	// По каждому выбранному типу метаданных.
	
	Для Каждого ИмяТипа Из СписокМетаданных Цикл
		ПараметрВидимости = Истина;
		Если Метаданные[ИмяТипа].Количество() > 0 И ПроверитьВозможностьВнедрения(ИмяТипа, Макет)Тогда
			
			ЗаголовокИмяТипа = "Заголовок" + ИмяТипа + "|";
			ЗаголовокИмяТипаДоп = ЗаголовокИмяТипа + "ОбластьДопВопросов";
			ЭлементИмяТипа = "Элемент" + ИмяТипа + "|";
			ЭлементИмяТипаНаименование = ЭлементИмяТипа + "Наименование";
			ЭлементИмяТипаДоп = ЭлементИмяТипа + "ОбластьДопВопросов";
			
			// Вывести заголовок в итоговый отчет.
			Область = Макет.ПолучитьОбласть(ЗаголовокИмяТипа + "Наименование");
			ТаблицаОтчета.Вывести(Область);
			Для Каждого ВыводимыйВопрос Из СоответствиеВопросовНомерамКолонок Цикл
				ТаблицаОтчета.НачатьГруппуСтрок();
				ИмяОбласти = ВыводимыйВопрос.ТекстВопроса;
				ПризнакДопВопроса = СтрНайти(ИмяОбласти, "[");
				Если ПризнакДопВопроса Тогда
					Область = Макет.ПолучитьОбласть(ЗаголовокИмяТипаДоп);
					ТаблицаОтчета.Присоединить(Область);
				Иначе
					Область = Макет.ПолучитьОбласть(ЗаголовокИмяТипа + ИмяОбласти);
					ТаблицаОтчета.Присоединить(Область);
				КонецЕсли;
			КонецЦикла;
			
			// Теперь для каждого объекта данного типа, обнаруженного в конфигурации.
			
			Для Каждого ОбъектМетаданных Из Метаданные[ИмяТипа] Цикл
				
				Область = Макет.ПолучитьОбласть(ЭлементИмяТипаНаименование);
				Область.Параметры.ИмяЭлемента = ОбъектМетаданных.Имя;
				Область.Параметры.ПолноеИмяОбъекта = ОбъектМетаданных.ПолноеИмя();
				ТаблицаОтчета.Вывести(Область);
				
				Для Каждого ВыводимыйВопрос Из СоответствиеВопросовНомерамКолонок Цикл
					
					ИмяОбласти = ВыводимыйВопрос.ТекстВопроса;
					ПризнакДопВопроса = СтрНайти(ИмяОбласти, "[");
					Если ПризнакДопВопроса Тогда
						Область = Макет.ПолучитьОбласть(ЭлементИмяТипаДоп);
						ТаблицаОтчета.Присоединить(Область);
					Иначе
						Область = Макет.ПолучитьОбласть(ЭлементИмяТипа + ИмяОбласти);
						ТаблицаОтчета.Присоединить(Область);
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			ТаблицаОтчета.ЗакончитьГруппуСтрок();
		КонецЕсли;
	КонецЦикла;
	
	// Блок вывода данных проверки.
	
	ОписаниеТекстовыхОшибок = Новый ТаблицаЗначений;
	ОписаниеТекстовыхОшибок.Колонки.Добавить("Подсистема");
	ОписаниеТекстовыхОшибок.Колонки.Добавить("ПредставлениеПодсистемы");
	ОписаниеТекстовыхОшибок.Колонки.Добавить("ОписаниеОшибок");
	
	СтруктураТаблицыОтчета = Новый Соответствие;
	Для ТекущаяСтрока = 1 По ТаблицаОтчета.ВысотаТаблицы Цикл
		СтруктураТаблицыОтчета.Вставить(ТаблицаОтчета.Область(ТекущаяСтрока, 1).Расшифровка, ТекущаяСтрока);
	КонецЦикла;
	
	ВывестиДанныеВТаблицу(ТаблицыВнедрения.ТаблицаПравильных, Истина, Новый Цвет(153, 255, 153), СтруктураТаблицыОтчета);
	
	СтруктураОписанияОшибок = Новый ТаблицаЗначений;
	СтруктураОписанияОшибок.Колонки.Добавить("Адрес");
	СтруктураОписанияОшибок.Колонки.Добавить("ОписаниеОшибки");
	
	ВывестиДанныеВТаблицу(ТаблицыВнедрения.ТаблицаИзлишних, Истина, Новый Цвет(255, 127, 80), СтруктураТаблицыОтчета, "Недостаточные");
	ВывестиДанныеВТаблицу(ТаблицыВнедрения.ТаблицаНедостаточных, Ложь, Новый Цвет(253, 233, 16), СтруктураТаблицыОтчета, "ИзлишнеОтмеченные");
	ВывестиДанныеВТаблицу(ТаблицыВнедрения.ТаблицаПеревстроенных, Ложь, Новый Цвет(255, 127, 80), СтруктураТаблицыОтчета, "Излишние");
	ВывестиДанныеВТаблицу(ТаблицыВнедрения.ТаблицаНедовстроенных, Истина, Новый Цвет(255, 127, 80), СтруктураТаблицыОтчета, "Недостаточные");
	
	// Блок оформления табличного документа отчета.
	
	ТаблицаОтчета.ФиксацияСверху = 3;
	ТаблицаОтчета.ФиксацияСлева = 1;
	ДобавитьДанныеПоПримечаниям();
	
	ВывестиДанныеВТаблицу(ТаблицыВнедрения.ТаблицаПроизвольныхОшибок, Ложь, Неопределено, СтруктураТаблицыОтчета, "", Истина);
	
	ВывестиТекстовыеОшибки();
	
	СтруктураВозврата = Новый Структура("ТаблицаОтчета, СтруктураОписанияОшибок", ТаблицаОтчета, СтруктураОписанияОшибок);
	
	Возврат СтруктураВозврата;
КонецФункции

Процедура ВывестиТекстовыеОшибки()
	Макет = ПолучитьМакет("МакетОтчета");
	ОписаниеТекстовыхОшибок.Сортировать("Подсистема Возр");
	Для Каждого СтрокаТаблицыОшибок Из ОписаниеТекстовыхОшибок Цикл
		
		Если СтрокаТаблицыОшибок.ОписаниеОшибок.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Область = Макет.ПолучитьОбласть("СтрокаПодсистемы");
		
		Область.Параметры.Подсистема = ?(ПустаяСтрока(СтрокаТаблицыОшибок.Подсистема), НСтр("ru = 'Не определено'"), СтрокаТаблицыОшибок.ПредставлениеПодсистемы);
		СводкаОтчета.Вывести(Область);
		
		Для Каждого ВыводимаяОбласть Из СтрокаТаблицыОшибок.ОписаниеОшибок Цикл
			СводкаОтчета.Вывести(ВыводимаяОбласть.Значение);
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Процедура ЗаписатьСтруктуруВопросовОтветов(ВыводимыеПодсистемы)
	СоответствиеВопросовНомерамКолонок.Очистить();
	Если ТекстовыеВопросы = Неопределено Тогда
		ТекстовыеВопросы = Новый ТаблицаЗначений;
		ТекстовыеВопросы.Колонки.Добавить("ТекстВопроса");
		ТекстовыеВопросы.Колонки.Добавить("Подсистема");
		ТекстовыеВопросы.Колонки.Добавить("ПредставлениеПодсистемы");
	КонецЕсли;
	ТекстовыеВопросы.Очистить();
	НомерКолонки = 0;
	Для Каждого ВнедреннаяПодсистема Из ВыводимыеПодсистемы Цикл	
		Если ТипЗнч(ВыводимыеПодсистемы) = Тип("СписокЗначений") Тогда
			НомерКолонки = НомерКолонки + ДобавитьОписаниеВопроса(НомерКолонки, ВнедреннаяПодсистема);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция ЕстьПодчиненныеВопросы(НомерПП)
	Макет = ПолучитьМакет("ЭлектронныйВопросник");
	ИмяВременногоФайла = КаталогВременныхФайлов() + "ЭлектронныйВопросник.xml";	
	Макет.Записать(ИмяВременногоФайла);
	
	ЧтениеХМЛ = Новый ЧтениеXML;
	ЧтениеХМЛ.ОткрытьФайл(ИмяВременногоФайла);
	НашлиВопрос = Ложь;
	
	Пока ЧтениеХМЛ.Прочитать() Цикл
		
		Если ЧтениеХМЛ.ЛокальноеИмя = "Вопрос" И ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента 
			И ЧтениеХМЛ.ПолучитьАтрибут("НомерПП") = НомерПП Тогда
			НашлиВопрос = Истина;
		КонецЕсли;
		
		Если Не НашлиВопрос Тогда
			Продолжить;
		КонецЕсли;
				
		Если ЧтениеХМЛ.ЛокальноеИмя = "Вопрос" И ЧтениеХМЛ.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Если ЧтениеХМЛ.ЛокальноеИмя = "ПодчиненныеВопросы" Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;
КонецФункции

Функция ПолучитьОтветыНаГлавныйВопрос(НомерПП)
	
	МассивОтветов = Новый Массив;
	
	Если ПустаяСтрока(ПутьКФайлу) Тогда
		Возврат МассивОтветов;
	КонецЕсли;
	
	НашлиВопрос = Ложь;
	ЧтениеХМЛ = Новый ЧтениеXML;
	ЧтениеХМЛ.ОткрытьФайл(ПутьКФайлу);
	Пока ЧтениеХМЛ.Прочитать() Цикл
		Если Не НашлиВопрос Тогда
			Если ЧтениеХМЛ.ПолучитьАтрибут("НомерПП") = НомерПП Тогда
				НашлиВопрос = Истина;
			КонецЕсли;
		ИначеЕсли ЧтениеХМЛ.ЛокальноеИмя = ("Ответ") И ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			ЧтениеХМЛ.Прочитать();
			МассивОтветов = РазложитьСтрокуВМассивПодстрок(ЧтениеХМЛ.Значение);
			Возврат МассивОтветов;
		ИначеЕсли ЧтениеХМЛ.ЛокальноеИмя = "Вопрос" И ЧтениеХМЛ.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			Возврат МассивОтветов;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция ОпределитьДополнительныеВопросы(НомерПП)
	
	МассивВозврата = Новый Массив;
	
	Макет = ПолучитьМакет("ЭлектронныйВопросник");
	ИмяВременногоФайла = КаталогВременныхФайлов() + "ЭлектронныйВопросник.xml";
	Макет.Записать(ИмяВременногоФайла);
	
	ЧтениеХМЛ = Новый ЧтениеXML;
	ЧтениеХМЛ.ОткрытьФайл(ИмяВременногоФайла);
	НашлиВопрос = Ложь;
	
	Пока ЧтениеХМЛ.Прочитать() Цикл
		
		Если ЧтениеХМЛ.ЛокальноеИмя = "Вопрос" И ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента 
			И ЧтениеХМЛ.ПолучитьАтрибут("НомерПП") = НомерПП Тогда
			НашлиВопрос = Истина;
		КонецЕсли;
		
		Если Не НашлиВопрос Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЧтениеХМЛ.ЛокальноеИмя = "НомерПППодчиненный" И ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			ЧтениеХМЛ.Прочитать();
			МассивВозврата.Добавить(ЧтениеХМЛ.Значение);
		КонецЕсли;
		
		Если ЧтениеХМЛ.ЛокальноеИмя = "ПодчиненныеВопросы" И ЧтениеХМЛ.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			ЧтениеХМЛ.Закрыть();
			Возврат МассивВозврата;
		КонецЕсли;
		
		Если НашлиВопрос И  ЧтениеХМЛ.ЛокальноеИмя = "Вопрос" И ЧтениеХМЛ.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			НашлиВопрос = Ложь;
		КонецЕсли;

	КонецЦикла;
	ЧтениеХМЛ.Закрыть();
	Возврат МассивВозврата;
КонецФункции

Процедура ВывестиДопВопросы(НомерПП, СтруктураОтветов, Соответствие, Подсистема)
	МассивДопВопросов = ОпределитьДополнительныеВопросы(НомерПП);
	Для Каждого ДопВопрос Из МассивДопВопросов Цикл
		Для Каждого ДопЭлемент Из СтруктураОтветов Цикл
			НовыйНомерПП = НомерПП+ "[" +ДопВопрос + "]" + "(" + ДопЭлемент + ")";
			
			Запись = СоответствиеВопросовНомерамКолонок.Добавить();
			Запись.ТекстВопроса				= НовыйНомерПП;
			Запись.Подсистема				= Подсистема.Значение;
			Запись.ПредставлениеПодсистемы	= Подсистема.Представление;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Функция ДобавитьОписаниеВопроса(НомерНачальнойКолонки, Подсистема)
	
	Текст = ПолучитьМакет("ЭлектронныйВопросник");
	ИмяФайла = КаталогВременныхФайлов() + "ЗаписьВариантов.xml";
	Текст.Записать(ИмяФайла);
	НашлиПодсистему = Ложь;
	ЧтениеХМЛ = Новый ЧтениеXML;
	ЧтениеХМЛ.ОткрытьФайл(ИмяФайла);
	Пока ЧтениеХМЛ.Прочитать() Цикл
		Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеХМЛ.ЛокальноеИмя = "Подсистема"
			И ЧтениеХМЛ.ПолучитьАтрибут("Имя") = Подсистема.Значение Тогда
			НашлиПодсистему = Истина;
		КонецЕсли;
		
		Если НашлиПодсистему И ЧтениеХМЛ.ТипУзла  = ТипУзлаXML.НачалоЭлемента
			И ЧтениеХМЛ.ЛокальноеИмя = "Вопрос" Тогда
			Если СтрНайти(ЧтениеХМЛ.ПолучитьАтрибут("Тип"), "ВыборОбъектов")> 0
				И СтрНайти(ЧтениеХМЛ.ПолучитьАтрибут("Тип"), "Подсистемы") = 0 Тогда
				НомерПП = ЧтениеХМЛ.ПолучитьАтрибут("НомерПП");
				Если СоответствиеВопросовНомерамКолонок.Найти(НомерПП, "ТекстВопроса") <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				Запись = СоответствиеВопросовНомерамКолонок.Добавить();
				Запись.ТекстВопроса 			= НомерПП;
				Запись.Подсистема 				= Подсистема.Значение;
				Запись.ПредставлениеПодсистемы 	= Подсистема.Представление;
				
				Если ЕстьПодчиненныеВопросы(НомерПП) Тогда
					СтруктураОтветов = ПолучитьОтветыНаГлавныйВопрос(НомерПП);
					Если СтруктураОтветов <> Неопределено И СтруктураОтветов.Количество() >  0 Тогда
						ВывестиДопВопросы(НомерПП, СтруктураОтветов, СоответствиеВопросовНомерамКолонок, Подсистема);
					КонецЕсли;
				КонецЕсли;				
				
			Иначе
				Если ТекстовыеВопросы.Найти(ЧтениеХМЛ.ПолучитьАтрибут("НомерПП"), "ТекстВопроса") <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				Запись = ТекстовыеВопросы.Добавить();
				Запись.ТекстВопроса 			= ЧтениеХМЛ.ПолучитьАтрибут("НомерПП");
				Запись.Подсистема 				= Подсистема.Значение;
				Запись.ПредставлениеПодсистемы 	= Подсистема.Представление;
			КонецЕсли;
		КонецЕсли;
		
		Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.КонецЭлемента И ЧтениеХМЛ.ЛокальноеИмя = "Подсистема"
			И ЧтениеХМЛ.ПолучитьАтрибут("Имя") = Подсистема.Значение Тогда
			Возврат СоответствиеВопросовНомерамКолонок.Количество();
		КонецЕсли;
	КонецЦикла;
	ЧтениеХМЛ.Закрыть();
	Возврат СоответствиеВопросовНомерамКолонок.Количество();
КонецФункции

Функция ПроверитьВозможностьВнедрения(ИмяМетаданных, Макет)
	Для Каждого Вопрос  Из СоответствиеВопросовНомерамКолонок Цикл
		ИмяОбласти = Вопрос.ТекстВопроса;
		
		Если ЭтоДопВопрос(ИмяОбласти) Тогда
			Возврат Истина;
		Иначе
			ОбластьЕстьВНаличии = Макет.Области.Найти(ИмяОбласти) <> Неопределено;
			Если НЕ ОбластьЕстьВНаличии Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ТабОбласть = Макет.ПолучитьОбласть("Заголовок" + ИмяМетаданных + "|" + ИмяОбласти);
		ОбластьЯчеек = ТабОбласть.Область();
		Если ОбластьЯчеек.Лево - ОбластьЯчеек.Право = 0 И ОбластьЯчеек.Защита = Ложь Тогда
			Возврат Истина;
		ИначеЕсли ОбластьЯчеек.Лево - ОбластьЯчеек.Право <> 0 Тогда
			НачальнаяПозиция = ОбластьЯчеек.Лево;
			Пока НачальнаяПозиция <= ОбластьЯчеек.Право Цикл
				ТекущаяОбласть = ТабОбласть.Область(1, НачальнаяПозиция, 1, НачальнаяПозиция);
				Если ТекущаяОбласть.Защита =Ложь Тогда
					Возврат Истина;
				Иначе
					НачальнаяПозиция = НачальнаяПозиция + 1;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;
КонецФункции

Процедура ВывестиТекстовоеОписаниеОшибки(СтрокаТаблицыСОшибкой, ТипОшибки)
	
	ПодсистемаОшибки = СтрокаТаблицыСОшибкой.Подсистема;
	ПараметрыПоиска = Новый Структура("Подсистема", ПодсистемаОшибки);
	СтрокиТаблицы = ОписаниеТекстовыхОшибок.НайтиСтроки(ПараметрыПоиска);
	Если СтрокиТаблицы.Количество() = 0 Тогда
		НайденнаяСтрока = ОписаниеТекстовыхОшибок.Добавить();
		НайденнаяСтрока.Подсистема = ПодсистемаОшибки;
		НайденнаяСтрока.ПредставлениеПодсистемы = СтрокаТаблицыСОшибкой.ПредставлениеПодсистемы;
		НайденнаяСтрока.ОписаниеОшибок = Новый СписокЗначений;
	Иначе
		НайденнаяСтрока = СтрокиТаблицы[0];
	КонецЕсли;

	Макет = ПолучитьМакет("МакетОтчета");
	Если ТипОшибки = "ПроизвольнаяОшибка" Тогда
		Область = Макет.ПолучитьОбласть("СтрокаДанныхОшибки");
		Область.Параметры.ОписаниеОшибки = СтрокаТаблицыСОшибкой.Реквизиты;
		НайденнаяСтрока.ОписаниеОшибок.Добавить(Область);
	Иначе
		СтрокаТаблицыСОшибкой.Реквизиты = СтрЗаменить( СтрокаТаблицыСОшибкой.Реквизиты, " ПроизвольнаяОшибка", "");
		Если СтрДлина( СтрокаТаблицыСОшибкой.Реквизиты) < 5 Тогда
			Возврат;
		КонецЕсли;
		
		ПроверенныеПодсистемы = СтрокаТаблицыСОшибкой.Объект;
		МассивПодсистем = РазложитьСтрокуВМассивПодстрок(ПроверенныеПодсистемы);
		Если ТипОшибки = "Излишние" ИЛИ ТипОшибки = "ИзлишнеОтмеченные" Тогда
			Если МассивПодсистем.Количество() = 0 Тогда 
				СтрокаОшибки = НСтр("ru = 'Необходимо указать место в командном интерфейсе для объекта(ов) ""%1"" (см. шаг 2)'");
				СтрокаОшибки = СтрЗаменить(СтрокаОшибки, "%1", СокрЛП(СтрокаТаблицыСОшибкой.Реквизиты));
				Область = Макет.ПолучитьОбласть("СтрокаДанныхОшибки");
				Область.Параметры.ОписаниеОшибки = СтрокаОшибки;
				
				НайденнаяСтрока.ОписаниеОшибок.Добавить(Область);
			Иначе
				Если МассивПодсистем.Количество() > 1 Тогда
					СтрокаОшибки = НСтр("ru = 'Необходимо одновременно включить в один раздел командного интерфейса все перечисленные объекты: ""%1""
						|Сейчас они не полностью включены в следующие разделы: %2'");
				Иначе
					СтрокаОшибки = НСтр("ru = 'Необходимо одновременно включить в один раздел командного интерфейса все перечисленные объекты: ""%1""
						|Сейчас они не полностью включены в следующий раздел: %2'");
				КонецЕсли;
				СтрокаОшибки = СтрЗаменить(СтрокаОшибки, "%1", СокрЛП(СтрокаТаблицыСОшибкой.Реквизиты));
				СтрокаОшибки = СтрЗаменить(СтрокаОшибки, "%2", Строка(ПроверенныеПодсистемы));
				
				Область = Макет.ПолучитьОбласть("СтрокаДанныхОшибки");
				Область.Параметры.ОписаниеОшибки = СтрокаОшибки;
				НайденнаяСтрока.ОписаниеОшибок.Добавить(Область);

			КонецЕсли;	
		ИначеЕсли ТипОшибки = "Недостаточные" Тогда	
			Для Каждого ЭлементПодсистемы Из МассивПодсистем Цикл
							
				СтрокаОшибки = НСтр("ru = 'Ожидалось, что в ""%2"" должен быть объект ""%1""'");
				СтрокаОшибки = СтрЗаменить(СтрокаОшибки, "%1", СокрЛП(СтрокаТаблицыСОшибкой.Реквизиты));
				СтрокаОшибки = СтрЗаменить(СтрокаОшибки, "%2", Строка(ЭлементПодсистемы));
				Область = Макет.ПолучитьОбласть("СтрокаДанныхОшибки");
				Область.Параметры.ОписаниеОшибки = СтрокаОшибки;

				НайденнаяСтрока.ОписаниеОшибок.Добавить(Область);
				
			КонецЦикла;
		ИначеЕсли ПустаяСтрока(ТипОшибки) Тогда	
			Возврат;
		КонецЕсли;
	КонецЕсли; 
	
	Если КоличествоОшибокОтчетаОВнедрении = Неопределено Тогда
		КоличествоОшибокОтчетаОВнедрении = 0;
	КонецЕсли;
    КоличествоОшибокОтчетаОВнедрении = КоличествоОшибокОтчетаОВнедрении + 1;
	
КонецПроцедуры

Процедура ВывестиДанныеВТаблицу(ИмяТаблицы, СтавитьПлюсы, ЦветФона, СтруктураТаблицыОтчета, ТипОшибки = "", Произвольные = Ложь);
	
	Если КоличествоОшибокОтчетТаблицы = Неопределено Тогда 
		КоличествоОшибокОтчетТаблицы = 0;
	КонецЕсли;
	
	Если ТипЗнч(ИмяТаблицы) <> Тип("ТаблицаЗначений") ИЛИ ИмяТаблицы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	ТекущееСостояние = ИмяТаблицы.Колонки.Найти("Реквизиты") = Неопределено;
	
	Для Каждого СтрокаВыводимойТаблицы Из ИмяТаблицы Цикл
		
		Если Произвольные Тогда
			ВывестиТекстовоеОписаниеОшибки(СтрокаВыводимойТаблицы, "ПроизвольнаяОшибка");
			Продолжить;
		КонецЕсли;
		
		МассивВыводимыхОбъектов = РазложитьСтрокуВМассивПодстрок(СтрокаВыводимойТаблицы.Объект);
		ИмяВопроса = СтрокаВыводимойТаблицы.НомерВопроса;
		Элемент = СоответствиеВопросовНомерамКолонок.Найти(ИмяВопроса, "ТекстВопроса");
		Если Элемент = Неопределено Тогда
			ВывестиТекстовоеОписаниеОшибки(СтрокаВыводимойТаблицы, ТипОшибки);
			Продолжить;
		КонецЕсли;
		НомерКолонки = СоответствиеВопросовНомерамКолонок.Индекс(Элемент)+2;
		Если ТекущееСостояние Тогда 
			СтрокаРеквизитов = "";
		Иначе
			СтрокаРеквизитов = СтрокаВыводимойТаблицы.Реквизиты;
			СтрокаРеквизитов = СтрЗаменить(СтрокаРеквизитов, " ПроизвольнаяОшибка", "");
		КонецЕсли;
		
		Для Каждого ВыводимыйОбъект Из МассивВыводимыхОбъектов Цикл
			
			НомерСтроки = СтруктураТаблицыОтчета.Получить(ВыводимыйОбъект);
			Если НомерСтроки = Неопределено Тогда
				Продолжить;
			КонецЕсли;
				
			ОбластьВывода = ТаблицаОтчета.Область(НомерСтроки, НомерКолонки, НомерСтроки, НомерКолонки);
			ОбластьВывода.ЦветФона = ЦветФона;
			
			Если ПустаяСтрока(СокрЛП(СтрокаРеквизитов)) Тогда
				Если СтавитьПлюсы Тогда
					ОбластьВывода.Текст = "+";
				КонецЕсли;
				Продолжить;
			КонецЕсли;
			
			Если СтавитьПлюсы Тогда
				ОбластьВывода.ЦветТекста = Новый Цвет(0, 0, 0);
				ОбластьВывода.Текст = "+";
			КонецЕсли;
			
			Если Не ПустаяСтрока(ТипОшибки) Тогда
				СтрокаОписания = СтруктураОписанияОшибок.Добавить();
				СтрокаОписания.Адрес = Строка(НомерСтроки) + ":" + Строка(НомерКолонки);
				Если ТипОшибки = "Излишние" Тогда
					СтрокаОписания.ОписаниеОшибки = НСтр("ru = 'Внедрение не запланировано, ссылок на данный объект не должно быть в реквизитах (свойствах):  
					|
					|'") + СтрокаРеквизитов;
				ИначеЕсли ТипОшибки = "Недостаточные" Тогда
					СтрокаОписания.ОписаниеОшибки = НСтр("ru = 'Внедрение запланировано, ссылки на данный объект должны быть в реквизитах (свойствах): 
					|
					|'") + СтрокаРеквизитов;
				ИначеЕсли ТипОшибки = "ИзлишнеОтмеченные" Тогда
					СтрокаОписания.ОписаниеОшибки = НСтр("ru = 'Внедрение не запланировано, но выполнено корректно.'");
				КонецЕсли;
				ОбластьВывода.Примечание.Текст = СтрокаОписания.ОписаниеОшибки;
				КоличествоОшибокОтчетТаблицы = КоличествоОшибокОтчетТаблицы + 1;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Процедура ДобавитьДанныеПоПримечаниям()
	
	Если ПустаяСтрока(ПутьКФайлу) Тогда 
		Возврат;
	КонецЕсли;
	
	ЧтениеХМЛ = Новый ЧтениеXML;
	ЧтениеХМЛ.ОткрытьФайл(ПутьКФайлу);
	Пока ЧтениеХМЛ.Прочитать() Цикл
		Если ЧтениеХМЛ.ЛокальноеИмя = "Примечание" И ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			СтрокаАдреса = ЧтениеХМЛ.ПолучитьАтрибут("Адрес");
			МассивАдресов = РазложитьСтрокуВМассивПодстрок(СтрокаАдреса);
			НаименованиеОбъекта = МассивАдресов[0];
			НаименованиеВопроса = МассивАдресов[1];
			
			// В старой версии помощника для определения места примечания использовался адрес в виде координат ячейки
			// для избежания потери данных - поддержим этот вариант.
			
			ЭтоСтарыйФормат = Ложь;
			
			ОписаниеТипа = Новый ОписаниеТипов("Число");
			ЧисловоеПредставлениеАдреса = ОписаниеТипа.ПривестиЗначение(НаименованиеОбъекта);
			Если ЧисловоеПредставлениеАдреса = 0 И НаименованиеОбъекта <> "0" Тогда
				ЭтоСтарыйФормат = Истина;
			КонецЕсли;
			
			Если ЭтоСтарыйФормат Тогда
				ТекстПримечания = ЧтениеХМЛ.ПолучитьАтрибут("Текст");
				Область = ТаблицаОтчета.Область(МассивАдресов[0], МассивАдресов[1], МассивАдресов[0], МассивАдресов[1]);
				Область.Примечание.Текст = ТекстПримечания;
			Иначе
			
				ТекущаяСтрока = 1;
				ТекущаяКолонка = 0;
			
				СтрокаПримечания = Неопределено;
				КолонкаПримечания = Неопределено;
			
				КоличествоСтрок = ТаблицаОтчета.ВысотаТаблицы;
			
				Пока ТекущаяСтрока <= КоличествоСтрок Цикл
					Если НаименованиеОбъекта = ТаблицаОтчета.Область(ТекущаяСтрока, 1).Расшифровка Тогда
						СтрокаПримечания = ТекущаяСтрока;
						Прервать;
					КонецЕсли;
					ТекущаяСтрока = ТекущаяСтрока + 1;
				КонецЦикла;
			
				ЭлементВопроса = СоответствиеВопросовНомерамКолонок.Найти(НаименованиеВопроса, "ТекстВопроса");
				Если ЭлементВопроса <> Неопределено Тогда
					КолонкаПримечания = СоответствиеВопросовНомерамКолонок.Индекс(ЭлементВопроса)+2;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаПримечания) И ЗначениеЗаполнено(КолонкаПримечания) Тогда
					ТекстПримечания = ЧтениеХМЛ.ПолучитьАтрибут("Текст");
					Область = ТаблицаОтчета.Область(СтрокаПримечания, КолонкаПримечания, СтрокаПримечания, КолонкаПримечания);
					Область.Примечание.Текст = ТекстПримечания;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Формирует начальную пустую структуру xml файла в соответствие со списком выбранных подсистем.
//
// Параметры: 
//   ИмяФайла - строка; имя файла, в который будет записана структура.
//   СписокПодсистем - список значений; имена подсистем, структуру вопросов которых надо вывести в файл.
// 
Процедура СохранитьСписокПодсистемВФайл(СписокПодсистем, ПутьКФайлу) Экспорт
	Текст = ИзменитьМакетПоНастройкам(СписокПодсистем, ПутьКФайлу);
	Текст.Записать(ПутьКФайлу);
КонецПроцедуры

Функция ОпределитьИмяВопроса(Строка)
	ЭтоГлавныйВопрос = СтрНайти(Строка, "=""");
	Если ЭтоГлавныйВопрос > 0 Тогда
		ПодСтрока = Сред(Строка, ЭтоГлавныйВопрос);
		ПозПробела = СтрНайти(ПодСтрока, " ");
		НомерВопроса = Сред(ПодСтрока, ЭтоГлавныйВопрос+2, ПозПробела - ЭтоГлавныйВопрос - 3);
	Иначе
		ПозПервойЗакрывающейСкобкиТега =  СтрНайти(Строка, ">");
		ПозНачалаЗакрывающегоТега = СтрНайти(Строка, "</");
		НомерВопроса = Сред(Строка, ПозПервойЗакрывающейСкобкиТега + 1, ПозНачалаЗакрывающегоТега -1 );
	КонецЕсли;
	Возврат НомерВопроса;
КонецФункции

Функция ПолучитьОтвет(ИмяВопроса, ПутьКФайлу)
	Файл = Новый Файл(ПутьКФайлу);
	НашлиВопрос = Ложь;
	Если Не Файл.Существует() Тогда
		Возврат "<Ответ></Ответ>";
	Иначе
		Текст = Новый ТекстовыйДокумент;
		Текст.Прочитать(ПутьКФайлу);
		КоличествоСтрок = Текст.КоличествоСтрок();
		ТекущаяСтрока = 1;
		Пока ТекущаяСтрока <= КоличествоСтрок Цикл
			СтрокаТекста = Текст.ПолучитьСтроку(ТекущаяСтрока);
			Если СтрНайти(СтрокаТекста, ИмяВопроса)>0 Тогда
				НашлиВопрос = Истина;
			КонецЕсли;
			
			Если НашлиВопрос И СтрНайти(СтрокаТекста, "<Ответ>") > 0 Тогда
				Возврат СтрокаТекста;
			КонецЕсли;
			ТекущаяСтрока = ТекущаяСтрока + 1;
		КонецЦикла;
	КонецЕсли;
	Возврат "<Ответ></Ответ>";
КонецФункции

Функция ИзменитьМакетПоНастройкам(СписокПодсистем, ПутьКФайлу)
	
	Макет = ПолучитьМакет("ЭлектронныйВопросник");	
	НомерСтроки = 0;
	ДобавлятьТегОтвета = Ложь;
	ДобавлятьПодсистему = Ложь;
	НачальноеЗаполнение = Истина;	
	
	Пока НомерСтроки < Макет.КоличествоСтрок() Цикл
		
		СтрокаТекста = Макет.ПолучитьСтроку(НомерСтроки);
		
		Если СтрНайти(СтрокаТекста, "<Подсистема") Тогда
			НачальноеЗаполнение = Ложь;
			Для Каждого Элемент Из СписокПодсистем Цикл
				Строка = "<Подсистема Имя=""%1""";
				Если ТипЗнч(СписокПодсистем) = Тип("СписокЗначений") Тогда
					Строка = СтрЗаменить(Строка, "%1", Элемент.Значение);
				Иначе
					Строка = СтрЗаменить(Строка, "%1", Элемент.Подсистема);
				КонецЕсли;
				
				Если СтрНайти(СтрокаТекста, Строка) > 0   Тогда
					ДобавлятьПодсистему = Истина;
					Прервать;
				Иначе
					ДобавлятьПодсистему = Ложь;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если НачальноеЗаполнение Тогда
			НомерСтроки = НомерСтроки + 1;
			Продолжить;
		КонецЕсли;
		Если Не ДобавлятьПодсистему Тогда
		    Макет.УдалитьСтроку(НомерСтроки);
			Продолжить;
		КонецЕсли;
		
		Если СтрНайти(СтрокаТекста, "Подсистема") + СтрНайти(СтрокаТекста, "<Ответ>") + СтрНайти(СтрокаТекста, "Конфигурация") + СтрНайти(СтрокаТекста, "НомерПП") + СтрНайти(СтрокаТекста, "</Вопрос>") = 0 Тогда
			Макет.УдалитьСтроку(НомерСтроки);
		Иначе
			НомерСтроки = НомерСтроки +1;
		КонецЕсли;
		
		ДобавлятьТегОтвета = СтрНайти(СтрокаТЕкста, "НомерПП") > 0;
		
		Если ДобавлятьТегОтвета Тогда
			ИмяВопроса = ОпределитьИмяВопроса(СтрокаТекста);
			Макет.ВставитьСтроку(НомерСтроки, ПолучитьОтвет(ИмяВопроса, ПутьКФайлу));
			НомерСтроки = НомерСтроки + 1;
			ДобавлятьТегОтвета = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	Возврат Макет;
КонецФункции

// Преобразует массив значений в строку.
//
// Параметры:
// МассивЗначений - массив, элементы которого надо разместить в строке.
// Разделитель - строка, разделитель, который будет использован в итоговой строке между элементами массива.
// КонечныйРазделитель - строка, элемент, завершающий итоговую строку.
Функция МассивВСтроку(МассивЗначений, Знач Разделитель = ",", Знач КонечныйРазделитель = "")
	
	Результат = "";
	КоличествоЭлементов = МассивЗначений.Количество();
	Для Индекс = 0 По КоличествоЭлементов - 1 Цикл
		ТекущийРазделитель = Разделитель;
		Если Индекс = КоличествоЭлементов - 1 И Не ПустаяСтрока(КонечныйРазделитель) Тогда
			ТекущийРазделитель = КонечныйРазделитель;
		КонецЕсли;
		ЭлементМассива = МассивЗначений[Индекс];
		Результат = ?(Индекс = 0, Строка(ЭлементМассива), Результат + ТекущийРазделитель + Строка(ЭлементМассива))
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Определить объекты, в которые встроены подсистемы.
//
// Параметры:
//	 ВыводимыеПодсистемы - список значений, подсистемы, которые выбраны для отчета.
//
// Возвращаемое значение: 
//   ВстроенныеОбъекты - структура с полями: 
//   НомерВопроса - строка, уникальный идентификатор вопроса.
// 	 Объект - строка, имя объекта, встроенного по данному вопросу.	
//
Функция ОпределитьОбъектыВстраиванияПодсистем(ВыводимыеПодсистемы)  Экспорт
	
	// Инициализация таблицы возврата.
	ВстроенныеОбъекты = Новый ТаблицаЗначений;
	ВстроенныеОбъекты.Колонки.Добавить("НомерВопроса");
	ВстроенныеОбъекты.Колонки.Добавить("Объект");
	
	// По выбранным подсистемам найдем в макете вопросы, требующие объектов.
	
	ВременныйФайл = КаталогВременныхФайлов() + "ЭлектронныйВопросник.xml";
	ТекстВопросов = ЭтотОбъект.ПолучитьМакет("ЭлектронныйВопросник");
	ТекстВопросов.Записать(ВременныйФайл);

	ЧтениеХМЛ = Новый ЧтениеXML;
	ЧтениеХМЛ.ОткрытьФайл(ВременныйФайл);
	НашлиПодсистему = Ложь;
	ВыбралиВопрос  = Ложь;
	СписокВопросов = Новый ТаблицаЗначений;
	СписокВопросов.Колонки.Добавить("НомерПП");
	СписокВопросов.Колонки.Добавить("ИмяПроцедурыПроверки");
	
	Пока ЧтениеХМЛ.Прочитать() Цикл
		
		Если ЧтениеХМЛ.ЛокальноеИмя = "Подсистема" И ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			ПараметрыОтбора = Новый Структура("Подсистема", ЧтениеХМЛ.ПолучитьАтрибут("Имя"));
			Если ВыводимыеПодсистемы.НайтиСтроки(ПараметрыОтбора).Количество() <> 0 Тогда
				НашлиПодсистему = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если Не НашлиПодсистему Тогда 
			Продолжить;
		КонецЕсли;
		
		Если ЧтениеХМЛ.ЛокальноеИмя = "Вопрос" И ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			НоваяСтрока = СписокВопросов.Добавить();
			НоваяСтрока.НомерПП = ЧтениеХМЛ.ПолучитьАтрибут("НомерПП");
			ВыбралиВопрос = Истина
		КонецЕсли;
			
		Если ВыбралиВопрос И ЧтениеХМЛ.ЛокальноеИмя = "Проверка" И ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			ЧтениеХМЛ.Прочитать();
			НоваяСтрока.ИмяПроцедурыПроверки = "Подключаемый_"+ЧтениеХМЛ.Значение+"()";
			ВыбралиВопрос = Ложь;
		КонецЕсли;
		
		Если ЧтениеХМЛ.ЛокальноеИмя = "Подсистема" И ЧтениеХМЛ.ТипУзла = ТипУзлаXML.КонецЭлемента И НашлиПодсистему Тогда
			НашлиПодсистему = Ложь;
		КонецЕсли;
			
	КонецЦикла;
	ЧтениеХМЛ.Закрыть();
	Для Каждого Вопрос Из СписокВопросов Цикл
		// Если вопрос требует к себе ответов пользователя (а их нет) - тогда проверка развалится.
		// По таким проверкам сразу пишем "Пусто".
		СписокВстроенныхОбъектов = Вычислить(Вопрос.ИмяПроцедурыПроверки);
		Если СписокВстроенныхОбъектов = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ФактическийТипРезультата = ТипЗнч(СписокВстроенныхОбъектов);
		МассивВозможныхОжидаемыхТипов = Новый Массив;
		МассивВозможныхОжидаемыхТипов.Добавить(ТипЗнч(НоваяТаблицаПроверки()));
		МассивВозможныхОжидаемыхТипов.Добавить(Тип("Структура"));
		Если МассивВозможныхОжидаемыхТипов.Найти(ФактическийТипРезультата) = Неопределено Тогда 
			ТекстСообщения = НСтр("ru = 'Некорректный тип возвращаемого значения функции %1 (фактически: %2; ожидается: %3 или %4)'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", Вопрос.ИмяПроцедурыПроверки);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%2", Строка(ФактическийТипРезультата));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%3", Строка(МассивВозможныхОжидаемыхТипов[0]));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%4", Строка(МассивВозможныхОжидаемыхТипов[1]));
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;
		ОбновитьСтруктуруВстраиванияПодсистем(Вопрос.НомерПП, СписокВстроенныхОбъектов, ВстроенныеОбъекты);
		
		// Попытаемся зачитать ответы по подчиненным вопросам.
		
		Если ЕстьПодчиненныеВопросы(Вопрос.НомерПП) Тогда
			
			Если ТипЗнч(СписокВстроенныхОбъектов) = Тип("Структура") Тогда
				ТаблицаВстроенныхОбъектов = СписокВстроенныхОбъектов.ТаблицаПроверки;
			Иначе
				ТаблицаВстроенныхОбъектов = СписокВстроенныхОбъектов;
			КонецЕсли;
	
			ТаблицаВстроенныхОбъектов.Свернуть("ПроверенныеДанные");
			МассивСтрокОтветов = ТаблицаВстроенныхОбъектов.ВыгрузитьКолонку("ПроверенныеДанные");
			МассивОтветов = РазложитьСтрокуВМассивПодстрок(МассивСтрокОтветов[0]);
			СписокДопВопросов = ОпределитьДополнительныеВопросы(Вопрос.НомерПП);
			// По каждому дополнительному вопросу.
			Для Каждого ДопВопрос Из СписокДопВопросов Цикл
				
				СтруктураПроцедурыПроверки = ПолучитьПроцедуруПроверкиИзМакета(ДопВопрос);

				// По каждому объекту ответов дополнительного вопроса.
				Для Каждого Ответ Из МассивОтветов Цикл
					СписокВстроенныхОбъектов = Вычислить("Подключаемый_"+СтруктураПроцедурыПроверки.ПроцедураПроверки+"("""+Ответ+""")");
					НомерПППодчиненного = Вопрос.НомерПП+"["+ДопВопрос+"]"+"("+Ответ+")";
					ОбновитьСтруктуруВстраиванияПодсистем(НомерПППодчиненного, СписокВстроенныхОбъектов, ВстроенныеОбъекты);
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;	
	КонецЦикла;	
	Возврат ВстроенныеОбъекты;
КонецФункции

Процедура ОбновитьСтруктуруВстраиванияПодсистем(Вопрос, СписокВстроенныхОбъектов, ВстроенныеОбъекты)
	
	Если ТипЗнч(СписокВстроенныхОбъектов) = Тип("Структура") Тогда
		ТаблицаВстроенныхОбъектов = СписокВстроенныхОбъектов.ТаблицаПроверки;
	Иначе
		ТаблицаВстроенныхОбъектов = СписокВстроенныхОбъектов;
	КонецЕсли;
	
	ТаблицаВстроенныхОбъектов.Свернуть("ПроверенныеДанные");
	МассивОтветов= ТаблицаВстроенныхОбъектов.ВыгрузитьКолонку("ПроверенныеДанные");
	
	Для Каждого ОбъектПодсистемы Из МассивОтветов Цикл
		НовоеСоответствие = ВстроенныеОбъекты.Добавить();
		НовоеСоответствие.НомерВопроса = Вопрос;
		НовоеСоответствие.Объект = ОбъектПодсистемы;
	КонецЦикла;
	
КонецПроцедуры

// Выполняет проверку в цикле.
//
// Параметры:
//	ИмяПроцедуры - строка, имя выполняемой процедуры.
//  ПроектноеРешение - строка, описание проектного решения по проверяемому вопросу.
//
// Возвращаемое значение:
//   Структура с объектами, разделенными по правильности внедрения 
//     (см. функцию ПодготовитьСпискиИзлишнихНедостаточных).
//
Функция ВыполнитьПроцедуруПроверки(ТекстовыйВопрос, СтруктураПроцедурыПроверки, ПроектноеРешение)
	
	Если СтруктураПроцедурыПроверки.ДополнительныйВопрос Тогда
		ПозСкобки = СтрНайти(ТекстовыйВопрос.ТекстВопроса,"(");
		ПозЗакрывающейСкобки = СтрНайти(ТекстовыйВопрос.ТекстВопроса, ")");
		ИмяОбъекта = Сред(ТекстовыйВопрос.ТекстВопроса, ПозСкобки +1, ПозЗакрывающейСкобки - ПозСкобки - 1);
	КонецЕсли;
	
	ИмяПроцедуры = СтруктураПроцедурыПроверки.ПроцедураПроверки;
	МассивОтветов = РазложитьСтрокуВМассивПодстрок(ПроектноеРешение);
	
	Попытка
		Если СтруктураПроцедурыПроверки.ДополнительныйВопрос Тогда
			ОтветФакт = Вычислить("Подключаемый_" + ИмяПроцедуры + "(ИмяОбъекта)");
		Иначе
			ОтветФакт = Вычислить("Подключаемый_" + ИмяПроцедуры + "()");
		КонецЕсли;
	Исключение
		ТекстСообщения = НСтр("ru = 'Не реализована функция проверки %1, или в процессе ее выполнения возникла ошибка.
			|%2'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ИмяПроцедуры);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%2", ОписаниеОшибки());
		СообщитьПользователю(ТекстСообщения);
	КонецПопытки;
	
	Возврат ПодготовитьСпискиИзлишнихНедостаточных(МассивОтветов, ОтветФакт, ТекстовыйВопрос);
	
КонецФункции

Процедура ЗаписатьНеПроверяемыеРешения(СтруктураНепроверенных, ПроектныеРешения)
	Если КоличествоУточнений = Неопределено Тогда 
		КоличествоУточнений = 0;
	КонецЕсли;	
	
	СтрокаТекстаОшибки = "";
	Для Каждого Решение Из ПроектныеРешения Цикл
		СтрокаТекстаОшибки = ?(ПустаяСтрока(СтрокаТекстаОшибки), Решение, СтрокаТекстаОшибки + ", " + Решение);
	КонецЦикла;
	Для Каждого ЭлементСтруктуры Из СтруктураНепроверенных Цикл
		Если ЭлементСтруктуры.РеквизитПроверки = "ТипРеквизита" Тогда
			СтрокаВОтчет = НСтр("ru = 'Необходимо, чтобы в реквизите [ИмяРеквизита] были указаны типы: [СписокТипов]'");
			СтрокаВОтчет = СтрЗаменить(СтрокаВОтчет, "[ИмяРеквизита]", ЭлементСтруктуры.ПроверенныеДанные);
			СтрокаВОтчет = СтрЗаменить(СтрокаВОтчет, "[СписокТипов]", СтрокаТекстаОшибки);
			СтрокаТекстовогоОтчета = ТекстовыйОтчет.Добавить();
			СтрокаТекстовогоОтчета.Подсистема = ЭлементСтруктуры.Подсистема;
			СтрокаТекстовогоОтчета.ОписаниеОшибки = СтрокаВОтчет;
		ИначеЕсли ЭлементСтруктуры.РеквизитПроверки = "РазмещениеОбъектаВКИ" Тогда
			СтрокаВОтчет = НСтр("ru = 'Необходимо, чтобы объект [ИмяОбъекта] был размещен в разделах командного интерфейса: [СписокРазделов]'");
			СтрокаВОтчет = СтрЗаменить(СтрокаВОтчет, "[ИмяОбъекта]", ЭлементСтруктуры.ПроверенныеДанные);
			СтрокаВОтчет = СтрЗаменить(СтрокаВОтчет, "[СписокРазделов]", СтрокаТекстаОшибки);
			СтрокаТекстовогоОтчета = ТекстовыйОтчет.Добавить();
			СтрокаТекстовогоОтчета.Подсистема = ЭлементСтруктуры.Подсистема;
			СтрокаТекстовогоОтчета.ОписаниеОшибки = СтрокаВОтчет;
		ИначеЕсли ЭлементСтруктуры.РеквизитПроверки = "Произвольная" Тогда
			СтрокаТекстовогоОтчета = ТекстовыйОтчет.Добавить();
			СтрокаТекстовогоОтчета.Подсистема = ЭлементСтруктуры.Подсистема;
			СтрокаТекстовогоОтчета.ОписаниеОшибки = ЭлементСтруктуры.ПроверенныеДанные;
		КонецЕсли;
		КоличествоУточнений = КоличествоУточнений + 1;
	КонецЦикла;
КонецПроцедуры

Функция СформироватьТаблицу()
	ТаблицаВозврата = Новый ТаблицаЗначений;
	ТаблицаВозврата.Колонки.Добавить("Объект");
	ТаблицаВозврата.Колонки.Добавить("Реквизиты");
	ТаблицаВозврата.Колонки.Добавить("Подсистема");
	ТаблицаВозврата.Колонки.Добавить("ПредставлениеПодсистемы");
	Возврат ТаблицаВозврата;
КонецФункции

Процедура ДобавитьСтрокуВТаблицу(ИмяТаблицы, ДобавляемыйОбъект, РежимДобавления, ТаблицаСИсходнымиДанными)
	СтрокаТаблицы = ИмяТаблицы.Добавить();
	СтрокаТаблицы.Объект = ДобавляемыйОбъект;
	СтрокаРеквизитов = "";
	Если РежимДобавления = 0 Тогда
		СтрокаТаблицы.Реквизиты = Неопределено; 
	ИначеЕсли РежимДобавления = 3 Тогда
		МассивОбъектов = ТаблицаСИсходнымиДанными.ВыгрузитьКолонку("РеквизитПроверки");
		Для Каждого Объект Из МассивОбъектов Цикл
			СтрокаРеквизитов = ?(ПустаяСтрока(СтрокаРеквизитов), " " + Объект, СтрокаРеквизитов + ",
			| " + Объект);
		КонецЦикла;
		СтрокаТаблицы.Реквизиты = СтрокаРеквизитов;
	ИначеЕсли РежимДобавления = 1 Тогда
		Для Каждого СтрокаОбъектов Из ТаблицаСИсходнымиДанными Цикл
			Если СтрНайти(СтрокаОбъектов.ПроверенныеДанные, ДобавляемыйОбъект) = 0 Тогда
				
				СтрокаРеквизитов = ?(ПустаяСтрока(СтрокаРеквизитов), 
					" " + СтрокаОбъектов.РеквизитПроверки, СтрокаРеквизитов + ",
					| " + СтрокаОбъектов.РеквизитПроверки);
					
			КонецЕсли
		КонецЦикла;
		СтрокаТаблицы.Реквизиты = СтрокаРеквизитов;
	Иначе
		Для Каждого СтрокаОбъектов Из ТаблицаСИсходнымиДанными Цикл
			Если СтрНайти(СтрокаОбъектов.ПроверенныеДанные, ДобавляемыйОбъект) <> 0 Тогда
				СтрокаРеквизитов = ?(ПустаяСтрока(СтрокаРеквизитов), 
					" " + СтрокаОбъектов.РеквизитПроверки, СтрокаРеквизитов + ",
					| " + СтрокаОбъектов.РеквизитПроверки);
			КонецЕсли	
		КонецЦикла;
		СтрокаТаблицы.Реквизиты = СтрокаРеквизитов;
	КонецЕсли;				
КонецПроцедуры

Функция ПодготовитьСпискиИзлишнихНедостаточных(ПроектныеРешения, РеальныеРешения, СтруктураВопроса)
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("КорректныеОбъекты", СформироватьТаблицу());
	СтруктураВозврата.Вставить("ИзлишниеОбъекты", СформироватьТаблицу());
	СтруктураВозврата.Вставить("НедостаточныеОбъекты", СформироватьТаблицу());
	СтруктураВозврата.Вставить("НедовстроенныеОбъекты", СформироватьТаблицу());
	СтруктураВозврата.Вставить("ПеревстроенныеОбъекты", СформироватьТаблицу());
	СтруктураВозврата.Вставить("ТекстПроизвольныхОшибок", Новый ТекстовыйДокумент);
	
	Если РеальныеРешения = Неопределено Или РеальныеРешения.Количество() = 0 Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	// Если идет речь о проверке размещения объекта на "Рабочем столе",
	// то данный вопрос переинициализируется как непроверяемое решение.
	Если ПроектныеРешения.Найти(СформироватьЗаголовокДляРазмещатьНаРабочемСтоле()) <> Неопределено Тогда 
		
		Если ТипЗнч(РеальныеРешения) = Тип("Структура") Тогда
			ТаблицаНеПроверяемых = РеальныеРешения.ТаблицаНеПроверяемых;
			ТаблицаПроверки      = РеальныеРешения.ТаблицаПроверки;
		Иначе
			ТаблицаНеПроверяемых = НоваяТаблицаПроверки();
			ТаблицаПроверки      = РеальныеРешения;
		КонецЕсли;
		
		СтрокаВопроса = НСтр("ru = 'Необходимо, чтобы объект ""%Объект%"" был размещен на Рабочем столе'");
		СтрокаВопроса = СтрЗаменить(СтрокаВопроса, "%Объект%", ТаблицаПроверки.Получить(0).РеквизитПроверки);
		
		ДобавитьНеПроверяемуюСтроку(ТаблицаНеПроверяемых, СтрокаВопроса, "Произвольная", СтруктураВопроса.ПредставлениеПодсистемы);
		
		РеальныеРешения = Новый Структура("ТаблицаПроверки, ТаблицаНеПроверяемых", ТаблицаПроверки, ТаблицаНеПроверяемых);
	КонецЕсли;	
	
	Если ТипЗнч(РеальныеРешения) = Тип("Структура") Тогда
		ТаблицаПроверки = РеальныеРешения.ТаблицаПроверки;
		ЗаписатьНеПроверяемыеРешения(РеальныеРешения.ТаблицаНеПроверяемых, ПроектныеРешения);
	Иначе
		ТаблицаПроверки = РеальныеРешения;
	КонецЕсли;
	
	ПромежуточнаяСтруктура = Новый Структура("ПолностьюВстроенные, НеполностьюВстроенные", Новый Массив, Новый Массив);
	КорректноеКоличествоВнедрений = ТаблицаПроверки.Количество();
	СтрокаОбъектовВнедрения = "";
	Для Каждого СтрокаВнедрений  Из ТаблицаПроверки Цикл
		Если СтрокаВнедрений.РеквизитПроверки = "ПроизвольнаяОшибка" Тогда
			КорректноеКоличествоВнедрений = КорректноеКоличествоВнедрений - 1;
			СтруктураВозврата.ТекстПроизвольныхОшибок.ДобавитьСтроку(СтрокаВнедрений.ПроверенныеДанные);
			Продолжить;
		КонецЕсли;
		СтрокаОбъектовВнедрения = ?(ПустаяСтрока(СтрокаОбъектовВнедрения), СтрокаВнедрений.ПроверенныеДанные, 
			СтрокаОбъектовВнедрения + "," + СтрокаВнедрений.ПроверенныеДанные);
			
	
	КонецЦикла;
	
	Если КорректноеКоличествоВнедрений = 0 И ПроектныеРешения.Количество() = 0 Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	СтрокаОбъектовВнедрения = СтрокаОбъектовВнедрения +",";
	МассивОбъектовВнедрений = РазложитьСтрокуВМассивПодстрок(СтрокаОбъектовВнедрения);
	
	Для Каждого ОбъектВнедрений Из МассивОбъектовВнедрений Цикл
		ИмяОбъекта = СокрЛП(ОбъектВнедрений);
		КоличествоВнедрений = СтрЧислоВхождений(СтрокаОбъектовВнедрения, ИмяОбъекта+ ",");
		Если КоличествоВнедрений = КорректноеКоличествоВнедрений Тогда
			ПромежуточнаяСтруктура.ПолностьюВстроенные.Добавить(ИмяОбъекта);
		Иначе
			ПромежуточнаяСтруктура.НеполностьюВстроенные.Добавить(ИмяОбъекта);
		КонецЕсли;
	КонецЦикла;
	
	Если ПроектныеРешения.Количество() = 0 Тогда
		
		Для Каждого ПолностьюВстроенный Из ПромежуточнаяСтруктура.ПолностьюВстроенные Цикл
			ДобавитьСтрокуВТаблицу(СтруктураВозврата.НедостаточныеОбъекты, ПолностьюВстроенный, 3, ТаблицаПроверки);	
		КонецЦикла;
			
		Для Каждого НеполностьюВстроенный Из ПромежуточнаяСтруктура.НеполностьюВстроенные Цикл
			ДобавитьСтрокуВТаблицу(СтруктураВозврата.НедостаточныеОбъекты, НеполностьюВстроенный, 3, ТаблицаПроверки);	
		КонецЦикла;
	Иначе	
		Для Каждого ПроектноеРешение Из ПроектныеРешения Цикл
			Если ПромежуточнаяСтруктура.ПолностьюВстроенные.Найти(ПроектноеРешение) <> Неопределено Тогда
				ДобавитьСтрокуВТаблицу(СтруктураВозврата.КорректныеОбъекты, ПроектноеРешение, 3, ТаблицаПроверки);	
			ИначеЕсли ПромежуточнаяСтруктура.НеПолностьюВстроенные.Найти(ПроектноеРешение)<> Неопределено Тогда
				ДобавитьСтрокуВТаблицу(СтруктураВозврата.НедовстроенныеОбъекты, ПроектноеРешение, 1, ТаблицаПроверки);	
			Иначе
				Если ПроектноеРешение <> СформироватьЗаголовокДляНеИспользоватьВКИ()
					И ПроектноеРешение <> СформироватьЗаголовокДляРазмещатьНаРабочемСтоле() Тогда 
					ДобавитьСтрокуВТаблицу(СтруктураВозврата.ИзлишниеОбъекты, ПроектноеРешение, 3, ТаблицаПроверки);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Для Каждого ПолностьюРеальноеРешение Из ПромежуточнаяСтруктура.полностьюВстроенные Цикл
			Если ПроектныеРешения.Найти(ПолностьюРеальноеРешение) = Неопределено Тогда
				Если ПроектныеРешения.Найти(СформироватьЗаголовокДляНеИспользоватьВКИ()) = Неопределено
					И ПроектныеРешения.Найти(СформироватьЗаголовокДляРазмещатьНаРабочемСтоле()) = Неопределено Тогда 
					ДобавитьСтрокуВТаблицу(СтруктураВозврата.НедостаточныеОбъекты, ПолностьюРеальноеРешение, 3, ТаблицаПроверки);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Для Каждого НеполностьюРеальноеРешение Из ПромежуточнаяСтруктура.НеполностьюВстроенные Цикл
			Если ПроектныеРешения.Найти(НеПолностьюРеальноеРешение) = Неопределено Тогда
				ДобавитьСтрокуВТаблицу(СтруктураВозврата.ПеревстроенныеОбъекты, НеполностьюРеальноеРешение, 2, ТаблицаПроверки);	
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Возврат СтруктураВозврата;
КонецФункции

// Возвращает массив возможных имен возможных метаданных для внедрения.
//
// Возвращаемое значение:
//	Массив - массив имен метаданных.
//
Функция ПолучитьСписокВозможныхТиповМетаданныхДляВнедрения()
	
	СписокТипов = Новый Массив;
	СписокТипов.Добавить("Константы");
	СписокТипов.Добавить("Справочники");
	СписокТипов.Добавить("Документы");
	СписокТипов.Добавить("ЖурналыДокументов");
	СписокТипов.Добавить("Отчеты");
	СписокТипов.Добавить("Обработки");
	СписокТипов.Добавить("ПланыВидовХарактеристик");
	СписокТипов.Добавить("ПланыСчетов");
    СписокТипов.Добавить("ПланыВидовРасчета");
	СписокТипов.Добавить("ПланыОбмена");
	СписокТипов.Добавить("РегистрыСведений");
	СписокТипов.Добавить("РегистрыНакопления");
	СписокТипов.Добавить("РегистрыБухгалтерии");
	СписокТипов.Добавить("РегистрыРасчета");
	СписокТипов.Добавить("БизнесПроцессы");
	СписокТипов.Добавить("Задачи");
	Возврат СписокТипов;
	
КонецФункции

// Сформировать текстовый отчет.
// 
// Параметры:
// 	Текст - Текстовый документ, список выбранных подсистем и проектных решений.
//	Таблица - табличный документ, результат проектных решений в табличном виде.
//	Путь - строка, путь к файлу с проектными решениями.
//
// Возвращаемое значение
//	Структура с полями : 
//		СводкаОтчета - текстовый документ, ошибки по доп. параметрам.
//		КоличествоОшибокОтчетТаблицы - число, количество найденных ошибок в Отчет-таблице.
//		КоличествоОшибокОтчетаОВнедрении - Число - количество найденных ошибок в Отчете по внедрению.
//		КоличествоУточнений - Число - количество уточнений.
//		НомерВерсииБСП - строка, номер версии внедряемой БСП.
//		ТабличныйОтчет - табличный документ, проектные решения по объектным вопросам.
//		СтруктураОписанияОшибок - структура с полями "Адрес", "ОписаниеОшибки", содержащая информацию по ошибкам в
//		                          "ТабличныйОтчет".
//
Функция СформироватьОтчетСервер(Текст, Таблица, Путь) Экспорт
	СводкаОтчета = Таблица;
	
	КоличествоОшибокОтчетТаблицы 		= 0;
	КоличествоОшибокОтчетаОВнедрении 	= 0;
	КоличествоУточнений					= 0;
	
	ТекстВопросов = ПолучитьМакет("ЭлектронныйВопросник");
	
	ВременноеИмяФайла = КаталогВременныхФайлов() + "Ответы.xml";
	Текст.Записать(ВременноеИмяФайла);
	ЧтениеХМЛ = Новый ЧтениеXML;
	ЧтениеХМЛ.ОткрытьФайл(ВременноеИмяФайла);
	Макет = ПолучитьМакет("МакетОтчета");
	НомерВерсииБСП = ПроверяемаяВерсияБСП();
	
	ОбластьКонфигурации = Макет.ПолучитьОбласть("СтрокаЗаголовка");
	ОбластьКонфигурации.Параметры.НомерВерсии = НомерВерсииБСП;
	СводкаОтчета.Вывести(ОбластьКонфигурации);
	
	ПроверитьВстраивание = Ложь;
	ПолучитьОписаниеВопроса = Ложь;
	ПолучитьОтветы = Ложь;
	ПолучитьПроверку = Ложь;
	СтрокаОтветов = "";
	СписокПодсистем = Новый СписокЗначений;
	
	Пока ЧтениеХМЛ.Прочитать() Цикл
		Если ЧтениеХМЛ.ТипУзла  = ТипУзлаXML.НачалоЭлемента Тогда
			Если ЧтениеХМЛ.ЛокальноеИмя = "Подсистема" Тогда
				СписокПодсистем.Добавить(ЧтениеХМЛ.ПолучитьАтрибут("Имя"), ЧтениеХМЛ.ПолучитьАтрибут("Представление"));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураВозврата = ПроверитьВнедрение(СписокПодсистем, Путь);
		
	Если ТекстовыйОтчет.Количество() > 0 Тогда
		
		Область = Макет.ПолучитьОбласть("СтрокаОписанияОшибки");
		Область.Параметры.ОписаниеОшибки = НСтр("ru = 'Следующие пункты подлежат ручной проверке:'");
		СводкаОтчета.Вывести(Область);
		
		ТекстовыйОтчет.Сортировать("Подсистема ВОЗР");
		ТекущаяПодсистема = "";
		
		Для Каждого СтрокаТекста Из ТекстовыйОтчет Цикл
			Если ТекущаяПодсистема <> СтрокаТекста.Подсистема Тогда
				Область = Макет.ПолучитьОбласть("СтрокаПодсистемы");
				Область.Параметры.Подсистема = СтрокаТекста.Подсистема;
				СводкаОтчета.Вывести(Область);
				ТекущаяПодсистема = СтрокаТекста.Подсистема;
			КонецЕсли;
			
			Область = Макет.ПолучитьОбласть("СтрокаДанныхОшибки");
			Область.Параметры.ОписаниеОшибки = СтрокаТекста.ОписаниеОшибки;
			СводкаОтчета.Вывести(Область);
			
		КонецЦикла;
	КонецЕсли;
	
	// Пункт окончательной обработки текстового отчета.
	
	СводкаОтчета.ОтображатьСетку = Ложь;
	
	СтруктураОтчета = Новый Структура;
	СтруктураОтчета.Вставить("СводкаОтчета", СводкаОтчета);
	СтруктураОтчета.Вставить("КоличествоОшибокОтчетТаблицы", КоличествоОшибокОтчетТаблицы);
	СтруктураОтчета.Вставить("КоличествоОшибокОтчетаОВнедрении", КоличествоОшибокОтчетаОВнедрении);
	СтруктураОтчета.Вставить("КоличествоУточнений", КоличествоУточнений);
	СтруктураОтчета.Вставить("НомерВерсииБСП", НомерВерсииБСП);
	СтруктураОтчета.Вставить("ТабличныйОтчет", СтруктураВозврата.ТаблицаОтчета);
	СтруктураОтчета.Вставить("СтруктураОписанияОшибок", СтруктураОписанияОшибок);
	
	Возврат СтруктураОтчета;
	
КонецФункции

//////////////////////////////////////////////////////////////////////////
// Тестовое формирование макета по XML файлу.

Функция СформироватьМакет()
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.Защита = Истина;
		
	ДеревоМакета = СформироватьСтруктуруВопросника();
	СписокВозможныхТипов = ПолучитьСписокВозможныхТиповМетаданныхДляВнедрения();
	
	СформироватьВертикальнуюШапкуТаблицы(ТабДок, СписокВозможныхТипов);
	СформироватьМакетИзДерева(ТабДок, ДеревоМакета);

	Возврат ТабДок;
КонецФункции
  
Процедура СформироватьМакетИзДерева(ТабДок, ДеревоМакета)
	// для каждой подсистемы
	НомерНачальнойКолонки = 2;
	Для Каждого СтрокаПодсистемы Из ДеревоМакета.Строки Цикл
		// Определим наличие табличных вопросов по данной подсистеме.
		ВопросыДляТаблицы = ОпределитьТабличныеВопросыПодсистемы(СтрокаПодсистемы.Строки);
		Если ВопросыДляТаблицы.Количество() = 0 Тогда
			// Если их нет, тогда не будем выводить совсем.
			Продолжить;
		ИначеЕсли ВопросыДляТаблицы.Количество() = 1 Тогда
			ВывестиОдиночныйВопрос(ТабДок, СтрокаПодсистемы, ВопросыДляТаблицы, НомерНачальнойКолонки);
		Иначе
			ВывестиМногиеВопросы(ТабДок, СтрокаПодсистемы, ВопросыДляТаблицы, НомерНачальнойКолонки);
		КонецЕсли;
		
	КонецЦикла;
	ВывестиКолонкуДополнительногоВопроса(ТабДок, НомерНачальнойКолонки);
	ОформитьТабличныйДокумент(ТабДок);
	Для Каждого СтрокаПодсистемы Из ДеревоМакета.Строки Цикл
		// Определим наличие табличных вопросов по данной подсистеме.
		ВопросыДляТаблицы = ОпределитьТабличныеВопросыПодсистемы(СтрокаПодсистемы.Строки);

		УстановитьДоступность(ТабДок, ВопросыДляТаблицы);	
	КонецЦикла;
	
КонецПроцедуры

Процедура ОформитьТабличныйДокумент(ТабДок)
	ОбластьОтветов = ТабДок.Область(4, 2, ТабДок.ВысотаТаблицы, ТабДок.ШиринаТаблицы-1);
	ОбластьОтветов.ЦветФона = Новый Цвет(217, 217, 217);
	ОбластьОтветов.ЦветТекста = Новый Цвет(51, 102, 255);
	
	ПолнаяОбластьТабДока = ТабДок.Область();
	ПолнаяОбластьТабДока.РазмещениеТекста  = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
    ПолнаяОбластьТабДока.АвтовысотаСтроки = Истина;	
	ПолнаяОбластьТабДока.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
	
	ОбластьБезТипов = ТабДок.Область(0, 2, ТабДок.ВысотаТаблицы, ТабДок.ШиринаТаблицы);
	ОбластьБезТипов.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
	ОбвестиЯчейки(ТабДок);
КонецПроцедуры

Процедура ВывестиКолонкуДополнительногоВопроса(ТабДок, НомерКолонки)
	ОбластьДопВопроса = ТабДок.Область(0, НомерКолонки, 0, НомерКолонки);
	ОбластьДопВопроса.ШиринаКолонки = 16.88;
    ОбластьДопВопроса.Защита = Ложь;
	ОбластьДопВопроса.Имя = "ОбластьДопВопросов";
	
	ОбластьЗаголовка = ТабДок.Область(1, НомерКолонки, 3, НомерКолонки);
	ОбластьЗаголовка.Объединить();
	ОбластьЗаголовка.Параметр = "ЗаголовокВопроса";
	ОбластьЗаголовка.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Параметр;
	Линия = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
    ОбластьЗаголовка.Обвести(Линия, Линия, Линия, Линия);
КонецПроцедуры

Процедура ОбвестиЯчейки(ТабДок)
	Линия = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
	НачальнаяСтрока = 4;
	НачальнаяКолонка = 1;
	Пока НачальнаяКолонка <= ТабДок.ШиринаТаблицы Цикл
		Пока НачальнаяСтрока <= ТабДок.ВысотаТаблицы Цикл
			Область = ТабДок.Область(НачальнаяСтрока, НачальнаяКолонка, НачальнаяСтрока, НачальнаяКолонка);
			Область.Обвести(Линия, Линия, Линия, Линия);
			НачальнаяСтрока = НачальнаяСтрока + 1;
		КонецЦикла;
		НачальнаяСтрока = 4;
		НачальнаяКолонка = НачальнаяКолонка + 1;
	КонецЦикла;
КонецПроцедуры

Процедура УстановитьДоступность(ТабДок, СписокВопросов)
	
	Для Каждого Вопрос Из СписокВопросов Цикл
		СписокТипов = ОпределитьСписокТипов(Вопрос.Тип);
		ОбработатьДоступностьТиповУВопроса(СписокТипов, Вопрос.Имя, ТабДок);
	КонецЦикла;
		
КонецПроцедуры

Процедура ОбработатьДоступностьТиповУВопроса(Типы, ИмяВопроса, ТабДок)
	ОбластьВопроса = ТабДок.Область(ИмяВопроса);
	Если Типы.Количество() = 0 Тогда
		УстановитьДоступностьОбласти(ИмяВопроса, ТабДок);
	Иначе
		Для Каждого ДоступныйТип Из Типы Цикл
			УстановитьДоступностьОбласти(Строка(ИмяВопроса+"|Заголовок"+СокрЛП(ДоступныйТип)), ТабДок);
			УстановитьДоступностьОбласти(Строка(ИмяВопроса+"|Элемент"+СокрЛП(ДоступныйТип)), ТабДок);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура УстановитьДоступностьОбласти(ИмяОбласти, ТабДок)
	Область = ТабДок.Область(ИмяОбласти);
	Если Область <> Неопределено Тогда
		Область.Защита = Ложь;
		Область.ЦветФона = Новый Цвет (255, 255, 255);
	КонецЕсли;
КонецПроцедуры

Функция ОпределитьСписокТипов(ТипВопроса)
	МассивВозврата = Новый Массив;
	ПредставлениеОбъектов = СокрЛП(СтрЗаменить(ТипВопроса, "ВыборОбъектов", ""));
	Если Не ПустаяСтрока(ПредставлениеОбъектов) Тогда
		ПредставлениеОбъектов = СтрЗаменить(ПредставлениеОбъектов, ".", "");
		МассивВозврата = РазложитьСтрокуВМассивПодстрок(ПредставлениеОбъектов);
	КонецЕсли;
	Возврат МассивВозврата;
КонецФункции

Процедура ВывестиОдиночныйВопрос(ТабДок, СтрокаПодсистемы, МассивВопросов, НомерКолонки)
	Вопрос = МассивВопросов[0];
	// 1. Назовем область с вопросом.
	ОбластьОдиночногоВопроса = ТабДок.Область(0, НомерКолонки, 0, НомерКолонки); 
	ОбластьОдиночногоВопроса.ШиринаКолонки = 16.88;
	ОбластьОдиночногоВопроса.Имя = Вопрос.Имя;
	// 2. Выведем заголовок и подсказку в таблицу.
	ОбластьОдиночногоЗаголовка = ТабДок.Область(1, НомерКолонки, 3, НомерКолонки);
	ОбластьОдиночногоЗаголовка.Объединить();
	ОбластьОдиночногоЗаголовка.Текст = СтрокаПодсистемы.Синоним;
	ОбластьОдиночногоЗаголовка.Расшифровка = Вопрос.Подсказка;
	ОбластьОдиночногоЗаголовка.Защита = Истина;
	НомерКолонки = НомерКолонки + 1;
	Линия = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
    ОбластьОдиночногоЗаголовка.Обвести(Линия, Линия, Линия, Линия);
КонецПроцедуры

Процедура ВывестиМногиеВопросы(ТабДок, СтрокаПодсистемы, МассивВопросов, НомерКолонки)
	НачальнаяКолонка = НомерКолонки;
	Для Каждого ЭлементВопрос Из МассивВопросов Цикл
		// имя области
		ОбластьВопроса = ТабДок.Область(0, НомерКолонки, 0, НомерКолонки);
		ОбластьВопроса.ШиринаКолонки = 16.88;
		ОбластьВопроса.Имя = ЭлементВопрос.Имя;
		// заголовок
		ОбластьЗаголовка = ТабДок.Область(2, НомерКолонки, 3, НомерКолонки);
		ОбластьЗаголовка.Объединить();
		ОбластьЗаголовка.Текст = ЭлементВопрос.Синоним;
		ОбластьЗаголовка.Расшифровка = ЭлементВопрос.Подсказка;
		Линия = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
	    ОбластьЗаголовка.Обвести(Линия, Линия, Линия, Линия);

		НомерКолонки = НомерКолонки + 1;
	КонецЦикла;
	
	// Теперь имя области и заголовок подсистемы.
	
	ОбластьПодсистемы = ТабДок.Область(0, НачальнаяКолонка, 0, НомерКолонки);
	ОбластьПодсистемы.имя = СтрокаПодсистемы.Имя;
	
	ОбластьЗаголовкаПодсистемы = ТабДок.Область(1, НачальнаяКолонка, 1, НомерКолонки);
	ОбластьЗаголовкаПодсистемы.Объединить();
	ОбластьЗаголовкаПодсистемы.Текст = СтрокаПодсистемы.Синоним;
	Линия = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
    ОбластьЗаголовкаПодсистемы.Обвести(Линия, Линия, Линия, Линия);

КонецПроцедуры

Функция ОпределитьТабличныеВопросыПодсистемы(СписокВопросовПодсистемы)
	СписокТабличныхВопросов = Новый Массив;
	
	Для Каждого ВопросПодсистемы Из СписокВопросовПодсистемы Цикл
		Если СтрНайти(ВопросПодсистемы.Тип, "ВыборОбъектов")> 0 И СтрНайти(ВопросПодсистемы.Тип, "Подсистемы") = 0 Тогда
			СписокТабличныхВопросов.Добавить(ВопросПодсистемы);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СписокТабличныхВопросов;
КонецФункции

Функция СформироватьСтруктуруВопросника()
	
	// Создадим структуру дерева вопросника.
	ДеревоВозврата = Новый ДеревоЗначений;
	ДеревоВозврата.Колонки.Добавить("Имя");
	ДеревоВозврата.Колонки.Добавить("Синоним"); 
	ДеревоВозврата.Колонки.Добавить("Описание"); 
	ДеревоВозврата.Колонки.Добавить("Проверка");
	ДеревоВозврата.Колонки.Добавить("Подсказка");
	ДеревоВозврата.Колонки.Добавить("Тип");
	
	// Сохраним макет вопросника в файл и откроем его в xml чтении.
	
	МакетВопросника = ПолучитьМакет("ЭлектронныйВопросник");
	ИмяФайла = ПолучитьИмяВременногоФайла("xml");
	МакетВопросника.Записать(ИмяФайла);
	
	ЧтениеХМЛ = Новый ЧтениеXML;
	ЧтениеХМЛ.ОткрытьФайл(ИмяФайла);
	НоваяСтрокаДерева = Неопределено;
	
	Пока ЧтениеХМЛ.Прочитать() Цикл
		
		Если ЧтениеХМЛ.ЛокальноеИмя = "Подсистема" И ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			НоваяСтрокаДерева = СформироватьУзелПодсистемы(ДеревоВозврата, ЧтениеХМЛ);
		КонецЕсли;
		
		Если ЧтениеХМЛ.ЛокальноеИмя = "Подсистема" И ЧтениеХМЛ.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			НоваяСтрокаДерева = Неопределено;
		КонецЕсли;
		
		Если ЧтениеХМЛ.ЛокальноеИмя = "Вопрос" И ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			Если Не ЗначениеЗаполнено(НоваяСтрокаДерева) Тогда
				ВызватьИсключение НСтр("ru = 'Ошибка разбора макета электронного вопросника.'");
			КонецЕсли;
			
			СформироватьУзелВопроса(НоваяСтрокаДерева, ЧтениеХМЛ);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДеревоВозврата;
	
КонецФункции

Функция СформироватьУзелПодсистемы(Дерево, ЧтениеХМЛ)
	НоваяСтрокаДерева = Дерево.Строки.Добавить();
	НоваяСтрокаДерева.Имя = ЧтениеХМЛ.ПолучитьАтрибут("Имя");
	НоваяСтрокаДерева.Синоним = ЧтениеХМЛ.ПолучитьАтрибут("Представление");
	Возврат НоваяСтрокаДерева;
КонецФункции

Процедура СформироватьУзелВопроса(СтрокаДерева, ЧтениеХМЛ)
	СтрокаВопроса = СтрокаДерева.Строки.Добавить();
	СтрокаВопроса.Имя = ЧтениеХМЛ.ПолучитьАтрибут("НомерПП");
	СтрокаВопроса.Тип = ЧтениеХМЛ.ПолучитьАтрибут("Тип");
	СтрокаВопроса.Синоним = ЧтениеХМЛ.ПолучитьАтрибут("Представление");
	Пока НЕ (ЧтениеХМЛ.ЛокальноеИмя = "Вопрос" И ЧтениеХМЛ.ТипУзла = ТипУзлаXML.КонецЭлемента) Цикл
		ЧтениеХМЛ.Прочитать();
		Если ЧтениеХМЛ.ЛокальноеИмя = "Текст" И ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			ЧтениеХМЛ.Прочитать();
			СтрокаВопроса.Подсказка = ЧтениеХМЛ.Значение;
		КонецЕсли;
		
		Если ЧтениеХМЛ.ЛокальноеИмя = "Проверка" И ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			ЧтениеХМЛ.Прочитать();
			СтрокаВопроса.Проверка = ЧтениеХМЛ.Значение;
		КонецЕсли;
		Если ЧтениеХМЛ.ЛокальноеИмя = "Описание" И ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			ЧтениеХМЛ.Прочитать();
			СтрокаВопроса.Описание = ЧтениеХМЛ.Значение;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьВертикальнуюШапкуТаблицы(ТабДок, СписокТипов)
	// Определим имя области - колонки.
	ОбластьТабДокаКолонка = ТабДок.Область(0, 1, 1, 1);
	ОбластьТабДокаКолонка.Имя = "Наименование";
	ОбластьТабДокаКолонка.ШиринаКолонки = 68.63;
	ОбластьТабДокаКолонка.Шрифт = Новый Шрифт("Verdana", 10);
	
	// Для первой строки так же назначим имя области.
	ОбластьТабДокаСтрока = ТабДок.Область(1, 0, 3, 0);
	ОбластьТабДокаСтрока.Имя = "ШапкаТаблицы";
	Нумератор = 4;
	Для Каждого ЭлементТип Из СписокТипов Цикл

		// объявим тип 
		ОбластьТабДокаСтрокаТипа = ТабДок.Область(Нумератор, 0, Нумератор, 0);
		ОбластьТабДокаСтрокаТипа.Имя = "Заголовок"+ЭлементТип;
		
		// Выведем наименование типа 
		ОбластьТабДокаНаименованиеСтроки = ТабДок.Область(Нумератор, 1, Нумератор, 1);
		ОбластьТабДокаНаименованиеСтроки.Текст = ЭлементТип;
		ОбластьТабДокаНаименованиеСтроки.Шрифт = Новый Шрифт("Verdana", 10, Истина);
		
		Нумератор = Нумератор + 1;
		
		// На следующей строке выведем определение элемента типа.
		
		ОбластьТабДокаЭлементТипа = ТабДок.Область(Нумератор, 0, Нумератор, 0);
		ОбластьТабДокаЭлементТипа.Имя = "Элемент"+ЭлементТип;
		
		// Поставим в первую колонку области параметр.
		
		ОбластьТабДокаПараметрТипа = ТабДок.Область(Нумератор, 1, Нумератор, 1);
		ОбластьТабДокаПараметрТипа.Параметр = "ИмяЭлемента";
		ОбластьТабДокаПараметрТипа.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Параметр;
		ОбластьТабДокаПараметрТипа.ПараметрРасшифровки = "ПолноеИмяОбъекта";
		ОбластьТабДокаПараметрТипа.ИспользованиеРасшифровки = ИспользованиеРасшифровкиТабличногоДокумента.Ячейка;
	    
		Нумератор = Нумератор + 1;
		
	КонецЦикла;
КонецПроцедуры

Функция ИмяПредопределенного(Знач Ссылка)
	Результат = Неопределено;
	
	ТипСсылки = ТипЗнч(Ссылка);
	Если Справочники.ТипВсеСсылки().СодержитТип(ТипСсылки) Тогда
		Менеджер = Справочники[Ссылка.Метаданные().Имя];
	ИначеЕсли ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(ТипСсылки) Тогда
		Менеджер = ПланыВидовХарактеристик[Ссылка.Метаданные().Имя];
	ИначеЕсли ПланыСчетов.ТипВсеСсылки().СодержитТип(ТипСсылки) Тогда
		Менеджер = ПланыСчетов[Ссылка.Метаданные().Имя];
	ИначеЕсли ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(ТипСсылки) Тогда
		Менеджер = ПланыВидовРасчета[Ссылка.Метаданные().Имя];
	Иначе
		Менеджер  = Неопределено;
	КонецЕсли;
	
	Если Менеджер<>Неопределено Тогда
		// Это тип у которого есть предопределенные элементы.
		Результат = Ссылка.ИмяПредопределенныхДанных;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Процедура ИсключитьТипИзТаблицыПроверки(ТаблицаПроверки, ИсключаемыйТип)
	
	Для Каждого СтрокаТаблицы Из ТаблицаПроверки Цикл
		СписокОбъектов = СтрРазделить(СтрокаТаблицы.ПроверенныеДанные, ",", Ложь);
		Индекс = СписокОбъектов.Найти(ИсключаемыйТип);
		Если Индекс <> Неопределено Тогда
			СписокОбъектов.Удалить(Индекс);
		КонецЕсли;
		СтрокаТаблицы.ПроверенныеДанные = СтрСоединить(СписокОбъектов, ",");
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
