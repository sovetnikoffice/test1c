// Форма параметризуется:
//
//      Заголовок     - Строка  - заголовок формы.
//      ЗначенияПолей - Строка  - сериализованное значение контактной информации или пустая строка для 
//                                ввода нового.
//      Представление - Строка  - представление адреса (используется только при работе со старыми данными).
//      ВидКонтактнойИнформации - СправочникСсылка.ВидыКонтактнойИнформации, Структура - описание того, что мы
//                                редактируем.
//      Комментарий  - Строка   - необязательный комментарий, для подстановки в поле "Комментарий".
//
//      ВозвращатьСписокЗначений - Булево - необязательный флаг того, что возвращаемое значение поля.
//                                 КонтактнаяИнформация будет иметь тип СписокЗначений (совместимость).
//
//  Результат выбора:
//      Структура - поля:
//          * КонтактнаяИнформация   - Строка - XML контактной информации.
//          * Представление          - Строка - Представление.
//          * Комментарий            - Строка - Комментарий.
//          * ВведеноВСвободнойФорме - Булево - флаг ввода.
//

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Параметры.Свойство("ОткрытаПоСценарию") Тогда
		ВызватьИсключение НСтр("ru = 'Обработка не предназначена для непосредственного использования.'");
	КонецЕсли;
	
	// Настройки формы
	ЭтоВебСервис = УправлениеКонтактнойИнформациейСлужебный.КлассификаторДоступенЧерезВебСервис();
	МожноЗагружатьКлассификатор = УправлениеКонтактнойИнформациейСлужебный.ЕстьВозможностьИзмененияАдресногоКлассификатора() И Не ЭтоВебСервис;
	ЕстьКлассификатор = УправлениеКонтактнойИнформациейСлужебныйПовтИсп.АдресныйКлассификаторДоступен();
	ЭтоТакси = ТекущийВариантИнтерфейсаКлиентскогоПриложения() = ВариантИнтерфейсаКлиентскогоПриложения.Такси; // Группа команд "все действия" зависит от интерфейса.
	
	УстановитьВозможностьПодбораПоИндексу(ЭтоВебСервис);
	
	Параметры.Свойство("ВозвращатьСписокЗначений", ВозвращатьСписокЗначений);
	// Внутренняя инициализация
	ЦветФонаУправляющегоПоля = ЦветаСтиля.ФонУправляющегоПоля;
	ЦветФонаФормы            = ЦветаСтиля.ЦветФонаФормы;
	АвтоЦвет                 = Новый Цвет;
	СтранаРоссия = Справочники.СтраныМира.Россия;
	
	ВидКонтактнойИнформации = УправлениеКонтактнойИнформациейСлужебный.СтруктураВидаКонтактнойИнформации(Параметры.ВидКонтактнойИнформации);
	
	Если ВидКонтактнойИнформации.ПроверятьПоФИАС Тогда
		Команды.ПроверитьЗаполнениеАдреса.Подсказка = НСтр("ru = 'Проверить заполнение адреса в формате ФИАС'");
	Иначе
		Команды.ПроверитьЗаполнениеАдреса.Подсказка  = НСтр("ru = 'Проверить заполнение адреса в формате КЛАДР'");
	КонецЕсли;
	ВидКонтактнойИнформации.Вставить("Ссылка", Параметры.ВидКонтактнойИнформации);
	
	// Всегда используем разрезы ФИАС.
	ВидКонтактнойИнформации.Вставить("ФорматАдреса", "ФИАС");
	
	// Заголовок
	Заголовок = ?(ПустаяСтрока(Параметры.Заголовок), 
		Строка(УправлениеКонтактнойИнформациейСлужебный.ТипВидаКонтактнойИнформации(ВидКонтактнойИнформации)),
		Параметры.Заголовок);
	
	СкрыватьНеактуальныеАдреса  = ВидКонтактнойИнформации.СкрыватьНеактуальныеАдреса;
	АдресТолькоРоссийский       = ВидКонтактнойИнформации.АдресТолькоРоссийский;
	ТипКонтактнойИнформации     = ВидКонтактнойИнформации.Тип;
	
	ЗаполнитьВариантыДомовСтроенийКвартир();
	
	// Пытаемся заполнить из параметров.
	Если УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(Параметры.ЗначенияПолей) 
			И ТипКонтактнойИнформации = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
		РезультатыЧтения = Новый Структура;
		XDTOКонтактная = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияИзXML(Параметры.ЗначенияПолей, ТипКонтактнойИнформации, РезультатыЧтения);
		Если РезультатыЧтения.Свойство("ТекстОшибки") Тогда
			// Распознали с ошибками, сообщим при открытии.
			ТекстПредупрежденияПриОткрытии = РезультатыЧтения.ТекстОшибки;
			XDTOКонтактная.Представление = Параметры.Представление;
			XDTOКонтактная.Состав.Страна = Строка(СтранаРоссия);
		КонецЕсли;
	Иначе
		XDTOКонтактная = УправлениеКонтактнойИнформациейСлужебный.АдресXMLВXDTO(Параметры.ЗначенияПолей, Параметры.Представление, );
		XDTOКонтактная.Состав.Страна = СтранаРоссия.Наименование;
	КонецЕсли;
	
	Если Параметры.Комментарий <> Неопределено Тогда
		// Ставим новый комментарий, иначе он придет из информации.
		XDTOКонтактная.Комментарий = Параметры.Комментарий;
	КонецЕсли;
	
	ЗначениеРеквизитовПоКонтактнойИнформации(ЭтотОбъект, XDTOКонтактная);
	
	Если ЗначениеЗаполнено(Страна) Тогда
		КодСтраны = Страна.Код;
	Иначе
		Страна    = СтранаРоссия;
		КодСтраны = СтранаРоссия.Код;
	КонецЕсли;
	
	ОтрисоватьДополнительныеЗданияИПомещения();
	
	Если АдресТолькоРоссийский  Тогда
		Элементы.Страна.Доступность = Ложь;
		Элементы.Страна.ЦветФона = АвтоЦвет;
		// Проверяем на корректность
		Если Страна <> СтранаРоссия Тогда
			// Считаем адрес российским
			ТестПредставленияАдреса = СокрЛП(СокрЛП(Страна) + " " + СокрЛП(ПредставлениеАдреса));
			Если Не ПустаяСтрока(ТестПредставленияАдреса) Тогда
				ПредставлениеАдреса = ТестПредставленияАдреса;
				РазрешитьВводАдресаВСвободнойФорме = Ложь;
				ПредставлениеАдресаИзменено = Истина;
			КонецЕсли;
			ТекстПредупрежденияПриОткрытии = НСтр("ru = 'Адрес введен некорректно: допускается ввод только российских адресов. Значение поля ""Страна"" было изменено на ""Россия"", необходимо проверить остальные поля.'"); 
			Модифицированность = Истина;
		КонецЕсли;
		Страна = СтранаРоссия;
	КонецЕсли;
	
	// Проверка какой адрес
	Если Страна = СтранаРоссия Тогда
		Элементы.ОКТМО.Видимость = ВидКонтактнойИнформации.УказыватьОКТМО;
		
		Если Не ЭтоВебСервис Тогда
			// российский адрес
			Если XDTOКонтактная.Состав.Состав <> Неопределено И ТипЗнч(XDTOКонтактная.Состав.Состав) <> Тип("Строка") Тогда
				Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.АдресныйКлассификатор") Тогда
					МодульАдресныйКлассификаторСлужебный = ОбщегоНазначения.ОбщийМодуль("АдресныйКлассификаторСлужебный");
					СведенияОРегионе = МодульАдресныйКлассификаторСлужебный.СведенияОРегионе(XDTOКонтактная.Состав.Состав.СубъектРФ);
					Если СведенияОРегионе.Загружен = Ложь Тогда
						ДоступностьКлассификатора = Новый Структура("Отказ, КраткоеПредставлениеОшибки");
						ДоступностьКлассификатора.Отказ = Истина;
						ДоступностьКлассификатора.КраткоеПредставлениеОшибки = 
							СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Необходимо загрузить адресные сведения по региону ""%1"" (в меню ""%2"").'"),
							XDTOКонтактная.Состав.Состав.СубъектРФ,
							?(ЭтоТакси, НСтр("ru = 'Еще'"), НСтр("ru = 'Все действия'")));
						Элементы.АвторизацияНаСайтеПоддержкиПользователей.Видимость = Ложь;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ УправлениеКонтактнойИнформациейСлужебный.XDTOКонтактнаяИнформацияЗаполнена(XDTOКонтактная) Тогда
			РазрешитьВводАдресаВСвободнойФорме = Ложь;
		КонецЕсли;
	Иначе
		МожноЗагружатьКлассификатор = Ложь;
	КонецЕсли;
	
	Элементы.ЗагрузитьКлассификатор.Видимость            = МожноЗагружатьКлассификатор;
	Элементы.ЗагрузитьКлассификаторВсеДействия.Видимость = МожноЗагружатьКлассификатор;
	
	Если Не ЕстьКлассификатор Тогда
		Элементы.ЗаполнитьПоПочтовомуИндексу.Видимость            = Ложь;
		Элементы.ЗаполнитьПоПочтовомуИндексуВсеДействия.Видимость = Ложь;
	КонецЕсли;
	
	// По умолчанию выводим представление.
	Элементы.АдресПредставлениеКомментарий.ТекущаяСтраница = Элементы.АдресСтраницаПредставление;
	
	Если ЭтоТакси Тогда
		Элементы.ФормаВсеДействия.Видимость = Ложь;
	Иначе
		Элементы.ВвестиАдресВСвободнойФорме.Видимость  = Ложь;
		Элементы.ЗаполнитьПоПочтовомуИндексу.Видимость = Ложь;
		Элементы.ФормаОчиститьАдрес.Видимость          = Ложь;
		Элементы.ЗагрузитьКлассификатор.Видимость      = Ложь;
		Элементы.ИзменитьФорму.Видимость               = Ложь;
	КонецЕсли;
	
	ДоступностьКлассификатора = Неопределено;
	Элементы.АдресСтраницаКомментарий.Картинка = ОбщегоНазначенияКлиентСервер.КартинкаКомментария(Комментарий);
	
	ПроверитьДоступностьКлассификатора(ДоступностьКлассификатора);
	УстановитьКлючИспользованияФормы();
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Элементы.ДобавитьОбъект.Доступность = МожноДобавлятьДополнительныеОбъекты();
	ОбработкаИзмененияСтраныКлиент();
	
	Если Не ПустаяСтрока(ДоступностьКлассификатораАдрес) Или Не ПустаяСтрока(ТекстПредупрежденияПриОткрытии) Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 0.5, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	Оповещение = Новый ОписаниеОповещения("ПодтвердитьИЗакрыть", ЭтотОбъект);
	ОбщегоНазначенияКлиент.ПоказатьПодтверждениеЗакрытияФормы(Оповещение, Отказ);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "АдресныйКлассификаторАктуализирован" ИЛИ ИмяСобытия = "ЗагруженАдресныйКлассификатор" Тогда
		Если ЕстьКлассификатор И СведенияОРегионе(НаселенныйПунктДетально.Регион.Представление).Загружен = Истина Тогда
			Элементы.ГруппаОписаниеНедоступностиСервера.ТекущаяСтраница = Элементы.СервисДоступен;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СтранаПриИзменении(Элемент)
	ОбработкаИзмененияСтраныКлиент();
	
	Контекст = КонтекстФормыКлиент();
	ЗаполнитьПредставлениеАдреса(Контекст);
	КонтекстФормыКлиент(Контекст);
	
#Если ВебКлиент Тогда
	// Обход особенности платформы.
	Элемент.ОбновитьТекстРедактирования();
#КонецЕсли

	// Выводим всегда представление.
	Элементы.АдресПредставлениеКомментарий.ТекущаяСтраница = Элементы.АдресСтраницаПредставление;
КонецПроцедуры

&НаКлиенте
Процедура СтранаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура СтранаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если Ожидание = 0 Тогда
		// Формирование списка быстрого выбора.
		Если ПустаяСтрока(Текст) Тогда
			ДанныеВыбора = Новый СписокЗначений;
		КонецЕсли;
		Возврат;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СтранаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ПустаяСтрока(Текст) Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
#Если ВебКлиент Тогда
	// Обход особенности платформы.
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора         = Новый СписокЗначений;
	ДанныеВыбора.Добавить(Страна);
#КонецЕсли

КонецПроцедуры

&НаКлиенте
Процедура СтранаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.СтранаМираОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ИндексИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	Если МожноЗагружатьКлассификатор И Страна = СтранаРоссия Тогда
		Если СтрДлина(СокрЛП(Текст)) = 6 И Индекс <> Текст И Страна = СтранаРоссия Тогда
			Контекст = КонтекстФормыКлиент();
			Если ЕстьКлассификатор Тогда
				ПараметрыФормы = Новый Структура;
				ПараметрыФормы.Вставить("Индекс", СокрЛП(Текст));
				ПараметрыФормы.Вставить("СкрыватьНеактуальныеАдреса", СкрыватьНеактуальныеАдреса);
				ПараметрыФормы.Вставить("ФорматАдреса", ВидКонтактнойИнформации.ФорматАдреса);
				
				ОткрытьФорму("Обработка.ВводКонтактнойИнформации.Форма.ВыборАдресаПоПочтовомуИндексу", ПараметрыФормы, Элементы.Индекс);
			КонецЕсли;
		Иначе
			Если СтрДлина(СокрЛП(Текст)) = 6 Тогда
				ОбновитьПредставлениеАдреса();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИндексОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	ИначеЕсли ВыбранноеЗначение.Отказ Тогда
		Если ВыбранноеЗначение.Свойство("Индекс") И НЕ ПустаяСтрока(ВыбранноеЗначение.Индекс) 
				И ПодборПоИндексуДоступен Тогда
			Оповещение = Новый ОписаниеОповещения("ПослеВопросООбновлениеКлассификатора", ЭтотОбъект);
			ТекстВопроса = НСтр("ru = 'Индекс %1 не найден в адресном классификаторе. Возможные причины:'") + Символы.ПС;
			ТекстВопроса = ТекстВопроса + "  - " + НСтр("ru = 'индекс относится к региону, по которому в программе отсутствуют адресные сведения;'") + Символы.ПС;
			ТекстВопроса = ТекстВопроса + "  - " + НСтр("ru = 'адресные сведения, загруженные в программу, устарели;'") + Символы.ПС;
			ТекстВопроса = ТекстВопроса + "  - " + НСтр("ru = 'индекс введен некорректно.'");
			ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстВопроса, Формат(ВыбранноеЗначение.Индекс, "ЧРГ=' '; ЧГ=0"));
			Кнопки = Новый СписокЗначений;
			Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Обновить классификатор'"));
			Кнопки.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru = 'Отмена'"));
			ПоказатьВопрос(Оповещение, ТекстВопроса, Кнопки);
		Иначе
			Если НЕ ПодборПоИндексуДоступен Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Индекс %1 не найден в адресном классификаторе'"),
					Формат(ВыбранноеЗначение.Индекс, "ЧРГ=' '; ЧГ=0"));
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,, "Объект.Индекс");
			Иначе
				ПроверитьДоступностьКлассификатора(ВыбранноеЗначение);
			КонецЕсли;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Контекст = КонтекстФормыКлиент();
	ЗаполнитьАдресПоДаннымИндекса(Контекст, ВыбранноеЗначение);
	КонтекстФормыКлиент(Контекст);
	Модифицированность = Истина;
	ТекущийЭлемент = Элементы.Дом;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросООбновлениеКлассификатора(Результат, Параметр) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.АдресныйКлассификатор") Тогда
			МодульАдресныйКлассификаторКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("АдресныйКлассификаторКлиент");
			МодульАдресныйКлассификаторКлиент.ЗагрузитьАдресныйКлассификатор();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьАдресПоДаннымИндекса(Контекст, Знач ДанныеИндекса)
	
	ОчиститьАдресСервер(Контекст);
	
	XDTOКонтактнаяИнфо = КонтактнаяИнформацияПоЗначениюРеквизитов(Контекст);
	
	// Предполагаем, что адрес все еще российский.
	XDTOАдрес = XDTOКонтактнаяИнфо.Состав.Состав;
	
	УправлениеКонтактнойИнформациейСлужебный.ПочтовыйИндексАдреса(XDTOАдрес, ДанныеИндекса.Индекс);
	УправлениеКонтактнойИнформациейСлужебный.УстановитьНаселенныйПунктАдресаПоИдентификатору(XDTOАдрес, ДанныеИндекса.Идентификатор);
	УправлениеКонтактнойИнформациейСлужебный.УстановитьУлицуАдресаПоИдентификатору(XDTOАдрес, ДанныеИндекса.Идентификатор);
	
	ЗначениеРеквизитовПоКонтактнойИнформации(Контекст, XDTOКонтактнаяИнфо);
	ЗаполнитьПредставлениеАдреса(Контекст);
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	
	ПодключитьОбработчикОжидания("УстановитьПиктограммуКомментария", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ТипДомаПриИзменении(Элемент)
	
	Контекст = КонтекстФормыКлиент();
	ЗаполнитьПредставлениеАдреса(Контекст);
	КонтекстФормыКлиент(Контекст);
	
КонецПроцедуры

&НаКлиенте
Процедура ДомПриИзменении(Элемент)
	
	Контекст = КонтекстФормыКлиент();
	ОбновитьИндексИПредставление(Контекст);
	КонтекстФормыКлиент(Контекст);

КонецПроцедуры

&НаКлиенте
Процедура ТипСтроенияПриИзменении(Элемент)
	
	Контекст = КонтекстФормыКлиент();
	ЗаполнитьПредставлениеАдреса(Контекст);
	КонтекстФормыКлиент(Контекст);
	
КонецПроцедуры

&НаКлиенте
Процедура СтроениеПриИзменении(Элемент)
	Контекст = КонтекстФормыКлиент();
	ОбновитьИндексИПредставление(Контекст);
	КонтекстФормыКлиент(Контекст);
КонецПроцедуры

&НаКлиенте
Процедура ТипПомещенияПриИзменении(Элемент)
	
	Контекст = КонтекстФормыКлиент();
	ЗаполнитьПредставлениеАдреса(Контекст);
	КонтекстФормыКлиент(Контекст);
	
КонецПроцедуры

&НаКлиенте
Процедура ПомещениеПриИзменении(Элемент)
	
	Контекст = КонтекстФормыКлиент();
	ЗаполнитьПредставлениеАдреса(Контекст);
	КонтекстФормыКлиент(Контекст);
	
КонецПроцедуры

&НаКлиенте
Процедура НаселенныйПунктПриИзменении(Элемент)
	
	Контекст = КонтекстФормыКлиент();
	ОбработкаИзмененияНаселенногоПунктаСервер(Контекст);
	КонтекстФормыКлиент(Контекст);
	
КонецПроцедуры

&НаКлиенте
Процедура НаселенныйПунктНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	// Если пришли впрямую после редактирования, то сбрасываем адрес.
	Если Элемент.ТекстРедактирования <> НаселенныйПункт Тогда
		Модифицированность = Истина;
		НаселенныйПункт    = Элемент.ТекстРедактирования;
		
		ИдентификаторНаселенногоПункта = Неопределено;
		
		Контекст = КонтекстФормыКлиент();
		ОбработкаИзмененияНаселенногоПунктаСервер(Контекст, Истина);
		КонтекстФормыКлиент(Контекст);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("НаселенныйПунктДетально", НаселенныйПунктДетально);
	ПараметрыФормы.Вставить("ИдентификаторНаселенногоПункта", ИдентификаторНаселенногоПункта);
	ПараметрыФормы.Вставить("СкрыватьНеактуальныеАдреса", СкрыватьНеактуальныеАдреса);
	ПараметрыФормы.Вставить("ФорматАдреса", ВидКонтактнойИнформации.ФорматАдреса);
	ПараметрыФормы.Вставить("СервисКлассификатораНедоступен", НЕ ЕстьКлассификатор);
	
	ОткрытьФорму("Обработка.ВводКонтактнойИнформации.Форма.НаселенныйПунктАдреса", ПараметрыФормы, Элемент, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура НаселенныйПунктОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Перем МожноЗагружатьРегион;
	
	СтандартнаяОбработка = Ложь;
	Если ВыбранноеЗначение=Неопределено Тогда
		Возврат;
	КонецЕсли;
	Модифицированность = Истина;
	ТипЗначения = ТипЗнч(ВыбранноеЗначение);
	ФормироватьДетально = Истина;
	
	Если ТипЗначения = Тип("Структура") Тогда
		
		Если ВыбранноеЗначение.Представление <> НаселенныйПункт Тогда
			ИдентификаторУлицы = Неопределено;
		КонецЕсли;
		
		// Результат автоподбора или выбора кнопкой, берем все оттуда.
		ИдентификаторНаселенногоПункта = ВыбранноеЗначение.Идентификатор;
		НаселенныйПункт                = ВыбранноеЗначение.Представление;
		
		Если ВыбранноеЗначение.Свойство("НаселенныйПунктДетально") Тогда
			// Выбор из формы детального ввода.
			НаселенныйПунктДетально = ВыбранноеЗначение.НаселенныйПунктДетально;
			ФормироватьДетально = Ложь;
		Иначе 
			Если НаселенныйПунктДетально <> Неопределено Тогда
				НовыеДанныеПоНаселенномуПунктуДетально = НаселенныйПунктДетальноПоИдентификатору(ИдентификаторНаселенногоПункта, ВидКонтактнойИнформации.ФорматАдреса);
				Для каждого ЧастьАдреса Из НовыеДанныеПоНаселенномуПунктуДетально Цикл
					Если ЧастьАдреса.Значение.Уровень < 7 Тогда
						НаселенныйПунктДетально[ЧастьАдреса.Ключ] = ЧастьАдреса.Значение;
					КонецЕсли;
				КонецЦикла;
			Иначе
				НаселенныйПунктДетально = НаселенныйПунктДетальноПоИдентификатору(ИдентификаторНаселенногоПункта, ВидКонтактнойИнформации.ФорматАдреса);
			КонецЕсли;
		КонецЕсли;
		
		РегионНеЗагружен = ВыбранноеЗначение.Свойство("РегионЗагружен") И (Не ВыбранноеЗначение.РегионЗагружен);
		Если МожноЗагружатьКлассификатор И РегионНеЗагружен Тогда
			// Предлагаем загрузить классификатор.
			УправлениеКонтактнойИнформациейКлиент.ПредложениеЗагрузкиКлассификатора(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Данные для ""%1"" не загружены.'"), ВыбранноеЗначение.Представление),
				ВыбранноеЗначение.Представление);
		КонецЕсли;
		
	Иначе
		// Иной источник, будет попытка разобрать.
		ИдентификаторНаселенногоПункта = Неопределено;
	 	НаселенныйПункт = Строка(ВыбранноеЗначение);
	КонецЕсли;
	
	Элементы.НаселенныйПункт.ОбновитьТекстРедактирования();
	Контекст = КонтекстФормыКлиент();
	// Так как изменился населенный пункт, то перепроверяем улицу, индекс и представление обновятся там.
	ОбработкаИзмененияУлицыСервер(Контекст);
	КонтекстФормыКлиент(Контекст);
	
	
КонецПроцедуры

&НаКлиенте
Процедура НаселенныйПунктАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	ДанныеВыбора = Новый СписокЗначений;
	Если Ожидание = 0 Тогда
		// Формирование списка быстрого выбора, стандартную обработку не надо трогать.
		Возврат;
	ИначеЕсли НедоступностьСервиса() Тогда
		Возврат;
	КонецЕсли;
	
	ТекстДляАвтоПодбора = СокрЛП(Текст);
	Элементы.НаселенныйПункт.ЦветФона = АвтоЦвет;
	Если СтрДлина(ТекстДляАвтоПодбора) < 3 Тогда
		// Нет вариантов, список пуст, стандартную обработку не надо трогать.
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ФорматАдреса", ВидКонтактнойИнформации.ФорматАдреса);
	ДополнительныеПараметры.Вставить("СкрыватьНеактуальные",              СкрыватьНеактуальныеАдреса);
	
	ДанныеКлассификатора = СписокАвтоподбораНаселенногоПункта(ТекстДляАвтоПодбора, ДополнительныеПараметры);
	ПроверитьДоступностьКлассификатора(ДанныеКлассификатора);
	Если ДанныеКлассификатора.Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеВыбора = ДанныеКлассификатора.Данные;
	// Стандартную обработку отключаем, только если есть наши варианты.
	Если ДанныеВыбора.Количество() > 0 Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаселенныйПунктОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	// Выход из поля с текстом, измененным руками.
	
	Модифицированность = Истина;

	ДанныеВыбора = Новый СписокЗначений;
	ДанныеВыбора.Добавить(Текст);
	
	// Населенный пункт становится недостоверным.
	ИдентификаторНаселенногоПункта = Неопределено;
	НаселенныйПункт                = Текст;
	
	// Улица становится недостоверной.
	ИдентификаторУлицы = Неопределено;
	
	#Если ВебКлиент Тогда
		// Обход особенности платформы.
		Контекст = КонтекстФормыКлиент();
		ОбработкаИзмененияНаселенногоПунктаСервер(Контекст);
		КонтекстФормыКлиент(Контекст);
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура УлицаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	// Если пришли впрямую после редактирования, то сбрасываем.
	Если Элемент.ТекстРедактирования <> Улица Тогда
		Улица = Элемент.ТекстРедактирования;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СкрыватьНеактуальныеАдреса", СкрыватьНеактуальныеАдреса);
	ПараметрыФормы.Вставить("ФорматАдреса", ВидКонтактнойИнформации.ФорматАдреса);
	Если ЗначениеЗаполнено(ИдентификаторНаселенногоПункта) Тогда
		ПараметрыФормы.Вставить("ИдентификаторНаселенногоПункта", ИдентификаторНаселенногоПункта);
		ПараметрыФормы.Вставить("Улица", Улица);
	Иначе
		// Родитель улицы неопределен, открываем форму в которой ничего нет.
		ПараметрыФормы.Вставить("ИдентификаторНаселенногоПункта", -1);
		ПараметрыФормы.Вставить("Улица", Улица);
		ПараметрыФормы.Вставить("Заголовок", НаселенныйПункт + " " + НСтр("ru = '(не найден)'"));
	КонецЕсли;
	
	УправлениеКонтактнойИнформациейКлиент.НачалоВыбораУлицы(Элемент, ИдентификаторНаселенногоПункта, Улица, ПараметрыФормы);
КонецПроцедуры

&НаКлиенте
Процедура УлицаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранноеЗначение.Свойство("Отказ") И ВыбранноеЗначение.Отказ = Истина Тогда
		Если НЕ ПустаяСтрока(ВыбранноеЗначение.КраткоеПредставлениеОшибки) Тогда
			ПоказатьПредупреждение(, ВыбранноеЗначение.КраткоеПредставлениеОшибки);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	ТипВыбора = ТипЗнч(ВыбранноеЗначение);
	Если ТипВыбора = Тип("Структура") Тогда
			// Результат автоподбора или выбора кнопкой, берем все оттуда.
			Если ЗначениеЗаполнено(ВыбранноеЗначение.Улица) Тогда 
				НаселенныйПунктДетально.Улица.Представление = ВыбранноеЗначение.Улица;
				НаименованиеСокращение= УправлениеКонтактнойИнформациейКлиентСервер.НаименованиеСокращение(ВыбранноеЗначение.Улица);
				НаселенныйПунктДетально.Улица.Наименование = НаименованиеСокращение.Наименование;
				НаселенныйПунктДетально.Улица.Сокращение = НаименованиеСокращение.Сокращение;
			КонецЕсли;
			Если ЗначениеЗаполнено(ВыбранноеЗначение.ДополнительныйЭлемент) Тогда
				НаселенныйПунктДетально.ДополнительныйЭлемент.Представление = ВыбранноеЗначение.ДополнительныйЭлемент;
				НаименованиеСокращение= УправлениеКонтактнойИнформациейКлиентСервер.НаименованиеСокращение(ВыбранноеЗначение.ДополнительныйЭлемент);
				НаселенныйПунктДетально.ДополнительныйЭлемент.Наименование = НаименованиеСокращение.Наименование;
				НаселенныйПунктДетально.ДополнительныйЭлемент.Сокращение = НаименованиеСокращение.Сокращение;
			КонецЕсли;
			Если ЗначениеЗаполнено(ВыбранноеЗначение.ПодчиненныйЭлемент) Тогда
				НаселенныйПунктДетально.ПодчиненныйЭлемент.Представление = ВыбранноеЗначение.ПодчиненныйЭлемент;
				НаименованиеСокращение= УправлениеКонтактнойИнформациейКлиентСервер.НаименованиеСокращение(ВыбранноеЗначение.ПодчиненныйЭлемент);
				НаселенныйПунктДетально.ПодчиненныйЭлемент.Наименование = НаименованиеСокращение.Наименование;
				НаселенныйПунктДетально.ПодчиненныйЭлемент.Сокращение = НаименованиеСокращение.Сокращение;
			КонецЕсли;
		Улица = ВыбранноеЗначение.Представление;
		ИдентификаторУлицы = ВыбранноеЗначение.Идентификатор;
	Иначе
		// Иной источник, будет попытка разобрать.
		ИдентификаторУлицы = Неопределено;
	 	Улица = Строка(ВыбранноеЗначение);
	КонецЕсли;
	
	Элементы.Улица.ОбновитьТекстРедактирования();
	Контекст = КонтекстФормыКлиент();
	ОбработкаИзмененияУлицыСервер(Контекст);
	КонтекстФормыКлиент(Контекст);
	
КонецПроцедуры

&НаКлиенте
Процедура УлицаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	ДанныеВыбора = Новый СписокЗначений;
	Если Ожидание = 0 Тогда
		// Формирование списка быстрого выбора, стандартную обработку не надо трогать.
		Возврат;
	ИначеЕсли НедоступностьСервиса() Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.Улица.ЦветФона = АвтоЦвет;
	Если СтрДлина(Текст) < 3 Или Не ЗначениеЗаполнено(ИдентификаторНаселенногоПункта)Тогда 
		// Нет вариантов, список пуст, стандартную обработку не надо трогать.
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ФорматАдреса", ВидКонтактнойИнформации.ФорматАдреса);
	ДополнительныеПараметры.Вставить("СкрыватьНеактуальные",              СкрыватьНеактуальныеАдреса);
	
	ДанныеКлассификатора = СписокАвтоподбораУлицы(ИдентификаторНаселенногоПункта, Текст, ДополнительныеПараметры);
	ПроверитьДоступностьКлассификатора(ДанныеКлассификатора);
	Если ДанныеКлассификатора.Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеВыбора = ДанныеКлассификатора.Данные;
	
	// Стандартную обработку отключаем, только если есть наши варианты.
	Если ДанныеВыбора.Количество() > 0 Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УлицаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	// Выход из поля с текстом, измененным руками.
	Модифицированность = Истина;
	
	ДанныеВыбора = Новый СписокЗначений;
	ДанныеВыбора.Добавить(Текст);
	Улица = Текст;
	
	// Улица становится непроверенной.
	ИдентификаторУлицы = Неопределено;
	
	Контекст = КонтекстФормыКлиент();
	ОбработкаИзмененияУлицыСервер(Контекст);
	КонтекстФормыКлиент(Контекст);

КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеАдресаПриИзменении(Элемент)
	ПредставлениеАдресаИзменено = Истина;
	ПредставлениеАдресаПриИзмененииСервер();
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеИностранногоАдресаПриИзменении(Элемент)
	ПредставлениеАдресаИзменено = Истина;
	ПредставлениеАдресаПриИзмененииСервер();
КонецПроцедуры

&НаКлиенте
Процедура ДомАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(Текст) 
		И (ЗначениеЗаполнено(ЭтотОбъект.ИдентификаторНаселенногоПункта)
		ИЛИ ЗначениеЗаполнено(ЭтотОбъект.ИдентификаторУлицы)) Тогда
			Идентификатор = ?(ЗначениеЗаполнено(ИдентификаторУлицы), 
				ИдентификаторУлицы, ИдентификаторНаселенногоПункта);

			ДанныеВыбора = СписокАвтоподбораВариантовДомов(Идентификатор, Текст);
			Если ДанныеВыбора.Количество() > 0 Тогда
				СтандартнаяОбработка = Ложь;
			КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаОК(Команда)
	ПодтвердитьИЗакрыть();
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтмена(Команда)
	Модифицированность = Ложь;
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЗаполнениеАдреса(Команда)
	
	Если РазрешитьВводАдресаВСвободнойФорме Тогда
		ПоказатьПредупреждение(, НСтр("ru='Адрес не может быть проверен, так как он введен в свободной форме.'"));
		Возврат;
	КонецЕсли;

	ПредупреждатьОбОтсутствииОшибок = Истина;
	
	Контекст = КонтекстФормыКлиент();
	СписокОшибок = СписокОшибокЗаполнения(Контекст, ПредупреждатьОбОтсутствииОшибок);
	СообщитьОбОшибкахЗаполнения(СписокОшибок, ПредупреждатьОбОтсутствииОшибок);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьАдрес(Команда)
	
	ОчиститьАдресКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоПочтовомуИндексу(Команда)
	
	Если ЕстьКлассификатор И Не ПустаяСтрока(Индекс) Тогда
		ПараметрыФормы = Новый Структура("Индекс, СкрыватьНеактуальныеАдреса", СокрЛП(Индекс), СкрыватьНеактуальныеАдреса);
		ОткрытьФорму("Обработка.ВводКонтактнойИнформации.Форма.ВыборАдресаПоПочтовомуИндексу", ПараметрыФормы, Элементы.Индекс);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьКлассификатор(Команда)
	
	СведенияОРегионе = СведенияОРегионе(НаселенныйПунктДетально.Регион.Представление);
	ДополнительныеПараметры = Новый Структура("КодРегионаДляЗагрузки", СведенияОРегионе.КодСубъектаРФ);
	
	УправлениеКонтактнойИнформациейКлиент.ЗагрузитьАдресныйКлассификатор(ДополнительныеПараметры);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОбъект(Команда)
	Варианты = НеиспользованныеЭлементыДополнительнойТаблицы(ДополнительныеЗдания, Элементы.ТипСтроения, 1);
	Для Каждого ЭлементОбъект Из НеиспользованныеЭлементыДополнительнойТаблицы(ДополнительныеПомещения, Элементы.ТипПомещения, 2) Цикл
		ЗаполнитьЗначенияСвойств(Варианты.Добавить(), ЭлементОбъект);
	КонецЦикла;
	
	КоличествоВариантов = Варианты.Количество();
	Если КоличествоВариантов>0 Тогда
		ДополнительныеПараметры = Новый Структура("КоличествоВариантов", КоличествоВариантов);
		Оповещение = Новый ОписаниеОповещения("ДобавитьОбъектЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВыборИзМеню(Оповещение, Варианты, Элементы.ДобавитьОбъект);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВвестиАдресВСвободнойФорме(Команда)
	
	Если РазрешитьВводАдресаВСвободнойФорме Тогда
		ТекстВопроса = НСтр("ru='Изменения, введенные вручную, будут потеряны.
								|Исходный адрес будет перемещен в комментарий.
		                        |Продолжить?'");
	Иначе
		ТекстВопроса = НСтр("ru='Ввести адрес в свободной форме?
		                        |Адреса, введенные в свободной форме, могут не пройти проверку по адресному классификатору.'");
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ВвестиАдресВСвободнойФормеЗавершение", ЭтотОбъект);
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , , НСтр("ru='Подтверждение'"));
КонецПроцедуры

&НаКлиенте
Процедура АвторизацияНаСайтеПоддержкиПользователей(Команда)
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("АвторизацияНаСайтеПоддержкиПользователейЗавершение", ЭтотОбъект);
	СтандартныеПодсистемыКлиент.АвторизоватьНаСайтеПоддержкиПользователей(ЭтотОбъект, ОповещениеОЗакрытии);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура УстановитьПиктограммуКомментария()
	Элементы.АдресСтраницаКомментарий.Картинка = ОбщегоНазначенияКлиентСервер.КартинкаКомментария(Комментарий);
КонецПроцедуры

&НаКлиенте
Процедура ПодтвердитьИЗакрыть(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Модифицированность Тогда // При немодифицированности работает как "отмена".
		Контекст = КонтекстФормыКлиент();
		Результат = РезультатаВыбораПоОбновлениюФлагов(Контекст, ВозвращатьСписокЗначений);
		
		// Флаги вида были прочитаны заново.
		ВидКонтактнойИнформации = Контекст.ВидКонтактнойИнформации;
		
		Если ВидКонтактнойИнформации.ПроверятьКорректность
			И (Не РазрешитьВводАдресаВСвободнойФорме)
			И Результат.ОшибкиЗаполнения.Количество() > 0 Тогда
				СообщитьОбОшибкахЗаполнения(Результат.ОшибкиЗаполнения, Ложь);
					Возврат;
		КонецЕсли;
		
		Результат = Результат.ДанныеВыбора;
		
		СброситьМодифицированностьПриВыборе();
#Если ВебКлиент Тогда
		ФлагЗакрытия = ЗакрыватьПриВыборе;
		ЗакрыватьПриВыборе = Ложь;
		ОповеститьОВыборе(Результат);
		ЗакрыватьПриВыборе = ФлагЗакрытия;
#Иначе
		ОповеститьОВыборе(Результат);
#КонецЕсли
		СохранитьСостояниеФормы();
		
	ИначеЕсли Комментарий <> КопияКомментария Тогда
		// Изменен только комментарий, пробуем вернуть обновленное.
		Результат = РезультатВыбораТолькоКомментария(Параметры.ЗначенияПолей, Параметры.Представление, Комментарий);
		Результат = Результат.ДанныеВыбора;
		
		СброситьМодифицированностьПриВыборе();
#Если ВебКлиент Тогда
		ФлагЗакрытия = ЗакрыватьПриВыборе;
		ЗакрыватьПриВыборе = Ложь;
		ОповеститьОВыборе(Результат);
		ЗакрыватьПриВыборе = ФлагЗакрытия;
#Иначе
		ОповеститьОВыборе(Результат);
#КонецЕсли
		СохранитьСостояниеФормы();
		
	Иначе
		Результат = Неопределено;
	КонецЕсли;
	
	Если (МодальныйРежим Или ЗакрыватьПриВыборе) И Открыта() Тогда
		СброситьМодифицированностьПриВыборе();
		СохранитьСостояниеФормы();
		Закрыть(Результат);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СохранитьСостояниеФормы()
	УстановитьКлючИспользованияФормы();
	СохраняемыеВНастройкахДанныеМодифицированы = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОбъектЗавершение(Знач ВыбранныйЭлемент, Знач ДополнительныеПараметры) Экспорт
	Если ВыбранныйЭлемент=Неопределено Тогда
		// Отказ от выбора
		Возврат;
	КонецЕсли;
	
	Если ВыбранныйЭлемент.Значение=1 Тогда
		Строка = ДополнительныеЗдания.Добавить();
		
		Строка.Тип = ВыбранныйЭлемент.Представление;
		Строка.ПутьXPath = УправлениеКонтактнойИнформациейКлиентСервер.XPathНомераДополнительногоОбъектаАдресации(Строка.Тип);
		ИмяТекущего = ОтрисоватьДополнительныеЗдания();
	Иначе
		Строка = ДополнительныеПомещения.Добавить();
		
		Строка.Тип = ВыбранныйЭлемент.Представление;
		Строка.ПутьXPath = УправлениеКонтактнойИнформациейКлиентСервер.XPathНомераДополнительногоОбъектаАдресации(Строка.Тип);
		ИмяТекущего = ОтрисоватьДополнительныеПомещения();
	КонецЕсли;
	
	// Запрещаем добавлять больше чем есть вариантов.
	Элементы.ДобавитьОбъект.Доступность = ДополнительныеПараметры.КоличествоВариантов>1;
	
	Если ИмяТекущего<>Неопределено Тогда
		ТекущийЭлемент = Элементы[ИмяТекущего];
	КонецЕсли;
	
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ВвестиАдресВСвободнойФормеЗавершение(Знач РезультатВопроса, Знач ДополнительныеПараметры) Экспорт
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если РазрешитьВводАдресаВСвободнойФорме Тогда
		Комментарий = ?(НЕ ПустаяСтрока(Комментарий), Комментарий + Символы.ПС, "")
			+ НСтр("ru = 'Исходный адрес:'") + " " + ПредставлениеАдреса;
		ПодключитьОбработчикОжидания("УстановитьПиктограммуКомментария", 0.1, Истина);
	КонецЕсли;
	РазрешитьВводАдресаВСвободнойФорме = Не РазрешитьВводАдресаВСвободнойФорме;
	
	СписокСтран = УправлениеКонтактнойИнформациейКлиент.СтраныПоддерживающиеСтруктурированныйВвод();
	Если ЗначениеЗаполнено(СписокСтран[ВРег(Страна)]) Тогда
		// ЕАЭС
		Контекст = КонтекстФормыКлиент();
		ЗначениеРеквизитовПоКонтактнойИнформацииАдресИностранныйАдрес(ПредставлениеАдреса, Контекст);
		КонтекстФормыКлиент(Контекст);
	КонецЕсли;
	
	ОпределениеРежимаВводаАдреса();
	
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СброситьМодифицированностьПриВыборе()
	Модифицированность = Ложь;
	КопияКомментария   = Комментарий;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Если Не ПустаяСтрока(ТекстПредупрежденияПриОткрытии) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстПредупрежденияПриОткрытии, , ПолеПредупрежденияПриОткрытии);
		ТекстПредупрежденияПриОткрытии = "";
	КонецЕсли;
	
	Если Не ПустаяСтрока(ДоступностьКлассификатораАдрес) Тогда
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
			ОбновитьДоступностьКлассификатора(ЭтотОбъект);
		Иначе	
			ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 0.5, Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Если ОбщегоНазначенияКлиентСервер.РежимОтладки() Тогда
		ЗаданиеВыполненоУспешно = Истина;
	Иначе
		ЗаданиеВыполненоУспешно = ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	КонецЕсли;
	
	Возврат ЗаданиеВыполненоУспешно;
	
КонецФункции

&НаСервереБезКонтекста
Функция РезультатаВыбораПоОбновлениюФлагов(Контекст, ВозвращатьСписокЗначений = Ложь)
	// Обновляем некоторые флаги
	ЗначениеФлагов = УправлениеКонтактнойИнформациейСлужебный.СтруктураВидаКонтактнойИнформации(Контекст.ВидКонтактнойИнформации.Ссылка);
	
	Контекст.ВидКонтактнойИнформации.АдресТолькоРоссийский      = ЗначениеФлагов.АдресТолькоРоссийский;
	Контекст.ВидКонтактнойИнформации.ПроверятьКорректность      = ЗначениеФлагов.ПроверятьКорректность;

	Возврат РезультатВыбора(Контекст, ВозвращатьСписокЗначений);
КонецФункции

&НаСервереБезКонтекста
Функция РезультатВыбора(Контекст, ВозвращатьСписокЗначений = Ложь)
	XDTOИнформация = КонтактнаяИнформацияПоЗначениюРеквизитов(Контекст);
	Результат      = Новый Структура("ДанныеВыбора, ОшибкиЗаполнения");
	
	Если ВозвращатьСписокЗначений Тогда
		ДанныеВыбора = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияВСтаруюСтруктуру(XDTOИнформация);
		ДанныеВыбора = ДанныеВыбора.ЗначенияПолей;
	ИначеЕсли Контекст.Страна = Контекст.СтранаРоссия И ПустаяСтрока(XDTOИнформация.Представление) Тогда
		ДанныеВыбора = "";
	Иначе
		ДанныеВыбора = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияXDTOВXML(XDTOИнформация);
	КонецЕсли;
	
	Результат.ДанныеВыбора = Новый Структура;
	Результат.ДанныеВыбора.Вставить("КонтактнаяИнформация", ДанныеВыбора);
	Результат.ДанныеВыбора.Вставить("Представление", XDTOИнформация.Представление);
	Результат.ДанныеВыбора.Вставить("Комментарий", XDTOИнформация.Комментарий);
	Результат.ДанныеВыбора.Вставить("ВведеноВСвободнойФорме",
		УправлениеКонтактнойИнформациейСлужебный.АдресВведенВСвободнойФорме(XDTOИнформация));
	
	Результат.ОшибкиЗаполнения = УправлениеКонтактнойИнформациейСлужебный.ОшибкиЗаполненияАдресаXDTO(
		XDTOИнформация.Состав,
		Контекст.ВидКонтактнойИнформации);
	
	// Подавляем перенос строк в возвращаемом отдельно представлении.
	Результат.ДанныеВыбора.Представление = СокрЛП(СтрЗаменить(Результат.ДанныеВыбора.Представление, Символы.ПС, " "));
	
	Возврат Результат;
КонецФункции

&НаСервереБезКонтекста
Функция СписокОшибокЗаполнения(Контекст, ПредупреждатьОбОтсутствии)
	XDTOИнформация = КонтактнаяИнформацияПоЗначениюРеквизитов(Контекст);
	
	Если Контекст.ВидКонтактнойИнформации.ПроверятьКорректность Тогда
		ПараметрыПроверки = Контекст.ВидКонтактнойИнформации;
	Иначе
		ПараметрыПроверки = Новый Структура("ПроверятьПоФИАС", Истина);
	КонецЕсли;
	
	// Получаем список значений: XPath - текст ошибки.
	Результат = УправлениеКонтактнойИнформациейСлужебный.ОшибкиЗаполненияАдресаXDTO(
		XDTOИнформация.Состав, ПараметрыПроверки);
	
	Если Результат.Количество() = 0 // Нет ошибок
		И ПредупреждатьОбОтсутствии // Но надо предупредить об их отсутствии.
		// Дополнительно проверяем на пустоту.
		И (Не УправлениеКонтактнойИнформациейСлужебный.XDTOКонтактнаяИнформацияЗаполнена(XDTOИнформация)) Тогда
		Результат.Добавить("/", НСтр("ru = 'Адрес пуст.'"));
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

&НаСервере
Функция РезультатВыбораТолькоКомментария(КонтактнаяИнфо, Представление, Комментарий)
	
	Если ПустаяСтрока(КонтактнаяИнфо) Тогда
		НоваяКонтактная = УправлениеКонтактнойИнформациейСлужебный.АдресXMLВXDTO("");
		НоваяКонтактная.Комментарий = Комментарий;
		НоваяКонтактная = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияXDTOВXML(НоваяКонтактная);
		АдресВведенВСвободнойФорме = Ложь;
		
	ИначеЕсли УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(КонтактнаяИнфо) Тогда
		// Копия
		НоваяКонтактная = КонтактнаяИнфо;
		// Модифицируем значение "НоваяКонтактная".
		УправлениеКонтактнойИнформацией.УстановитьКомментарийКонтактнойИнформации(НоваяКонтактная, Комментарий);
		АдресВведенВСвободнойФорме = УправлениеКонтактнойИнформациейСлужебный.АдресВведенВСвободнойФорме(КонтактнаяИнфо);
		
	Иначе
		НоваяКонтактная = КонтактнаяИнфо;
		АдресВведенВСвободнойФорме = Ложь;
	КонецЕсли;
	
	Результат = Новый Структура("ДанныеВыбора, ОшибкиЗаполнения", Новый Структура, Новый СписокЗначений);
	Результат.ДанныеВыбора.Вставить("КонтактнаяИнформация", НоваяКонтактная);
	Результат.ДанныеВыбора.Вставить("Представление", Представление);
	Результат.ДанныеВыбора.Вставить("Комментарий", Комментарий);
	Результат.ДанныеВыбора.Вставить("ВведеноВСвободнойФорме", АдресВведенВСвободнойФорме);
	Возврат Результат;
КонецФункции

&НаСервереБезКонтекста
Процедура ОбработкаИзмененияНаселенногоПунктаСервер(Контекст, ПереформироватьДетально = Истина)
	
	Если Не ЗначениеЗаполнено(Контекст.ИдентификаторНаселенногоПункта) Тогда
		// Данные вводились вручную, пробуем разбор введенной строки.
		Адрес = НаселенныеПунктыПоПредставлению(Контекст.НаселенныйПункт, Контекст.СкрыватьНеактуальныеАдреса);
		
		ЗаполнитьКонтекстПоXDTOАдреса(Адрес, Контекст, УровниНаселенногоПункта());
		Контекст.ИдентификаторНаселенногоПункта = УправлениеКонтактнойИнформациейСлужебный.ИдентификаторНаселенногоПунктаПоЧастямАдреса(Контекст.НаселенныйПунктДетально);
		ПереформироватьДетально = Ложь;
	КонецЕсли;
	
	// Населенный пункт, разбитый по частям.
	Если ПереформироватьДетально Тогда
		СформироватьДетальныйНаселенныйПункт(Контекст);
	КонецЕсли;
	
	// Перепроверяем улицу, индекс и представление обновятся там.
	ОбработкаИзмененияУлицыСервер(Контекст);

КонецПроцедуры

&НаСервереБезКонтекста
Функция УровниНаселенногоПункта()
	Уровни = Новый Массив;
	Уровни.Добавить(1);
	Уровни.Добавить(2);
	Уровни.Добавить(3);
	Уровни.Добавить(4);
	Уровни.Добавить(5);
	Уровни.Добавить(6);

	Возврат Уровни;
КонецФункции

&НаСервереБезКонтекста
Процедура ОбработкаИзмененияУлицыСервер(Контекст)
	
	// Очистка записей по улице
	Контекст.НаселенныйПунктДетально.Улица.Представление = Неопределено;
	Контекст.НаселенныйПунктДетально.Улица.Идентификатор = Неопределено;
	Контекст.НаселенныйПунктДетально.ДополнительныйЭлемент.Представление = Неопределено;
	Контекст.НаселенныйПунктДетально.ДополнительныйЭлемент.Идентификатор = Неопределено;
	Контекст.НаселенныйПунктДетально.ПодчиненныйЭлемент.Представление = Неопределено;
	Контекст.НаселенныйПунктДетально.ПодчиненныйЭлемент.Идентификатор = Неопределено;
	
	// Данные вводились вручную, пробуем разбор введенной строки.
	АнализКлассификатора = УлицыПоПредставлению(Контекст.ИдентификаторНаселенногоПункта, Контекст.Улица, Контекст.СкрыватьНеактуальныеАдреса);
	Если АнализКлассификатора <> Неопределено Тогда 
		Для Каждого ЧастьАдреса Из АнализКлассификатора Цикл
			Если ЧастьАдреса.Уровень = 7 Тогда
				Контекст.НаселенныйПунктДетально.Улица.Представление = ЧастьАдреса.Значение;
				Контекст.НаселенныйПунктДетально.Улица.Идентификатор = ЧастьАдреса.Идентификатор;
			ИначеЕсли ЧастьАдреса.Уровень = 90 Тогда
				Контекст.НаселенныйПунктДетально.ДополнительныйЭлемент.Представление = ЧастьАдреса.Значение;
				Контекст.НаселенныйПунктДетально.ДополнительныйЭлемент.Идентификатор = ЧастьАдреса.Идентификатор;
				ПутьXPath = УправлениеКонтактнойИнформациейКлиентСервер.XPathДополнительногоОбъектаАдресации(90, Контекст.НаселенныйПунктДетально.ДополнительныйЭлемент.Сокращение);
				Контекст.НаселенныйПунктДетально.ДополнительныйЭлемент.ПутьXPath = ПутьXPath;
			ИначеЕсли ЧастьАдреса.Уровень = 91 Тогда
				Контекст.НаселенныйПунктДетально.ПодчиненныйЭлемент.Представление = ЧастьАдреса.Значение;
				Контекст.НаселенныйПунктДетально.ПодчиненныйЭлемент.Идентификатор = ЧастьАдреса.Идентификатор;
				ПутьXPath = УправлениеКонтактнойИнформациейКлиентСервер.XPathДополнительногоОбъектаАдресации(91, Контекст.НаселенныйПунктДетально.ДополнительныйЭлемент.Сокращение);
				Контекст.НаселенныйПунктДетально.ПодчиненныйЭлемент.ПутьXPath = ПутьXPath;
			Иначе
				Контекст.НаселенныйПунктДетально.Улица.Представление = ЧастьАдреса.Значение;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		Контекст.НаселенныйПунктДетально.Улица.Представление = Контекст.Улица;
	КонецЕсли;
	
	// Перепроверяем дом, индекс и представление обновятся там.
	ОбновитьИндексИПредставление(Контекст);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаИзмененияСтраныКлиент()
	
	ЭтоРоссийскийАдрес = (Страна = СтранаРоссия);
	Элементы.ТипАдреса.ТекущаяСтраница = ?(ЭтоРоссийскийАдрес, Элементы.РоссийскийАдрес, Элементы.ИностранныйАдрес);
	
	// Проверять, вводить в свободной форме и искать по индексу можем только российские адреса.
	Элементы.ПроверитьЗаполнениеАдреса.Доступность   = ЭтоРоссийскийАдрес;
	Элементы.ЗаполнитьПоПочтовомуИндексу.Доступность            = ЭтоРоссийскийАдрес;
	Элементы.ЗаполнитьПоПочтовомуИндексуВсеДействия.Доступность = ЭтоРоссийскийАдрес;
	
	ОпределениеРежимаВводаАдреса();
	
КонецПроцедуры

&НаКлиенте
Процедура ОпределениеРежимаВводаАдреса()
	
	Если Страна = СтранаРоссия Тогда
		// РОССИЯ. Загружать можем только российские адреса.
		Элементы.ВвестиАдресВСвободнойФорме.Доступность = Истина;
		Элементы.ВвестиАдресВСвободнойФормеВсеДействия.Доступность  = Истина;
		Если МожноЗагружатьКлассификатор Тогда
			КнопкаПанели = Элементы.Найти("ЗагрузитьКлассификатор");
			Если КнопкаПанели <> Неопределено Тогда
				Элементы.ЗагрузитьКлассификатор.Доступность = Истина;
			КонецЕсли;
		КонецЕсли;
	Иначе
		СписокСтран = УправлениеКонтактнойИнформациейКлиент.СтраныПоддерживающиеСтруктурированныйВвод();
		Если СписокСтран[ВРег(Страна)] <> Истина Тогда
			// Прочие страны
			Элементы.ВвестиАдресВСвободнойФорме.Доступность = Ложь;
			Элементы.ВвестиАдресВСвободнойФормеВсеДействия.Доступность  = Ложь;
			Элементы.СтруктураИностранныйАдреса.Видимость = Ложь;
			Элементы.ГруппаИндекса.Видимость = Ложь;
			РазрешитьВводАдресаВСвободнойФорме = Истина;
		Иначе
			// Страны ЕАЭС
			Элементы.ВвестиАдресВСвободнойФорме.Доступность = Истина;
			Элементы.ВвестиАдресВСвободнойФормеВсеДействия.Доступность  = Истина;
			Если РазрешитьВводАдресаВСвободнойФорме Тогда
				Элементы.СтруктураИностранныйАдреса.Видимость = Ложь;
				Элементы.ГруппаИндекса.Видимость = Ложь;
			Иначе
				Элементы.СтруктураИностранныйАдреса.Видимость = Истина;
				Элементы.ГруппаИндекса.Видимость = Истина;
			КонецЕсли;
		КонецЕсли;
		Если ВидКонтактнойИнформации.ВключатьСтрануВПредставление Тогда
			ПозицияСтрана = СтрНайти(ПредставлениеАдреса, ",");
			Если ПозицияСтрана > 0 Тогда
				ПредставлениеАдреса = ВРег(Страна) + Сред(ПредставлениеАдреса, ПозицияСтрана);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	СостояниеВводаПредставленияАдреса(РазрешитьВводАдресаВСвободнойФорме);
КонецПроцедуры

&НаСервере
Процедура УстановитьСписокВыбораЭлемента(ЭлементВид, ЭлементЗначение, Данные)
	ЭлементЗначение.КнопкаВыпадающегоСписка = Данные.МожноПодбиратьЗначения;
	
	СписокТипов = Данные.ВариантыТипа;
	ЭлементВид.КнопкаВыпадающегоСписка = СписокТипов.Количество() > 0;
	Если ЭлементВид.КнопкаВыпадающегоСписка Тогда
		ЭлементВид.СписокВыбора.ЗагрузитьЗначения(СписокТипов);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбновитьИндексИПредставление(Контекст, XDTOКонтактная = Неопределено)
	
	Инфо = ?(XDTOКонтактная = Неопределено, КонтактнаяИнформацияПоЗначениюРеквизитов(Контекст), XDTOКонтактная);
	
	Если Контекст.Страна = Контекст.СтранаРоссия Тогда
		УстановитьЗначениеИндекса(Контекст, Инфо);
	КонецЕсли;
	ЗаполнитьПредставлениеАдреса(Контекст, Инфо);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьЗначениеИндекса(Контекст, XDTOКонтактная = Неопределено)
	
	Инфо = ?(XDTOКонтактная = Неопределено, КонтактнаяИнформацияПоЗначениюРеквизитов(Контекст), XDTOКонтактная);
	
	Адрес = Инфо.Состав;
	
	Идентификатор = НайтиИдентификаторАдресаПоИерархии(Контекст.НаселенныйПунктДетально);
	ИндексИОКМТОПоКлассификатору = УправлениеКонтактнойИнформациейСлужебный.ОпределитьПочтовыйИндексИОКТМОАдреса(Адрес, Идентификатор);
	
	Если ЗначениеЗаполнено(ИндексИОКМТОПоКлассификатору.Индекс) Тогда
		Контекст.Индекс = Формат(ИндексИОКМТОПоКлассификатору.Индекс, "ЧЦ=6; ЧРГ=; ЧГ=0");
	КонецЕсли;
	Если ЗначениеЗаполнено(ИндексИОКМТОПоКлассификатору.ОКТМО) Тогда
		Контекст.ОКТМО = Формат(ИндексИОКМТОПоКлассификатору.ОКТМО, "ЧЦ=11; ЧРГ=; ЧГ=0");
	КонецЕсли;
	УправлениеКонтактнойИнформациейСлужебный.ПочтовыйИндексАдреса(Адрес, Контекст.Индекс);
	XDTOКонтактная.Представление = УправлениеКонтактнойИнформациейСлужебный.ПредставлениеАдреса(Адрес, Контекст.ВидКонтактнойИнформации);
КонецПроцедуры

&НаСервереБезКонтекста
Функция НайтиИдентификаторАдресаПоИерархии(НаселенныйПунктДетально)
	
	Идентификатор = Неопределено;
	УровеньИдентификатора = 0;
	Для каждого УровеньАдреса Из НаселенныйПунктДетально Цикл
		Если ЗначениеЗаполнено(УровеньАдреса.Значение.Идентификатор) И УровеньИдентификатора < УровеньАдреса.Значение.Уровень Тогда
			Идентификатор = УровеньАдреса.Значение.Идентификатор;
			УровеньИдентификатора = УровеньАдреса.Значение.Уровень;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ?(ЗначениеЗаполнено(Идентификатор), Новый УникальныйИдентификатор(Идентификатор), Неопределено);
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаполнитьПредставлениеАдреса(Контекст, XDTOКонтактная = Неопределено)
	
	// Код страны ставим всегда
	Если ТипЗнч(Контекст.Страна) = Тип("СправочникСсылка.СтраныМира") Тогда
		Контекст.КодСтраны = Контекст.Страна.Код
	Иначе
		Контекст.КодСтраны = "";
	КонецЕсли;
	
	Если Контекст.РазрешитьВводАдресаВСвободнойФорме И Контекст.ПредставлениеАдресаИзменено Тогда
		Возврат;
	КонецЕсли;
		
	Инфо = ?(XDTOКонтактная = Неопределено, КонтактнаяИнформацияПоЗначениюРеквизитов(Контекст), XDTOКонтактная);
	Контекст.ПредставлениеАдреса = Инфо.Представление;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗначениеРеквизитовПоКонтактнойИнформации(Контекст, РедактируемаяИнформация)
	
	ДанныеАдреса = РедактируемаяИнформация.Состав;
	
	// Общие реквизиты
	Контекст.ПредставлениеАдреса = РедактируемаяИнформация.Представление;
	Контекст.Комментарий         = РедактируемаяИнформация.Комментарий;
	
	// Копия комментария для анализа измененности.
	Контекст.КопияКомментария = Контекст.Комментарий;
	
	// Страна по наименованию
	НаименованиеСтраны = СокрЛП(ДанныеАдреса.Страна);
	Если ПустаяСтрока(НаименованиеСтраны) Тогда
		Контекст.Страна = Справочники.СтраныМира.ПустаяСсылка();
	Иначе
		СсылкаНаРоссию = Справочники.СтраныМира.Россия;
		Если ВРЕГ(НаименованиеСтраны) = ВРЕГ(СокрЛП(СсылкаНаРоссию.Наименование)) Тогда
			Контекст.Страна    = СсылкаНаРоссию;
			Контекст.КодСтраны = СсылкаНаРоссию.Код;
		Иначе
			ДанныеСтраны = Справочники.СтраныМира.ДанныеСтраныМира(, НаименованиеСтраны);
			Если ДанныеСтраны = Неопределено Тогда
				// Не нашли ни в справочнике, ни в классификаторе.
				Контекст.Страна    = Неопределено;
				Контекст.КодСтраны = Неопределено;
			Иначе
				Контекст.Страна    = ДанныеСтраны.Ссылка;
				Контекст.КодСтраны = ДанныеСтраны.Код;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ВычисленноеПредставление = УправлениеКонтактнойИнформациейСлужебный.СформироватьПредставлениеКонтактнойИнформации(
		РедактируемаяИнформация, Контекст.ВидКонтактнойИнформации);
		
	Если УправлениеКонтактнойИнформациейСлужебный.ЭтоРоссийскийАдрес(ДанныеАдреса) Тогда
		Контекст.РазрешитьВводАдресаВСвободнойФорме = Не ПустаяСтрока(ДанныеАдреса.Состав.Адрес_по_документу);
		
		// Дополнительно проверяем случай, когда представление по документу равно вычисленному.
		Если Контекст.РазрешитьВводАдресаВСвободнойФорме Тогда
			Если ПредставленияАдресаОдинаковы(ВычисленноеПредставление, ДанныеАдреса.Состав.Адрес_по_документу, Истина) 
				И ПредставленияАдресаОдинаковы(РедактируемаяИнформация.Представление, ДанныеАдреса.Состав.Адрес_по_документу, Истина) Тогда
				Контекст.РазрешитьВводАдресаВСвободнойФорме = Ложь;
				ДанныеАдреса.Состав.Адрес_по_документу      = "";
			КонецЕсли;
		КонецЕсли;
		
		Если Контекст.РазрешитьВводАдресаВСвободнойФорме Тогда
			Контекст.ПредставлениеАдреса = ДанныеАдреса.Состав.Адрес_по_документу;
		КонецЕсли;
		
		Контекст.ОКТМО = Формат(ДанныеАдреса.Состав.ОКТМО, "ЧРГ=''; ЧН=-; ЧГ=0");
		ЗначениеРеквизитовПоКонтактнойИнформацииАдресРФ(ДанныеАдреса, Контекст);
	Иначе
		Адрес = Строка(ДанныеАдреса.Состав);
		Контекст.НаселенныйПунктДетально = УправлениеКонтактнойИнформациейКлиентСервер.СтруктураЧастейАдресаНаселенногоПункта("ФИАС");
		Если ЗначениеЗаполнено(Адрес) И СтрЧислоВхождений(Адрес, ",") = 9 Тогда
			ЗначениеРеквизитовПоКонтактнойИнформацииАдресИностранныйАдрес(Адрес, Контекст);
			Контекст.РазрешитьВводАдресаВСвободнойФорме = Ложь;
		Иначе
			Контекст.РазрешитьВводАдресаВСвободнойФорме = Истина;
		КонецЕсли;
		Контекст.ПредставлениеАдреса = ВычисленноеПредставление;

	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗначениеРеквизитовПоКонтактнойИнформацииАдресИностранныйАдрес(Адрес, Контекст)
	
	Если НЕ СтрНачинаетсяС(ВРег(Адрес), ВРег(Контекст.Страна)) Тогда
		Адрес = ВРег(Контекст.Страна) + "," + Адрес;
	КонецЕсли;
	
	СтруктураАдрес = УправлениеКонтактнойИнформациейСлужебный.РазложитьАдресВСтруктуру(Адрес);
	
	Контекст.НаселенныйПунктДетально.Регион.Представление = СтруктураАдрес.Регион;
	Контекст.НаселенныйПунктДетально.Район.Представление = СтруктураАдрес.Район;
	Контекст.НаселенныйПунктДетально.Город.Представление = СтруктураАдрес.Город;
	Контекст.НаселенныйПунктДетально.НаселенныйПункт.Представление = СтруктураАдрес.НаселенныйПункт;
	
	НаселенныйПункт = "";
	НаселенныйПункт = ?(ЗначениеЗаполнено(СтруктураАдрес.НаселенныйПункт), СтруктураАдрес.НаселенныйПункт  + ", ","");
	НаселенныйПункт = НаселенныйПункт + ?(ЗначениеЗаполнено(СтруктураАдрес.Город), СтруктураАдрес.Город + ", ","");
	НаселенныйПункт = НаселенныйПункт + ?(ЗначениеЗаполнено(СтруктураАдрес.Район), СтруктураАдрес.Район + ", ","");
	НаселенныйПункт = НаселенныйПункт + ?(ЗначениеЗаполнено(СтруктураАдрес.Регион), СтруктураАдрес.Регион + ", ","");
	
	Если СтрДлина(НаселенныйПункт) > 2 И СтрЗаканчиваетсяНа(НаселенныйПункт, ", ") Тогда
		НаселенныйПункт = Лев(НаселенныйПункт, СтрДлина(НаселенныйПункт) - 2);
	КонецЕсли;
	
	Контекст.Индекс = СтруктураАдрес.Индекс;
	Контекст.НаселенныйПункт = НаселенныйПункт;
	Контекст.Улица = СтруктураАдрес.Улица;
	
	Если Не ПустаяСтрока(СтруктураАдрес.Дом) Тогда
		ЗданиеИНомер = НаименованиеЗданияИЕгоНомер(СтруктураАдрес.Дом);
		Контекст.ТипДома = ЗданиеИНомер.Здание;
		Контекст.Дом = ЗданиеИНомер.Номер;
	КонецЕсли;
	
	Если Не ПустаяСтрока(СтруктураАдрес.Корпус) Тогда
		ЗданиеИНомер = НаименованиеЗданияИЕгоНомер(СтруктураАдрес.Корпус);
		Контекст.ТипСтроения = ЗданиеИНомер.Здание;
		Контекст.Строение = ЗданиеИНомер.Номер;
	КонецЕсли;
	
	Если Не ПустаяСтрока(СтруктураАдрес.Квартира) Тогда
		ЗданиеИНомер = НаименованиеЗданияИЕгоНомер(СтруктураАдрес.Квартира);
		Контекст.ТипПомещения = ЗданиеИНомер.Здание;
		Контекст.Помещение = ЗданиеИНомер.Номер;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НаименованиеЗданияИЕгоНомер(Название)
	ТекстПоиска = СокрЛП(Название);
	
	Позиция = СтрНайти(ТекстПоиска, " ");
	
	Результат = Новый Структура("Здание, Номер");
	Если Позиция > 0 Тогда
		Результат.Здание = Лев(ТекстПоиска, Позиция - 1);
		Результат.Номер = СокрЛ(Сред(ТекстПоиска, Позиция + 1));
	Иначе
		Результат.Здание = ТекстПоиска;
		Результат.Номер = "";
	КонецЕсли;
	
	Возврат Результат;
КонецФункции


&НаСервереБезКонтекста
Процедура ЗначениеРеквизитовПоКонтактнойИнформацииАдресРФ(ДанныеАдреса, Контекст)
	
	// Индекс просто ставим
	Контекст.Индекс = Формат(УправлениеКонтактнойИнформациейСлужебный.ПочтовыйИндексАдреса(ДанныеАдреса), "ЧГ=");
	
	// Синтетический "Населенный пункт" получаем как представление.
	Контекст.НаселенныйПункт = УправлениеКонтактнойИнформациейСлужебный.ПредставлениеНаселенногоПункта(ДанныеАдреса);
	Контекст.Улица = УправлениеКонтактнойИнформациейСлужебный.ПредставлениеУлицы(ДанныеАдреса);
	
	СформироватьДетальныйНаселенныйПункт(Контекст, ДанныеАдреса);
	
	// Дом, строение, помещение
	ЗданияИПомещения = УправлениеКонтактнойИнформациейСлужебный.ЗданияИПомещенияАдреса(ДанныеАдреса);
	
	// Первые два здания выделяем отдельно, остальное в списке.
	ТаблицаДанных = ЗданияИПомещения.Здания;
	
	// Вид = 1 - признак дома, владения. Вид = 2, доп строение.
	СтрокаДома = ТаблицаДанных.Найти(1, "Вид");
	Если СтрокаДома <> Неопределено Тогда
		Контекст.ТипДома = СтрокаДома.Тип;
		Контекст.Дом     = СтрокаДома.Значение;
		ТаблицаДанных.Удалить(СтрокаДома);
	КонецЕсли;
	
	СтрокаДома = ТаблицаДанных.Найти(2, "Вид");
	Если СтрокаДома<>Неопределено Тогда
		Контекст.ТипСтроения = СтрокаДома.Тип;
		Контекст.Строение    = СтрокаДома.Значение;
		ТаблицаДанных.Удалить(СтрокаДома);
	КонецЕсли;
	
	НомерСтроки  = ТаблицаДанных.Количество();
	Пока НомерСтроки > 0 Цикл
		НомерСтроки = НомерСтроки - 1;
		ЗаполнитьЗначенияСвойств(Контекст.ДополнительныеЗдания.Вставить(0), ТаблицаДанных[НомерСтроки]);
	КонецЦикла;
	
	// Первое помещение указываем отдельно, остальные в списке.
	ТаблицаДанных = ЗданияИПомещения.Помещения;
	НомерСтроки   = ТаблицаДанных.Количество();
	Если НомерСтроки > 0 Тогда
		Контекст.ТипПомещения = ТаблицаДанных[0].Тип;
		Контекст.Помещение    = ТаблицаДанных[0].Значение;
	КонецЕсли;
	Пока НомерСтроки > 1 Цикл
		НомерСтроки = НомерСтроки - 1;
		ЗаполнитьЗначенияСвойств(Контекст.ДополнительныеПомещения.Вставить(0), ТаблицаДанных[НомерСтроки]);
	КонецЦикла;

КонецПроцедуры

&НаСервереБезКонтекста
Функция КонтактнаяИнформацияПоЗначениюРеквизитов(Контекст)
	ПространствоИмен = УправлениеКонтактнойИнформациейКлиентСервер.ПространствоИмен();
	
	Результат = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "КонтактнаяИнформация"));
	Результат.Комментарий = Контекст.Комментарий;
	
	Результат.Состав = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "Адрес"));
	Адрес = Результат.Состав;
	
	Адрес.Страна = Строка(Контекст.Страна);
	Если ВРег(Контекст.Страна) <> ВРег(Контекст.СтранаРоссия.Наименование) Тогда
		Если Контекст.РазрешитьВводАдресаВСвободнойФорме Тогда
			Результат.Представление = Контекст.ПредставлениеАдреса;
			Если Контекст.ВидКонтактнойИнформации.ВключатьСтрануВПредставление
				 И СтрНачинаетсяС(ВРЕГ(Контекст.ПредставлениеАдреса), ВРег(Контекст.Страна)) Тогда
					Адрес.Состав = Сред(Контекст.ПредставлениеАдреса, СтрДлина(Контекст.Страна) + 2);
			Иначе
				Адрес.Состав = Контекст.ПредставлениеАдреса;
			КонецЕсли;
		Иначе
			НаселенныйПункт = Строка(Контекст.НаселенныйПунктДетально.Регион.Представление) + "," + Строка(Контекст.НаселенныйПунктДетально.Район.Представление)
			+ "," + Строка(Контекст.НаселенныйПунктДетально.Город.Представление) + "," + Строка(Контекст.НаселенныйПунктДетально.НаселенныйПункт.Представление);
			Строка9Запятых = Контекст.Страна.Наименование + "," + Контекст.Индекс + "," + НаселенныйПункт + "," + Контекст.Улица + ",";
			Строка9Запятых = Строка9Запятых + ?(ЗначениеЗаполнено(Контекст.Дом), Контекст.ТипДома + " " +Контекст.Дом, "") + ",";
			Строка9Запятых = Строка9Запятых + ?(ЗначениеЗаполнено(Контекст.Строение), Контекст.ТипСтроения + " " + Контекст.Строение, "") + ",";
			Строка9Запятых = Строка9Запятых + ?(ЗначениеЗаполнено(Контекст.Помещение), Контекст.ТипПомещения + " " + Контекст.Помещение, "");
			Адрес.Состав = Строка9Запятых;
			Результат.Представление = УправлениеКонтактнойИнформациейСлужебный.ПредставлениеАдреса(Адрес, Контекст.ВидКонтактнойИнформации);
		КонецЕсли;
		Возврат Результат;
	КонецЕсли;
	
	Адрес.Состав = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "АдресРФ"));
	АдресРФ = Адрес.Состав;
	ЗаполненныеЧастиАдреса = Новый СписокЗначений;
	Если Контекст.НаселенныйПунктДетально <> Неопределено Тогда
		Для Каждого КлючЗначение Из Контекст.НаселенныйПунктДетально Цикл
			ЧастьПункта = КлючЗначение.Значение;
			Если Не ПустаяСтрока(ЧастьПункта.Представление) Тогда
				НетДетальныхДанных = Ложь;
				ЗаполненныеЧастиАдреса.Добавить(ЧастьПункта.Уровень, ЧастьПункта.Представление);
			КонецЕсли;
			ПутьXPath = ЧастьПункта.ПутьXPath;
			УправлениеКонтактнойИнформациейСлужебный.УстановитьXDTOРеквизитОбъекта(АдресРФ, ПутьXPath, ЧастьПункта.Представление);
		КонецЦикла;
	КонецЕсли;
	
	// Здания и помещения
	ТипТаблицаЗначений = Тип("ТаблицаЗначений");
	Если ТипЗнч(Контекст.ДополнительныеЗдания)=ТипТаблицаЗначений Тогда
		ТаблицаЗданий = Контекст.ДополнительныеЗдания.Скопировать();
	Иначе
		ТаблицаЗданий = ДанныеФормыВЗначение(Контекст.ДополнительныеЗдания, ТипТаблицаЗначений);
	КонецЕсли;
	
	Если Не ПустаяСтрока(Контекст.Дом) Тогда
		СтрокаЗдания = ТаблицаЗданий.Вставить(0);
		СтрокаЗдания.Тип      = Контекст.ТипДома;
		СтрокаЗдания.Значение = Контекст.Дом;
	КонецЕсли;
	
	Если Не ПустаяСтрока(Контекст.Строение) Тогда
		СтрокаЗдания = ТаблицаЗданий.Вставить(0);
		СтрокаЗдания.Тип      = Контекст.ТипСтроения;
		СтрокаЗдания.Значение = Контекст.Строение;
	КонецЕсли;
	
	Если ТипЗнч(Контекст.ДополнительныеПомещения)=ТипТаблицаЗначений Тогда
		ТаблицаПомещений = Контекст.ДополнительныеПомещения.Скопировать();
	Иначе
		ТаблицаПомещений = ДанныеФормыВЗначение(Контекст.ДополнительныеПомещения, ТипТаблицаЗначений);
	КонецЕсли;
	
	Если Не ПустаяСтрока(Контекст.Помещение) Тогда
		СтрокаЗдания = ТаблицаЗданий.Вставить(0);
		СтрокаЗдания.Тип      = Контекст.ТипПомещения;
		СтрокаЗдания.Значение = Контекст.Помещение;
	КонецЕсли;
	
	УправлениеКонтактнойИнформациейСлужебный.ЗданияИПомещенияАдреса(АдресРФ, 
		Новый Структура("Здания, Помещения", ТаблицаЗданий, ТаблицаПомещений));
	
	// Индекс
	УправлениеКонтактнойИнформациейСлужебный.ПочтовыйИндексАдреса(АдресРФ, Контекст.Индекс);
	
	// ОКТМО
	ОписаниеЧисло = Новый ОписаниеТипов("Число");
	УправлениеКонтактнойИнформациейСлужебный.УстановитьXDTOРеквизитОбъекта(АдресРФ, "ОКТМО", ОписаниеЧисло.ПривестиЗначение(Контекст.ОКТМО));
	
	//
	Если НЕ ПустаяСтрока( Контекст.ДополнительныйЭлемент) Тогда 
		УправлениеКонтактнойИнформациейСлужебный.ДобавитьДополнительныеЭлементыАдреса(АдресРФ, Контекст.ДополнительныйЭлемент, 90);
	КонецЕсли;
	Если НЕ ПустаяСтрока(Контекст.ПодчиненныйЭлемент) Тогда 
		УправлениеКонтактнойИнформациейСлужебный.ДобавитьДополнительныеЭлементыАдреса(АдресРФ, Контекст.ПодчиненныйЭлемент, 91);
	КонецЕсли;
	
	// Представление и свободный ввод адреса.
	РасчетноеПредставление = УправлениеКонтактнойИнформациейСлужебный.ПредставлениеАдреса(Адрес, Контекст.ВидКонтактнойИнформации);
	ВведенноеПредставление = СокрЛП(Контекст.ПредставлениеАдреса);
	Если Контекст.РазрешитьВводАдресаВСвободнойФорме И Контекст.ПредставлениеАдресаИзменено Тогда
		Если ПредставленияАдресаОдинаковы(ВведенноеПредставление, РасчетноеПредставление) Тогда
			Результат.Представление = РасчетноеПредставление;
			АдресРФ.Сбросить("Адрес_по_документу");
		Иначе
			Результат.Представление    = ВведенноеПредставление;
			АдресРФ.Адрес_по_документу = ВведенноеПредставление;
		КонецЕсли;
	Иначе
		АдресРФ.Сбросить("Адрес_по_документу");
		Результат.Представление = РасчетноеПредставление;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Перезаполняет структуру "НаселенныйПунктДетально" по текущим данным адреса или по данным реквизитов формы.
//
&НаСервереБезКонтекста
Процедура СформироватьДетальныйНаселенныйПункт(Контекст, XDTOДанныеАдреса = Неопределено)
	
	Если XDTOДанныеАдреса = Неопределено И ЗначениеЗаполнено(Контекст.ИдентификаторНаселенногоПункта) Тогда
		// Перезаполняем
		Контекст.НаселенныйПунктДетально = УправлениеКонтактнойИнформациейСлужебный.СписокРеквизитовНаселенныйПункт(
			Контекст.ИдентификаторНаселенногоПункта,
			Контекст.ВидКонтактнойИнформации.ФорматАдреса);
		Возврат;
		
	ИначеЕсли ТипЗнч(XDTOДанныеАдреса) = Тип("Строка") Тогда
		// Попытка разбора
		АнализКлассификатора = НаселенныеПунктыПоПредставлению(XDTOДанныеАдреса, Контекст.СкрыватьНеактуальныеАдреса);
		Если АнализКлассификатора.ДанныеВыбора.Количество()=1 Тогда
			Вариант = АнализКлассификатора.ДанныеВыбора[0].Значение.Значение;
			Контекст.НаселенныйПунктДетально = УправлениеКонтактнойИнформациейСлужебный.СписокРеквизитовНаселенныйПункт(
				Вариант.Код,
				Контекст.ВидКонтактнойИнформации.ФорматАдреса);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Контекст.НаселенныйПунктДетально) Тогда
		Контекст.НаселенныйПунктДетально =  УправлениеКонтактнойИнформациейСлужебный.СписокРеквизитовНаселенныйПункт(, 
			Контекст.ВидКонтактнойИнформации.ФорматАдреса);
	КонецЕсли;
	
	Если XDTOДанныеАдреса = Неопределено Тогда
		
		// Из реквизитов формы все идет в предопределенный детальный пункт.
		Для Каждого КлючЗначение Из Контекст.НаселенныйПунктДетально Цикл
			Значение = КлючЗначение.Значение;
			Если Значение.Предопределенный Тогда
				Значение.Представление = Контекст.НаселенныйПункт;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Возврат;
	КонецЕсли;
	
	ЗаполнитьКонтекстПоXDTOАдреса(XDTOДанныеАдреса, Контекст);

	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьКонтекстПоXDTOАдреса(XDTOДанныеАдреса, Контекст, Уровни = Неопределено)
	
	// Из переданного XDTO
	АдресРФ = УправлениеКонтактнойИнформациейСлужебный.РоссийскийАдрес(XDTOДанныеАдреса);
	Если АдресРФ <> Неопределено Тогда
		
		Для Каждого КлючЗначение Из Контекст.НаселенныйПунктДетально Цикл
			Значение = КлючЗначение.Значение;
			
			Если Уровни = Неопределено ИЛИ Уровни.Найти(Значение.Уровень) <> Неопределено Тогда
				Если Значение.Уровень <> 90 Тогда
					Представление = УправлениеКонтактнойИнформациейСлужебный.ПолучитьXDTOРеквизитОбъекта(АдресРФ, Значение.ПутьXPath);
				Иначе
					Представление = УправлениеКонтактнойИнформациейСлужебный.НайтиДополнительныйЭлементАдреса(АдресРФ);
				КонецЕсли;
				
				Части = УправлениеКонтактнойИнформациейКлиентСервер.НаименованиеСокращение(Представление);
				Значение.Представление = Представление;
				Значение.Наименование  = Части.Наименование;
				Значение.Сокращение    = Части.Сокращение;
			КонецЕсли;
		КонецЦикла;
		
		УправлениеКонтактнойИнформациейСлужебный.ЗаполнитьИдентификаторыНаселенногоПункта(Контекст.НаселенныйПунктДетально);
		
		УровеньНаселенногоПункта = 0;
		УровеньУлицы = 0;
		Для каждого Элемент Из Контекст.НаселенныйПунктДетально Цикл
			Если Элемент.Значение.Уровень < 7
				И ЗначениеЗаполнено(Элемент.Значение.Идентификатор)
				И Элемент.Значение.Уровень > УровеньНаселенногоПункта Тогда
					Контекст.ИдентификаторНаселенногоПункта = Элемент.Значение.Идентификатор;
					УровеньНаселенногоПункта = Элемент.Значение.Уровень;
			КонецЕсли;
			Если Элемент.Значение.Уровень > 6
				И ЗначениеЗаполнено(Элемент.Значение.Идентификатор)
				И Элемент.Значение.Уровень > УровеньУлицы Тогда
					Контекст.ИдентификаторУлицы = Элемент.Значение.Идентификатор;
					УровеньУлицы = Элемент.Значение.Уровень;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УдалитьГруппуЭлементов(Группа)
	Пока Группа.ПодчиненныеЭлементы.Количество()>0 Цикл
		Элемент = Группа.ПодчиненныеЭлементы[0];
		Если ТипЗнч(Элемент)=Тип("ГруппаФормы") Тогда
			УдалитьГруппуЭлементов(Элемент);
		КонецЕсли;
		Элементы.Удалить(Элемент);
	КонецЦикла;
	Элементы.Удалить(Группа);
КонецПроцедуры

&НаСервере
Функция ОтрисоватьДополнительныеЗданияИПомещения() 
	Возврат Новый Структура("ИмяЗдания, ИмяПомещения",
		ОтрисоватьДополнительныеЗдания(),
		ОтрисоватьДополнительныеПомещения());
КонецФункции

&НаСервере
Функция ОтрисоватьДополнительныеЗдания() 
	
	Удалять = Новый Массив;
	Пока Элементы.ГруппаСтроенияДополнительно.ПодчиненныеЭлементы.Количество()>0 Цикл
		Группа = Элементы.ГруппаСтроенияДополнительно.ПодчиненныеЭлементы[0];
		Если ТипЗнч(Группа)=Тип("ГруппаФормы") Тогда
			Идентификатор = Сред(Группа.Имя, 1 + СтрДлина("ГруппаСтроение"));
			Если Не ПустаяСтрока(Идентификатор) Тогда
				Удалять.Добавить("ТипСтроения" + Идентификатор);
				Удалять.Добавить("Строение"    + Идентификатор);
				КомандаУдалить = Команды.Найти("УдалитьСтроение" + Идентификатор);
				Если КомандаУдалить<>Неопределено Тогда
					Команды.Удалить(КомандаУдалить);
				КонецЕсли;
			КонецЕсли;
			УдалитьГруппуЭлементов(Группа);
		Иначе
			Элементы.Удалить(Группа);
		КонецЕсли;
	КонецЦикла;
	ИзменитьРеквизиты(,Удалять);
	
	КоличествоЗданий = ДополнительныеЗдания.Количество()-1;
	КоличествоТипов  = Элементы.ТипСтроения.СписокВыбора.Количество()-2;
	
	Результат = Неопределено;
	Для НомерСтроки=0 По КоличествоЗданий Цикл
		Строка = ДополнительныеЗдания[НомерСтроки];
		Идентификатор = Формат(НомерСтроки, "ЧН=; ЧГ=");
		
		НоваяГруппа = Элементы.Добавить("ГруппаСтроение" + Идентификатор, Тип("ГруппаФормы"), Элементы.ГруппаСтроенияДополнительно);
		ЗаполнитьЗначенияСвойств(НоваяГруппа, Элементы.ГруппаСтроениеНачальное, , "ПутьКДаннымЗаголовка");
		
		НовыйТип = Элементы.Добавить("ТипСтроения" + Идентификатор, Тип("ПолеФормы"), НоваяГруппа);
		ЗаполнитьЗначенияСвойств(НовыйТип, Элементы.ТипСтроения, , "ПутьКДанным, СписокВыбора, ВыделенныйТекст, СвязьПоТипу");
		НовыйТип.СписокВыбора.ЗагрузитьЗначения(Элементы.ТипСтроения.СписокВыбора.ВыгрузитьЗначения());
		НовыйТип.УстановитьДействие("ПриИзменении", "Подключаемый_ТипСтроенияПриИзменении");
		
		НовыйЭлемент = Элементы.Добавить("Строение" + Идентификатор, Тип("ПолеФормы"), НоваяГруппа);
		ЗаполнитьЗначенияСвойств(НовыйЭлемент, Элементы.Строение, , "ПутьКДанным, СписокВыбора, ВыделенныйТекст, СвязьПоТипу");
		НовыйЭлемент.СписокВыбора.ЗагрузитьЗначения(Элементы.Строение.СписокВыбора.ВыгрузитьЗначения());
		НовыйЭлемент.УстановитьДействие("ПриИзменении", "Подключаемый_СтроениеПриИзменении");
		
		Если НомерСтроки=КоличествоЗданий Тогда
			Результат = НовыйЭлемент.Имя;
		КонецЕсли;
		
		Добавлять = Новый Массив;
		Добавлять.Добавить(Новый РеквизитФормы(НовыйТип.Имя, Новый ОписаниеТипов("Строка")));
		Добавлять.Добавить(Новый РеквизитФормы(НовыйЭлемент.Имя, Новый ОписаниеТипов("Строка")));
		
		ИзменитьРеквизиты(Добавлять);
		ЭтотОбъект[НовыйТип.Имя]     = Строка.Тип;
		ЭтотОбъект[НовыйЭлемент.Имя] = Строка.Значение;
		
		НовыйТип.ПутьКДанным     = НовыйТип.Имя;
		НовыйЭлемент.ПутьКДанным = НовыйЭлемент.Имя;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура Подключаемый_ТипСтроенияПриИзменении(Элемент)
	НомерСтроки = Сред(Элемент.Имя, 1 + СтрДлина("ТипСтроения"));
	СтрокаЗданий = ДополнительныеЗдания.Получить(НомерСтроки);
	СтрокаЗданий.Тип = ЭтотОбъект[Элемент.Имя];
	СтрокаЗданий.ПутьXPath = УправлениеКонтактнойИнформациейКлиентСервер.XPathНомераДополнительногоОбъектаАдресации(СтрокаЗданий.Тип);
	
	Контекст = КонтекстФормыКлиент();
	ОбновитьИндексИПредставление(Контекст);
	КонтекстФормыКлиент(Контекст);
	
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СтроениеПриИзменении(Элемент)
	НомерСтроки = Сред(Элемент.Имя, 1 + СтрДлина("Строение"));
	СтрокаЗданий = ДополнительныеЗдания.Получить(НомерСтроки);
	СтрокаЗданий.Значение = ЭтотОбъект[Элемент.Имя];
	
	Контекст = КонтекстФормыКлиент();
	ОбновитьИндексИПредставление(Контекст);
	КонтекстФормыКлиент(Контекст);
	
	Модифицированность = Истина;
КонецПроцедуры

&НаСервере
Функция ОтрисоватьДополнительныеПомещения()
	
	Удалять = Новый Массив;
	Пока Элементы.ГруппаПомещенияДополнительно.ПодчиненныеЭлементы.Количество()>0 Цикл
		Группа = Элементы.ГруппаПомещенияДополнительно.ПодчиненныеЭлементы[0];
		Если ТипЗнч(Группа)=Тип("ГруппаФормы") Тогда
			Идентификатор = Сред(Группа.Имя, 1 + СтрДлина("ГруппаПомещение"));
			Если Не ПустаяСтрока(Идентификатор) Тогда
				Удалять.Добавить("ТипПомещения" + Идентификатор);
				Удалять.Добавить("Помещение"    + Идентификатор);
				КомандаУдалить = Команды.Найти("УдалитьПомещение" + Идентификатор);
				Если КомандаУдалить<>Неопределено Тогда
					Команды.Удалить(КомандаУдалить);
				КонецЕсли;
			КонецЕсли;
			УдалитьГруппуЭлементов(Группа);
		Иначе
			Элементы.Удалить(Группа);
		КонецЕсли;
	КонецЦикла;
	ИзменитьРеквизиты(,Удалять);
	
	КоличествоПомещений = ДополнительныеПомещения.Количество()-1;
	КоличествоТипов     = Элементы.ТипПомещения.СписокВыбора.Количество()-2;
	
	Результат = Неопределено;
	Для НомерСтроки=0 По КоличествоПомещений Цикл
		Строка = ДополнительныеПомещения[НомерСтроки];
		Идентификатор = Формат(НомерСтроки, "ЧН=; ЧГ=");
		
		НоваяГруппа = Элементы.Добавить("ГруппаПомещение" + Идентификатор, Тип("ГруппаФормы"), Элементы.ГруппаПомещенияДополнительно);
		ЗаполнитьЗначенияСвойств(НоваяГруппа, Элементы.ГруппаПомещениеНачальное, , "ПутьКДаннымЗаголовка");
		
		НовыйТип = Элементы.Добавить("ТипПомещения" + Идентификатор, Тип("ПолеФормы"), НоваяГруппа);
		ЗаполнитьЗначенияСвойств(НовыйТип, Элементы.ТипПомещения, , "ПутьКДанным, СписокВыбора, ВыделенныйТекст, СвязьПоТипу");
		НовыйТип.СписокВыбора.ЗагрузитьЗначения(Элементы.ТипПомещения.СписокВыбора.ВыгрузитьЗначения());
		НовыйТип.УстановитьДействие("ПриИзменении", "Подключаемый_ТипПомещенияПриИзменении");
		
		НовыйЭлемент = Элементы.Добавить("Помещение" + Идентификатор, Тип("ПолеФормы"), НоваяГруппа);
		ЗаполнитьЗначенияСвойств(НовыйЭлемент, Элементы.Помещение, , "ПутьКДанным, СписокВыбора, ВыделенныйТекст, СвязьПоТипу");
		НовыйЭлемент.СписокВыбора.ЗагрузитьЗначения(Элементы.Помещение.СписокВыбора.ВыгрузитьЗначения());
		НовыйЭлемент.УстановитьДействие("ПриИзменении", "Подключаемый_ПомещениеПриИзменении");
		
		Если НомерСтроки=КоличествоПомещений Тогда
			Результат = НовыйЭлемент.Имя;
		КонецЕсли;
		
		Добавлять = Новый Массив;
		Добавлять.Добавить(Новый РеквизитФормы(НовыйТип.Имя, Новый ОписаниеТипов("Строка")));
		Добавлять.Добавить(Новый РеквизитФормы(НовыйЭлемент.Имя, Новый ОписаниеТипов("Строка")));
		
		ИзменитьРеквизиты(Добавлять);
		ЭтотОбъект[НовыйТип.Имя]     = Строка.Тип;
		ЭтотОбъект[НовыйЭлемент.Имя] = Строка.Значение;
		
		НовыйТип.ПутьКДанным     = НовыйТип.Имя;
		НовыйЭлемент.ПутьКДанным = НовыйЭлемент.Имя;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура Подключаемый_ТипПомещенияПриИзменении(Элемент)
	НомерСтроки = Сред(Элемент.Имя, 1 + СтрДлина("ТипПомещения"));
	СтрокаПомещений = ДополнительныеПомещения.Получить(НомерСтроки);
	СтрокаПомещений.Тип = ЭтотОбъект[Элемент.Имя];
	СтрокаПомещений.ПутьXPath = УправлениеКонтактнойИнформациейКлиентСервер.XPathНомераДополнительногоОбъектаАдресации(СтрокаПомещений.Тип);
	
	Контекст = КонтекстФормыКлиент();
	ЗаполнитьПредставлениеАдреса(Контекст);
	КонтекстФормыКлиент(Контекст);
	
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПомещениеПриИзменении(Элемент)
	НомерСтроки = Сред(Элемент.Имя, 1 + СтрДлина("Помещение"));
	СтрокаЗданий = ДополнительныеПомещения.Получить(НомерСтроки);
	СтрокаЗданий.Значение = ЭтотОбъект[Элемент.Имя];
	
	Контекст = КонтекстФормыКлиент();
	ЗаполнитьПредставлениеАдреса(Контекст);
	КонтекстФормыКлиент(Контекст);
	
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте 
Процедура СообщитьОбОшибкахЗаполнения(СписокОшибок, ПредупреждатьОбОтсутствии)
	
	ОчиститьСообщения();
	
	КоличествоОшибок = СписокОшибок.Количество();
	Если КоличествоОшибок = 0 И ПредупреждатьОбОтсутствии Тогда
		// Нет ошибок
		ПоказатьПредупреждение(, НСтр("ru='Адрес введен корректно.'"));
		Возврат;
	КонецЕсли;	
	
	Если КоличествоОшибок = 1 Тогда
		МестоОшибки = СписокОшибок[0].Значение;
		Если ПустаяСтрока(МестоОшибки) Или МестоОшибки = "/" Тогда
			// Одна ошибка на весь адрес, не привязанная к полю.
			ПоказатьПредупреждение(, СписокОшибок[0].Представление);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// Сообщаем список с привязкой к полям.
	Для Каждого Элемент Из СписокОшибок Цикл
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			Элемент.Представление,,,ПутьКДаннымФормыПоПутиXPath(Элемент.Значение));
	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Функция ПутьКДаннымФормыПоПутиXPath(ПутьXPath) 
	
	Если ПутьXPath = "СубъектРФ" Тогда
		Возврат "НаселенныйПункт";
		
	ИначеЕсли ПутьXPath = "Округ" Тогда
		Возврат "НаселенныйПункт";
		
	ИначеЕсли ПутьXPath = УправлениеКонтактнойИнформациейКлиентСервер.XPathРайона() Тогда
		Возврат "НаселенныйПункт";
		
	ИначеЕсли ПутьXPath = "Город" Тогда
		Возврат "НаселенныйПункт";
		
	ИначеЕсли ПутьXPath = "ВнутригРайон" Тогда
		Возврат "НаселенныйПункт";
		
	ИначеЕсли ПутьXPath = "НаселПункт" Тогда
		Возврат "НаселенныйПункт";
		
	ИначеЕсли ПутьXPath = "Улица" Тогда
		Возврат "Улица";
		
	ИначеЕсли ПутьXPath = УправлениеКонтактнойИнформациейКлиентСервер.XPathПочтовогоИндекса() Тогда
		Возврат "Индекс";
		
	КонецЕсли;
	
	// Дополнительно добавленные строения и помещения.
	Фильтр = Новый Структура("ПутьXPath", ПутьXPath);
	
	Строки = ДополнительныеЗдания.НайтиСтроки(Фильтр);
	Если Строки.Количество() > 0 Тогда
		// Первое непустое
		Для Каждого СтрокаЗдания Из Строки Цикл
			ИмяРеквизита = "Строение" + Формат(ДополнительныеЗдания.Индекс(СтрокаЗдания), "ЧН=; ЧГ=");
			Если ЗначениеЗаполнено(ЭтотОбъект[ИмяРеквизита]) Тогда
				Возврат ИмяРеквизита;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Строки = ДополнительныеПомещения.НайтиСтроки(Фильтр); 
	Если Строки.Количество() > 0 Тогда
		// Первое непустое
		Для Каждого СтрокаПомещения Из Строки Цикл
			ИмяРеквизита = "Помещение" + Формат(ДополнительныеПомещения.Индекс(СтрокаПомещения), "ЧН=; ЧГ=");
			Если ЗначениеЗаполнено(ЭтотОбъект[ИмяРеквизита]) Тогда
				Возврат ИмяРеквизита;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Варианты дома
	Для Каждого ЭлементСписка Из Элементы.ТипДома.СписокВыбора Цикл
		Если ПутьXPath = УправлениеКонтактнойИнформациейКлиентСервер.XPathНомераДополнительногоОбъектаАдресации(ЭлементСписка.Значение) Тогда
			Возврат "Дом";
		КонецЕсли;
	КонецЦикла;
	
	// Варианты корпуса
	Для Каждого ЭлементСписка Из Элементы.ТипСтроения.СписокВыбора Цикл
		Если ПутьXPath = УправлениеКонтактнойИнформациейКлиентСервер.XPathНомераДополнительногоОбъектаАдресации(ЭлементСписка.Значение) Тогда
			Возврат "Строение";
		КонецЕсли;
	КонецЦикла;
	
	// Варианты помещения
	Для Каждого ЭлементСписка Из Элементы.ТипПомещения.СписокВыбора Цикл
		Если ПутьXPath = УправлениеКонтактнойИнформациейКлиентСервер.XPathНомераДополнительногоОбъектаАдресации(ЭлементСписка.Значение) Тогда
			Возврат "Помещение";
		КонецЕсли;
	КонецЦикла;
		
	// Не нашли
	Возврат "";
КонецФункции

&НаКлиенте
Процедура ОчиститьАдресКлиент()
	
	Контекст = КонтекстФормыКлиент();
	ОчиститьАдресСервер(Контекст);
	КонтекстФормыКлиент(Контекст);
	
	Модифицированность = Истина;
КонецПроцедуры

&НаСервере
Процедура ОчиститьАдресСервер(Контекст)
	
	Контекст.ПредставлениеАдреса = "";
	Контекст.Комментарий = "";
	Контекст.Индекс = Неопределено;
	Контекст.ОКТМО = Неопределено;
	Контекст.ИдентификаторНаселенногоПункта = Неопределено;
	Контекст.НаселенныйПункт                = "";
	Контекст.НаселенныйПунктДетально = УправлениеКонтактнойИнформациейСлужебный.СписокРеквизитовНаселенныйПункт(Неопределено, "ФИАС");
	
	Контекст.ИдентификаторУлицы = Неопределено;
	Контекст.Улица = "";
	
	Контекст.ТипДома      = УправлениеКонтактнойИнформациейКлиентСервер.ПервыйИлиПустой(Элементы.ТипДома.СписокВыбора);
	Контекст.ТипСтроения  = УправлениеКонтактнойИнформациейКлиентСервер.ПервыйИлиПустой(Элементы.ТипСтроения.СписокВыбора);
	Контекст.ТипПомещения = УправлениеКонтактнойИнформациейКлиентСервер.ПервыйИлиПустой(Элементы.ТипПомещения.СписокВыбора);
	
	Контекст.Дом       = "";
	Контекст.Строение  = "";
	Контекст.Помещение = "";
	
	Контекст.ДополнительныеЗдания.Очистить();
	Контекст.ДополнительныеПомещения.Очистить();
	
	XDTOКонтактнаяИнфо = КонтактнаяИнформацияПоЗначениюРеквизитов(Контекст);
	СформироватьДетальныйНаселенныйПункт(Контекст, XDTOКонтактнаяИнфо.Состав);
	ЗаполнитьПредставлениеАдреса(Контекст, XDTOКонтактнаяИнфо);
	
	// Очищаем непосредственно на форме, в контексте уже очищено.
	ДополнительныеЗдания.Очистить();
	ДополнительныеПомещения.Очистить();
	ОтрисоватьДополнительныеЗданияИПомещения();
КонецПроцедуры

&НаКлиенте
Функция НеиспользованныеЭлементыДополнительнойТаблицы(ТаблицаДанных, ЭлементИсточник, ЗначениеМаркера)
	Использованные = Новый Соответствие;
	Использованные.Вставить(ЭтотОбъект[ЭлементИсточник.Имя], Истина);
	Для Каждого Строка Из ТаблицаДанных Цикл
		Использованные.Вставить(Строка.Тип, Истина);
	КонецЦикла;
	
	Результат = Новый СписокЗначений;
	Для Каждого ЭлементСписка Из ЭлементИсточник.СписокВыбора Цикл
		Если Использованные[ЭлементСписка.Значение]=Неопределено Тогда
			Результат.Добавить(ЗначениеМаркера, ЭлементСписка.Значение, ЭлементСписка.Пометка, ЭлементСписка.Картинка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция МожноДобавлятьДополнительныеОбъекты()
	ВариантыСтроения  = НеиспользованныеЭлементыДополнительнойТаблицы(ДополнительныеЗдания, Элементы.ТипСтроения, 1);
	ВариантыПомещения = НеиспользованныеЭлементыДополнительнойТаблицы(ДополнительныеПомещения, Элементы.ТипПомещения, 2);
	Возврат ВариантыСтроения.Количество() + ВариантыПомещения.Количество() > 0
КонецФункции

&НаСервере
Процедура УстановитьКлючИспользованияФормы()
	КлючСохраненияПоложенияОкна = Строка(Страна);
	
	Количество = 0;
	Для Каждого Строка Из ДополнительныеЗдания Цикл
		Если Не ПустаяСтрока(Строка.Значение) Тогда
			Количество = Количество + 1;
		КонецЕсли;
	КонецЦикла;
	КлючСохраненияПоложенияОкна = КлючСохраненияПоложенияОкна + "/" + Формат(Количество, "ЧН=; ЧГ=");
	
	Количество = 0;
	Для Каждого Строка Из ДополнительныеПомещения Цикл
		Если Не ПустаяСтрока(Строка.Значение) Тогда
			Количество = Количество + 1;
		КонецЕсли;
	КонецЦикла;
	
	КлючСохраненияПоложенияОкна = КлючСохраненияПоложенияОкна + "/" + Формат(Количество, "ЧН=; ЧГ=");
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////////////////////

&НаСервереБезКонтекста
Функция СписокАвтоподбораНаселенногоПункта(Текст, ДополнительныеПараметры)
	
	Возврат УправлениеКонтактнойИнформациейСлужебный.СписокАвтоподбораНаселенногоПункта(Текст, ДополнительныеПараметры);
	
КонецФункции

&НаСервереБезКонтекста
Функция СписокАвтоподбораУлицы(ИдентификаторНаселенногоПункта, Текст, ДополнительныеПараметры)
	
	Возврат УправлениеКонтактнойИнформациейСлужебный.СписокАвтоподбораУлицы(ИдентификаторНаселенногоПункта, Текст, ДополнительныеПараметры);
	
КонецФункции

&НаСервереБезКонтекста
Функция СписокАвтоподбораВариантовДомов(Идентификатор, Текст)
	Возврат УправлениеКонтактнойИнформациейСлужебный.СписокАвтоподбораНомераДомов(Идентификатор, Текст);
КонецФункции

&НаСервереБезКонтекста
Функция НаселенныеПунктыПоПредставлению(Текст, СкрыватьНеактуальныеАдреса = Ложь, ВыбиратьСтрок = 50)
	
	Возврат УправлениеКонтактнойИнформациейСлужебный.НаселенныеПунктыПоПредставлению(Текст, СкрыватьНеактуальныеАдреса, ВыбиратьСтрок);
		
КонецФункции

&НаСервереБезКонтекста
Функция УлицыПоПредставлению(Родитель, Текст, СкрыватьНеактуальныеАдреса = Ложь, ВыбиратьСтрок = 50)
	
	Возврат УправлениеКонтактнойИнформациейСлужебный.УлицыПоПредставлению(Родитель, Текст, СкрыватьНеактуальныеАдреса, ВыбиратьСтрок);
	
КонецФункции

// Преобразовываем Реквизиты формы <-> Структура
//
&НаКлиенте
Функция КонтекстФормыКлиент(НовыеДанные = Неопределено)
	
	СписокРеквизитов = "
		|ВидКонтактнойИнформации,
		|Страна, КодСтраны, СтранаРоссия, СкрыватьНеактуальныеАдреса,
		|Индекс, ПредставлениеАдреса, Комментарий, КопияКомментария,
		|НаселенныйПункт, ИдентификаторНаселенногоПункта, НаселенныйПунктДетально,
		|Улица, ИдентификаторУлицы, ОКТМО,
		|ТипДома, Дом, ТипСтроения, Строение, ТипПомещения, Помещение,
		|РазрешитьВводАдресаВСвободнойФорме, ПредставлениеАдресаИзменено,
		|Модифицированность, ЕстьКлассификатор, ДополнительныйЭлемент, ПодчиненныйЭлемент
		|";
		
	СписокКоллекций = "ДополнительныеЗдания, ДополнительныеПомещения";
	
	Если НовыеДанные = Неопределено Тогда
		// Читаем
		Результат = Новый Структура(СписокРеквизитов + "," + СписокКоллекций);
		ЗаполнитьЗначенияСвойств(Результат, ЭтотОбъект, СписокРеквизитов + "," + СписокКоллекций);
		Возврат Результат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, НовыеДанные, СписокРеквизитов, СписокКоллекций);
	ЗаполнитьЗначенияКоллекций(ЭтотОбъект, НовыеДанные, СписокКоллекций);
	
	Возврат НовыеДанные;
КонецФункции

&НаКлиенте
Процедура ЗаполнитьЗначенияКоллекций(Приемник, Источник, СписокСвойств)
	Для Каждого КлючЗначение Из Новый Структура(СписокСвойств) Цикл
		ИмяСвойства = КлючЗначение.Ключ;
		СвойствоПриемник = Приемник[ИмяСвойства];
		СвойствоПриемник.Очистить();
		Для Каждого Значение Из Источник[ИмяСвойства] Цикл
			ЗаполнитьЗначенияСвойств(СвойствоПриемник.Добавить(), Значение);
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

// Разрешение элементов для ввода в свободном формате.
//
// Параметры:
//    - Режим                    - Булево - Истина - можно редактировать представление адреса, Ложь - нельзя.
//    - ФормироватьПредставление - Булево - необязательный флаг. По умолчанию установлен.
//
&НаКлиенте
Процедура СостояниеВводаПредставленияАдреса(РедактироватьПредставлениеАдреса, ФормироватьПредставление = Истина)
	
	Если Страна = СтранаРоссия Тогда
		Элемент = Элементы.ПредставлениеАдреса;
		// Проверять адрес, введенный вручную нельзя.
		Элементы.ПроверитьЗаполнениеАдреса.Доступность = Не РедактироватьПредставлениеАдреса;
	Иначе
		Элемент = Элементы.ПредставлениеИностранногоАдреса;
	КонецЕсли;
	Элемент.РедактированиеТекста = РедактироватьПредставлениеАдреса;
	Если РедактироватьПредставлениеАдреса Тогда
		Элемент.ЦветФона = АвтоЦвет;
	Иначе
		Элемент.ЦветФона = ЦветФонаФормы;
		
		Если ФормироватьПредставление Тогда
			Контекст = КонтекстФормыКлиент();
			ЗаполнитьПредставлениеАдреса(Контекст);
			КонтекстФормыКлиент(Контекст);
		КонецЕсли;
	КонецЕсли;
	
	// Остальные поля ввода
	СостояниеГруппыВвода(Элементы.ТипАдреса, Не РедактироватьПредставлениеАдреса);
	
	// Пометка режима
	Элементы.ВвестиАдресВСвободнойФорме.Пометка            = РедактироватьПредставлениеАдреса;
	Элементы.ВвестиАдресВСвободнойФормеВсеДействия.Пометка = РедактироватьПредставлениеАдреса;
	Элементы.ПредставлениеАдресаКонтекстноеМенюВвестиАдресВСвободнойФорме.Пометка = РедактироватьПредставлениеАдреса;
	
	// Страна - по прежнему управляющее поле.
	Если Элементы.Страна.Доступность Тогда
		Элементы.Страна.ЦветФона = ЦветФонаУправляющегоПоля;
	КонецЕсли;
	
	// Переключаем заголовок представления и текущий элемент ввода для индикации режима.
	Если РедактироватьПредставлениеАдреса Тогда
		Элементы.ПредставлениеАдреса.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх;
		Элементы.ПредставлениеАдреса.Заголовок          = НСтр("ru='Адрес в свободной форме'");
		Элементы.СтранаАдреса.Отображение        = ОтображениеОбычнойГруппы.Нет;
		Если Страна <> СтранаРоссия Тогда
			ТекущийЭлемент = Элементы.ПредставлениеИностранногоАдреса;
		Иначе
			ТекущийЭлемент = Элементы.ПредставлениеАдреса;
		КонецЕсли;
	Иначе 
		Элементы.ПредставлениеАдреса.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		Элементы.ПредставлениеАдреса.Заголовок          = "";
		Элементы.СтранаАдреса.Отображение        = ОтображениеОбычнойГруппы.ОбычноеВыделение;
		Если Страна = СтранаРоссия Тогда
			ТекущийЭлемент = Элементы.НаселенныйПункт;
		Иначе
			ТекущийЭлемент = Элементы.НаселенныйПунктИностранныйАдреса;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Установка доступности элементов в группе.
//
// Параметры:
//    - Группа - ГруппаФормы - Контейнер для элементов.
//    - Режим  - Булево      - Флаг разрешения элементов. Истина - разрешены, Ложь - нет.
//
&НаКлиенте
Процедура СостояниеГруппыВвода(Группа, Режим)
	
	Для Каждого Элемент Из Группа.ПодчиненныеЭлементы Цикл
		ТипЭлемента = ТипЗнч(Элемент);
		Если ТипЭлемента = Тип("ГруппаФормы") Тогда
			Если Элемент <> Элементы.ИностранныйАдрес Тогда
				СостояниеГруппыВвода(Элемент, Режим);
			КонецЕсли;
			
		ИначеЕсли ТипЭлемента = Тип("КнопкаФормы") Тогда
			Если Элемент = Элементы.ДобавитьОбъект Тогда
				Элемент.Доступность = Режим И МожноДобавлятьДополнительныеОбъекты();
			Иначе
				Элемент.Доступность = Режим;
			КонецЕсли;
			
		ИначеЕсли ТипЭлемента = Тип("ПолеФормы") И Элемент.Вид = ВидПоляФормы.ПолеВвода Тогда
			Если Элемент <> Элементы.ПредставлениеАдреса Тогда
				Элемент.ТолькоПросмотр = Не Режим;
				Элемент.ЦветФона = ?(Режим, АвтоЦвет, ЦветФонаФормы);
			КонецЕсли;
			
		Иначе 
			Элемент.Доступность = Режим;
			
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Представление разрешено менять только при вводе в режиме ввода в свободной форме.
// Поэтому необходимо привести остальные поля к измененному представлению.
// Страну не трогаем, режим свободного ввода возможен только в России.
//
&НаСервере
Процедура ПредставлениеАдресаПриИзмененииСервер()
	
	Если Страна = СтранаРоссия Тогда
		// Пытаемся разобрать заново
		XDTOКонтактная = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияXDTOПоПредставлению(ПредставлениеАдреса, ВидКонтактнойИнформации);
		XDTOКонтактная.Представление = ПредставлениеАдреса;
		XDTOКонтактная.Комментарий   = Комментарий;
		
		// И проставляем в реквизиты, кроме страны и представления.
		ТекущееПредставление = ПредставлениеАдреса;
		ТекущаяСтрана        = Страна;
		
		ОчиститьАдресСервер(ЭтотОбъект);
		
		// Возможно будет отключен свободного ввода.
		ЗначениеРеквизитовПоКонтактнойИнформации(ЭтотОбъект, XDTOКонтактная);
		
		ПредставлениеАдреса = ТекущееПредставление;
		Страна              = ТекущаяСтрана;
		ОтрисоватьДополнительныеЗданияИПомещения();
	КонецЕсли;
	
	// Включаем режим свободного ввода принудительно.
	РазрешитьВводАдресаВСвободнойФорме = Истина;
	Модифицированность = Истина;
КонецПроцедуры

// Сравниваем два представления на эквивалентность.
&НаСервереБезКонтекста
Функция ПредставленияАдресаОдинаковы(Знач Представление1, Знач Представление2, Знач ИгнорироватьЗнакНомера=Ложь)
	Возврат ХешПредставления(Представление1, ИгнорироватьЗнакНомера)=ХешПредставления(Представление2, ИгнорироватьЗнакНомера);
КонецФункции

&НаСервереБезКонтекста
Функция ХешПредставления(Знач Представление, Знач ИгнорироватьЗнакНомера=Ложь)
	Результат = СтрЗаменить(Представление, Символы.ПС, "");
	Результат = СтрЗаменить(Результат, " ", "");
	Если ИгнорироватьЗнакНомера Тогда
		Результат = СтрЗаменить(Результат, "№", "");
	КонецЕсли;
	Возврат ВРег(Результат);
КонецФункции

&НаСервере
Процедура ЗаполнитьВариантыДомовСтроенийКвартир()
	
	Перем ВариантыДанныхДом, ВариантыДанныхПомещение, ВариантыДанныхСтроение;
	
	// Возможные варианты дома, строения, квартиры.
	ВариантыДанныхДом = УправлениеКонтактнойИнформациейСлужебный.ВариантыДанныхДом();
	УстановитьСписокВыбораЭлемента(Элементы.ТипДома, Элементы.Дом, ВариантыДанныхДом);
	УстановитьСписокВыбораЭлемента(Элементы.ТипДомаИностранныйАдреса, Элементы.ДомИностранныйАдреса, ВариантыДанныхДом);
	
	ВариантыДанныхСтроение = УправлениеКонтактнойИнформациейСлужебный.ВариантыДанныхСтроение();
	УстановитьСписокВыбораЭлемента(Элементы.ТипСтроения,  Элементы.Строение, ВариантыДанныхСтроение);
	УстановитьСписокВыбораЭлемента(Элементы.ТипСтроенияИностранныйАдреса, Элементы.СтроениеИностранныйАдреса, ВариантыДанныхСтроение);
	
	ВариантыДанныхПомещение = УправлениеКонтактнойИнформациейСлужебный.ВариантыДанныхПомещение();
	УстановитьСписокВыбораЭлемента(Элементы.ТипПомещения, Элементы.Помещение, ВариантыДанныхПомещение);
	УстановитьСписокВыбораЭлемента(Элементы.ТипПомещенияИностранныйАдреса, Элементы.ПомещениеИностранныйАдреса, ВариантыДанныхПомещение);
	//
	
	// Возможно пустые значения, чтобы не смущали.
	Если ПустаяСтрока(Дом) И ПустаяСтрока(ТипДома) Тогда
		ТипДома = УправлениеКонтактнойИнформациейКлиентСервер.ПервыйИлиПустой(Элементы.ТипДома);
	КонецЕсли;
	Если ПустаяСтрока(Строение) И ПустаяСтрока(ТипСтроения) Тогда
		ТипСтроения = УправлениеКонтактнойИнформациейКлиентСервер.ПервыйИлиПустой(Элементы.ТипСтроения);
	КонецЕсли;
	Если ПустаяСтрока(Помещение) И ПустаяСтрока(ТипПомещения) Тогда
		ТипПомещения = УправлениеКонтактнойИнформациейКлиентСервер.ПервыйИлиПустой(Элементы.ТипПомещения);
	КонецЕсли;

КонецПроцедуры


&НаСервере
Функция НедоступностьСервиса()
	
	Возврат Элементы.ГруппаОписаниеНедоступностиСервера.ТекущаяСтраница = Элементы.СервисНедоступен;
	
КонецФункции

&НаСервере
Процедура ПроверитьДоступностьКлассификатора(Знач РезультатПроверки = Неопределено)
	
	Если Не ЕстьКлассификатор Тогда
		Возврат;
	КонецЕсли;
	
	ДоступностьКлассификатораАдрес = ПоместитьВоВременноеХранилище(РезультатПроверки, УникальныйИдентификатор);
	Если РезультатПроверки = Неопределено Тогда
		Если ОбщегоНазначенияКлиентСервер.РежимОтладки() Тогда
			УправлениеКонтактнойИнформациейСлужебный.ПроверитьДоступностьКлассификатора(ДоступностьКлассификатораАдрес);
		Иначе
			ПараметрыПроцедуры = Новый Массив;
			ПараметрыПроцедуры.Добавить(ДоступностьКлассификатораАдрес);
			
			ПараметрыЗадания = Новый Массив;
			ПараметрыЗадания.Добавить("УправлениеКонтактнойИнформациейСлужебный.ПроверитьДоступностьКлассификатора");
			ПараметрыЗадания.Добавить(ПараметрыПроцедуры);
			
			НаименованиеЗадания = НСтр("ru = 'Проверка доступности сервиса адресного классификатора'");
			Задание = ФоновыеЗадания.Выполнить("РаботаВБезопасномРежиме.ВыполнитьМетодКонфигурации", ПараметрыЗадания,, НаименованиеЗадания);
			ИдентификаторЗадания = Задание.УникальныйИдентификатор;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьДоступностьКлассификатора(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьДоступностьКлассификатора(Контекст)
	
	ДоступностьКлассификатора = ПолучитьИзВременногоХранилища(Контекст.ДоступностьКлассификатораАдрес);
	Контекст.ДоступностьКлассификатораАдрес = "";
	Контекст.ИдентификаторЗадания = "";
	
	Контекст.Элементы.ГруппаОписаниеНедоступностиСервера.ТекущаяСтраница = ?(ДоступностьКлассификатора.Отказ,
		Контекст.Элементы.СервисНедоступен, Контекст.Элементы.СервисДоступен);
	Если ДоступностьКлассификатора.Отказ Тогда
		Контекст.ТекстСообщенияСервиса = НСтр("ru = 'Автоподбор и проверка адреса недоступны:'") + Символы.ПС 
			+ ДоступностьКлассификатора.КраткоеПредставлениеОшибки;
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция НаселенныйПунктДетальноПоИдентификатору(ИдентификаторНаселенногоПункта, ФорматАдреса)
	Возврат УправлениеКонтактнойИнформациейСлужебный.СписокРеквизитовНаселенныйПункт(ИдентификаторНаселенногоПункта, ФорматАдреса);
КонецФункции

&НаКлиенте
Процедура АвторизацияНаСайтеПоддержкиПользователейЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ПроверитьДоступностьКлассификатора();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВозможностьПодбораПоИндексу(Знач ЭтоВебСервис)
	
	ПодборПоИндексуДоступен = Истина;
	
	Если ЭтоВебСервис ИЛИ НЕ МожноЗагружатьКлассификатор Тогда
		ПодборПоИндексуДоступен = Ложь;
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.АдресныйКлассификатор") Тогда
		МодульАдресныйКлассификаторСлужебный = ОбщегоНазначения.ОбщийМодуль("АдресныйКлассификаторСлужебный");
		Сведения = МодульАдресныйКлассификаторСлужебный.КраткиеСведенияОЗагрузкеСубъектовРФ();
		
		Если Сведения.КоличествоРегионов <= Сведения.КоличествоЗагруженныхРегионов Тогда
			ПодборПоИндексуДоступен = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СведенияОРегионе(НаименованиеСубъектаРФ)
	
	МодульАдресныйКлассификаторСлужебный = ОбщегоНазначения.ОбщийМодуль("АдресныйКлассификаторСлужебный");
	СведенияОРегионе = МодульАдресныйКлассификаторСлужебный.СведенияОРегионе(НаименованиеСубъектаРФ);
	
	Возврат СведенияОРегионе;
	
КонецФункции

&НаКлиенте
Процедура НаселенныйПунктИностранныйАдресаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	// Если пришли впрямую после редактирования, то сбрасываем адрес.
	Если Элемент.ТекстРедактирования <> НаселенныйПункт Тогда
		Модифицированность = Истина;
		НаселенныйПункт    = Элемент.ТекстРедактирования;
		
		ИдентификаторНаселенногоПункта = Неопределено;
		ОбновитьНаселенныйПунктИностранногоАдреса();
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("НаселенныйПунктДетально", НаселенныйПунктДетально);
	ПараметрыФормы.Вставить("ФорматАдреса","КЛАДР");
	ПараметрыФормы.Вставить("СервисКлассификатораНедоступен", Истина);
	ОткрытьФорму("Обработка.ВводКонтактнойИнформации.Форма.НаселенныйПунктАдреса", ПараметрыФормы, Элемент, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура НаселенныйПунктИностранныйАдресаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ВыбранноеЗначение=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	ТипЗначения = ТипЗнч(ВыбранноеЗначение);
	
	ФормироватьДетально = Истина;
	
	Если ТипЗначения = Тип("Структура") Тогда
		
		НаселенныйПункт = ВыбранноеЗначение.Представление;
		
		Если ВыбранноеЗначение.Свойство("НаселенныйПунктДетально") Тогда
			// Выбор из формы детального ввода.
			НаселенныйПунктДетально = ВыбранноеЗначение.НаселенныйПунктДетально;
			ФормироватьДетально = Ложь;
		Иначе 
			Если НаселенныйПунктДетально <> Неопределено Тогда
				НовыеДанныеПоНаселенномуПунктуДетально = НаселенныйПунктДетальноПоИдентификатору(ИдентификаторНаселенногоПункта, ВидКонтактнойИнформации.ФорматАдреса);
				Для каждого ЧастьАдреса Из НовыеДанныеПоНаселенномуПунктуДетально Цикл
					Если ЧастьАдреса.Значение.Уровень < 7 Тогда
						НаселенныйПунктДетально[ЧастьАдреса.Ключ] = ЧастьАдреса.Значение;
					КонецЕсли;
				КонецЦикла;
			Иначе
				НаселенныйПунктДетально = НаселенныйПунктДетальноПоИдентификатору(ИдентификаторНаселенногоПункта, ВидКонтактнойИнформации.ФорматАдреса);
			КонецЕсли;
		КонецЕсли;
		
		РегионНеЗагружен = ВыбранноеЗначение.Свойство("РегионЗагружен") И (Не ВыбранноеЗначение.РегионЗагружен);
		Если МожноЗагружатьКлассификатор И РегионНеЗагружен Тогда
			// Предлагаем загрузить классификатор.
			УправлениеКонтактнойИнформациейКлиент.ПредложениеЗагрузкиКлассификатора(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Данные для ""%1"" не загружены.'"), ВыбранноеЗначение.Представление),
				ВыбранноеЗначение.Представление);
		КонецЕсли;
		
	Иначе
		// Иной источник, будет попытка разобрать.
	 	НаселенныйПункт = Строка(ВыбранноеЗначение);
	КонецЕсли;
	
	Контекст = КонтекстФормыКлиент();
	// Так как изменился населенный пункт, то перепроверяем улицу, индекс и представление обновятся там.
	ЗаполнитьПредставлениеАдреса(Контекст);
	КонтекстФормыКлиент(Контекст);
	

КонецПроцедуры

&НаКлиенте
Процедура УлицаИностранныйАдресаПриИзменении(Элемент)
	Контекст = КонтекстФормыКлиент();
	ЗаполнитьПредставлениеАдреса(Контекст);
	КонтекстФормыКлиент(Контекст);
 
КонецПроцедуры

&НаКлиенте
Процедура НаселенныйПунктИностранныйАдресаПриИзменении(Элемент)
	
	ОбновитьНаселенныйПунктИностранногоАдреса();

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНаселенныйПунктИностранногоАдреса()
	
	НаселенныйПунктМассив = СтрРазделить(НаселенныйПункт, ",", Ложь);
	КоличествоЭлементовВНаселенныйПункт = 0;
	СоответствиеУровнейНаселенногоПункта = Новый Соответствие;
	Для каждого НаселенныйПунктДетальноЭлемент Из НаселенныйПунктДетально Цикл
		Если НЕ (НаселенныйПунктДетальноЭлемент.Значение.Уровень = 2 ИЛИ НаселенныйПунктДетальноЭлемент.Значение.Уровень = 5
			ИЛИ НаселенныйПунктДетальноЭлемент.Значение.Уровень > 6) Тогда
			Если ЗначениеЗаполнено(НаселенныйПунктДетальноЭлемент.Значение.Представление) Тогда
				КоличествоЭлементовВНаселенныйПункт = КоличествоЭлементовВНаселенныйПункт + 1;
			КонецЕсли;
		КонецЕсли;
		СоответствиеУровнейНаселенногоПункта.Вставить(НаселенныйПунктДетальноЭлемент.Значение.Уровень, НаселенныйПунктДетальноЭлемент);
	КонецЦикла;
	
	ПозицияВМассиве = НаселенныйПунктМассив.Количество() - 1;
	
	Если ПозицияВМассиве >=0 Тогда
		Если НаселенныйПунктМассив.Количество() = КоличествоЭлементовВНаселенныйПункт Тогда
			Для Уровень = 1 По 6 Цикл
				Если НЕ (Уровень = 2 ИЛИ Уровень = 5) Тогда
					Элемент = СоответствиеУровнейНаселенногоПункта.Получить(Уровень);
					Если Элемент <> Неопределено И ЗначениеЗаполнено(Элемент.Значение.Представление) Тогда
						Элемент.Значение.Представление = СокрЛП(НаселенныйПунктМассив.Получить(ПозицияВМассиве));
						ПозицияВМассиве = ПозицияВМассиве - 1;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		Иначе
			Для Уровень = 1 По 6 Цикл
				Если НЕ (Уровень = 2 ИЛИ Уровень = 5) Тогда
					Элемент = СоответствиеУровнейНаселенногоПункта.Получить(Уровень);
					Если Элемент <> Неопределено Тогда
						Если ПозицияВМассиве >= 0 Тогда 
							Элемент.Значение.Представление = СокрЛП(НаселенныйПунктМассив.Получить(ПозицияВМассиве));
							ПозицияВМассиве = ПозицияВМассиве - 1;
						Иначе
							Элемент.Значение.Представление = "";
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	Иначе
		Для Уровень = 1 По 6 Цикл
			Элемент = СоответствиеУровнейНаселенногоПункта.Получить(Уровень);
			Элемент.Значение.Представление = "";
		КонецЦикла;
	КонецЕсли;
	
	ОбновитьПредставлениеАдреса();

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПредставлениеАдреса()
	Контекст = КонтекстФормыКлиент();
	ЗаполнитьПредставлениеАдреса(Контекст);
	КонтекстФормыКлиент(Контекст);
КонецПроцедуры

&НаКлиенте
Процедура ДомИностранныйАдресаПриИзменении(Элемент)
	ОбновитьПредставлениеАдреса();
КонецПроцедуры

&НаКлиенте
Процедура СтроениеИностранныйАдресаПриИзменении(Элемент)
	ОбновитьПредставлениеАдреса();
КонецПроцедуры

&НаКлиенте
Процедура ПомещениеИностранныйАдресаПриИзменении(Элемент)
	ОбновитьПредставлениеАдреса();
КонецПроцедуры

&НаКлиенте
Процедура ИндексПриИзменении(Элемент)
	ОбновитьПредставлениеАдреса();
КонецПроцедуры

#КонецОбласти
