#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Создает таблицу значений со списком команд во внешней обработке для загрузки из файла.
//
Процедура ЗадатьКомандыЗагрузки(ПараметрыРегистрации) Экспорт
	
	ТаблицаКоманд = Новый ТаблицаЗначений;
	ТаблицаКоманд.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	ТаблицаКоманд.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
	ТаблицаКоманд.Колонки.Добавить("МакетСШаблоном", Новый ОписаниеТипов("Строка"));
	ТаблицаКоманд.Колонки.Добавить("ПолноеИмяОбъектаМетаданных", Новый ОписаниеТипов("Строка"));
	
	ПараметрыРегистрации.Вставить("КомандыЗагрузки", ТаблицаКоманд);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Сообщает все требуемые сведения о процедуре загрузки данных из файла.
//
// Возвращаемое значение
//  Структура - содержит структуру со свойствами:
//     * Представление                           - Строка - Представление в списке вариантов загрузки.
//     * ИмяМакетаСШаблоном						 - Строка - Название макета со структурой данных(необязательный параметр, значение по
//                                           умолчанию - "ЗагрузкаДанныхИзФайла").
//     * ОбязательныеКолонкиМакета                        - Массив - Содержит список обязательных полей для заполнения.
//     * ЗаголовокКолонкиСопоставления	  		 - Строка - Представление колонки сопоставления в шапке таблицы
//                                                     сопоставления данных(необязательный параметр, значение по
//                                                     умолчанию формируются - "Справочник: <синоним справочника>").
//     * ИмяОбъекта								 - Строка - Имя Объекта.
//
Функция ПараметрыЗагрузкиИзФайла(МетаданныеСправочника = Неопределено) Экспорт
	
	ОбязательныеКолонкиМакета = Новый Массив;
	Для каждого Реквизит Из МетаданныеСправочника.Реквизиты Цикл
		Если Реквизит.ПроверкаЗаполнения=ПроверкаЗаполнения.ВыдаватьОшибку Тогда 
			ОбязательныеКолонкиМакета.Добавить(Реквизит.Имя);
		КонецЕсли;
	КонецЦикла;
		
	ПараметрыПоУмолчанию = Новый Структура;
	ПараметрыПоУмолчанию.Вставить("Заголовок", МетаданныеСправочника.Представление());
	ПараметрыПоУмолчанию.Вставить("ОбязательныеКолонки", ОбязательныеКолонкиМакета);
	ПараметрыПоУмолчанию.Вставить("ТипДанныхКолонки", Новый Соответствие);
	Возврат ПараметрыПоУмолчанию;
КонецФункции	

// Сообщает все требуемые сведения о процедуре загрузки данных из файла в Табличную часть.
Функция ПараметрыЗагрузкиИзФайлаВТЧ(ИмяТабличнойЧасти, ДополнительныеПараметры) Экспорт
	
	ПараметрыПоУмолчанию= Новый Структура;
	ПараметрыПоУмолчанию.Вставить("ОбязательныеКолонки",Новый Массив);
	ПараметрыПоУмолчанию.Вставить("ИмяМакетаСШаблоном","ЗагрузкаИзФайла");
	ПараметрыПоУмолчанию.Вставить("ИмяТабличнойЧасти", ИмяТабличнойЧасти);
	ПараметрыПоУмолчанию.Вставить("ТипДанныхКолонки", Новый Соответствие);
	ПараметрыПоУмолчанию.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);
	
	Возврат ПараметрыПоУмолчанию;
	
КонецФункции

// Сообщает все требуемые сведения о процедуре загрузки данных из файла для внешней обработки.
//
// Параметры: 
//    ИмяКоманды - Строка - Имя команды (Идентификатор).
//    СсылкаНаОбработку - Ссылка - Ссылка на обработку.
//    ИмяМакетаСШаблоном - Строка - Имя шаблона с макетом колонок для загрузки данных.
// Возвращаемое значение
//  Структура - содержит структуру со свойствами:
//     * Представление                           - Строка - Представление в списке вариантов загрузки.
//     * ИмяМакетаСШаблоном                      - Строка - Название макета со структурой данных(необязательный
//                                                          параметр, значение по умолчанию - "ЗагрузкаДанныхИзФайла").
//     * ОбязательныеКолонкиМакета               - Массив - Содержит список обязательных полей для заполнения.
//     * ЗаголовокКолонкиСопоставления            - Строка - Представление колонки сопоставления в шапке таблицы
//                                                           сопоставления данных(необязательный параметр, значение по
//                                                           умолчанию формируются - "Справочник: <синоним
//                                                           справочника>").
//     * ИмяОбъекта                               - Строка - Имя Объекта.
//
Функция ПараметрыЗагрузкиИзФайлаВнешняяОбработка(ИмяКоманды, СсылкаНаОбработку, ИмяМакетаСШаблоном) Экспорт
	ОбязательныеКолонкиМакета = Новый Массив;
	
	Если НЕ ЗначениеЗаполнено(ИмяМакетаСШаблоном) Тогда 
		ИмяМакетаСШаблоном = "ЗагрузкаИзФайла";
	КонецЕсли;
	
	ПараметрыЗагрузки = Новый Структура;
	ПараметрыЗагрузки.Вставить("ИмяМакетаСШаблоном", ИмяМакетаСШаблоном);
	ПараметрыЗагрузки.Вставить("ОбязательныеКолонкиМакета", ОбязательныеКолонкиМакета);
	ПараметрыЗагрузки.Вставить("СоответствиеТипаДанныхКолонок", Новый Соответствие);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки") Тогда
		МодульДополнительныеОтчетыИОбработки = ОбщегоНазначения.ОбщийМодуль("ДополнительныеОтчетыИОбработки");
		ВнешнийОбъект = МодульДополнительныеОтчетыИОбработки.ПолучитьОбъектВнешнейОбработки(СсылкаНаОбработку);
	КонецЕсли;
	
	ВнешнийОбъект.ОпределитьПараметрыЗагрузкиДанныхИзФайла(ИмяКоманды, ПараметрыЗагрузки);
	
	ПараметрыЗагрузки.Вставить("Макет", ВнешнийОбъект.МакетСШаблоном(ПараметрыЗагрузки.ИмяМакетаСШаблоном));
	
	Возврат ПараметрыЗагрузки;
КонецФункции

#КонецОбласти

#Область СлужебныеФункции

Процедура СоздатьСписокСправочниковДляЗагрузки(СписокСправочниковДляЗагрузки) Экспорт
	
	ТипСтрока = Новый ОписаниеТипов("Строка");
	ТипБулево = Новый ОписаниеТипов("Булево");

	ИнформацияОСправочниках = Новый ТаблицаЗначений;
	ИнформацияОСправочниках.Колонки.Добавить("ПолноеИмя", ТипСтрока);
	ИнформацияОСправочниках.Колонки.Добавить("Представление", ТипСтрока);
	ИнформацияОСправочниках.Колонки.Добавить("ПрикладнаяЗагрузка", ТипБулево);
	
	Для каждого ОбъектМетаданныхДляВывода Из Метаданные.Справочники Цикл
		Если НЕ СправочникСодержитРеквизитИсключение(ОбъектМетаданныхДляВывода) Тогда
			Строка = ИнформацияОСправочниках.Добавить();
			Строка.Представление = ОбъектМетаданныхДляВывода.Представление();
			Строка.ПолноеИмя = ОбъектМетаданныхДляВывода.ПолноеИмя();
		КонецЕсли;
	КонецЦикла;
	
	ИнтеграцияСтандартныхПодсистем.ПриОпределенииСправочниковДляЗагрузкиДанных(ИнформацияОСправочниках);
	ЗагрузкаДанныхИзФайлаПереопределяемый.ПриОпределенииСправочниковДляЗагрузкиДанных(ИнформацияОСправочниках);
	
	ИнформацияОСправочниках.Колонки.Добавить("ИнформацияОТипеЗагрузки");
	
	Для каждого ИнформацияОСправочнике Из ИнформацияОСправочниках Цикл
		ИнформацияОТипеЗагрузки = Новый Структура;
		Если ИнформацияОСправочнике.ПрикладнаяЗагрузка Тогда
			ИнформацияОТипеЗагрузки.Вставить("Тип", "ПрикладнаяЗагрузка");
		Иначе
			ИнформацияОТипеЗагрузки.Вставить("Тип", "УниверсальнаяЗагрузка");
		КонецЕсли;
		ИнформацияОТипеЗагрузки.Вставить("ПолноеИмяОбъектаМетаданных", ИнформацияОСправочнике.ПолноеИмя);
		ИнформацияОСправочнике.ИнформацияОТипеЗагрузки = ИнформацияОТипеЗагрузки;
	КонецЦикла;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки") Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ДополнительныеОтчетыИОбработкиКоманды.Ссылка,
		|	ДополнительныеОтчетыИОбработкиКоманды.Идентификатор,
		|	ДополнительныеОтчетыИОбработкиКоманды.Представление,
		|	ДополнительныеОтчетыИОбработкиКоманды.Модификатор
		|ИЗ
		|	Справочник.ДополнительныеОтчетыИОбработки.Команды КАК ДополнительныеОтчетыИОбработкиКоманды
		|ГДЕ
		|	ДополнительныеОтчетыИОбработкиКоманды.ВариантЗапуска = &ВариантЗапуска
		|	И ДополнительныеОтчетыИОбработкиКоманды.Ссылка.Вид = &Вид
		|	И НЕ ДополнительныеОтчетыИОбработкиКоманды.Ссылка.ПометкаУдаления
		|	И ДополнительныеОтчетыИОбработкиКоманды.Ссылка.Публикация = &Публикация";
		Запрос.УстановитьПараметр("ВариантЗапуска", Перечисления.СпособыВызоваДополнительныхОбработок.ЗагрузкаДанныхИзФайла);
		Запрос.УстановитьПараметр("Вид", Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительнаяОбработка);
		Запрос.УстановитьПараметр("Публикация", Перечисления.ВариантыПубликацииДополнительныхОтчетовИОбработок.Используется);
		ТаблицаКоманд = Запрос.Выполнить().Выгрузить();
		
		Для Каждого СтрокаТаблицы Из ТаблицаКоманд Цикл
			ИнформацияОТипеЗагрузки = Новый Структура;
			ИнформацияОТипеЗагрузки.Вставить("Тип", "ВнешняяЗагрузка");
			ИнформацияОТипеЗагрузки.Вставить("ПолноеИмяОбъектаМетаданных", СтрокаТаблицы.Идентификатор);
			ИнформацияОТипеЗагрузки.Вставить("Ссылка", СтрокаТаблицы.Ссылка);
			ИнформацияОТипеЗагрузки.Вставить("МакетСШаблоном", СтрокаТаблицы.Модификатор);
			
			Строка = ИнформацияОСправочниках.Добавить();
			Строка.ПолноеИмя = ОбъектМетаданныхДляВывода.ПолноеИмя();
			Строка.ИнформацияОТипеЗагрузки= ИнформацияОТипеЗагрузки;
			Строка.Представление = СтрокаТаблицы.Представление;
		КонецЦикла;
	КонецЕсли;
	
	СписокСправочниковДляЗагрузки.Очистить();
	Для каждого строка Из ИнформацияОСправочниках Цикл 
		СписокСправочниковДляЗагрузки.Добавить(Строка.ИнформацияОТипеЗагрузки, Строка.Представление);
	КонецЦикла;
		
	СписокСправочниковДляЗагрузки.СортироватьПоПредставлению();
	
КонецПроцедуры 

Функция СправочникСодержитРеквизитИсключение(Справочник)
	
	Для каждого Реквизит Из Справочник.ТабличныеЧасти Цикл
		Если Реквизит.Имя <> "КонтактнаяИнформация"
			И Реквизит.Имя <> "ДополнительныеРеквизиты"
			И Реквизит.Имя <> "СертификатыШифрования" Тогда
				Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого Реквизит Из Справочник.Реквизиты Цикл 
		Для каждого ТипРеквизита Из Реквизит.Тип.Типы() Цикл
			Если ТипРеквизита = Тип("ХранилищеЗначения") Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если ТРег(Лев(Справочник.Имя, 7)) = "Удалить" Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#Область ПоискСсылок

Процедура ИнициализироватьРежимПоискСсылок(ШаблонСДанными, ИнформацияПоКолонкам, ОписаниеТипов) Экспорт
	СоответствиеКолонок = Новый Соответствие;
	ЗаголовокКолонки = "";
	Разделитель = "";
	
	Для каждого Тип Из ОписаниеТипов.Типы() Цикл 
		ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип);
		Если ОбъектМетаданных <> Неопределено Тогда
			СтруктураОбъекта = РазложитьПолноеИмяОбъекта(ОбъектМетаданных.ПолноеИмя());
			
			Для каждого Колонка Из ОбъектМетаданных.ВводПоСтроке Цикл 
				Если СоответствиеКолонок.Получить(Колонка.Имя) = Неопределено Тогда 
					
					ЗаголовокКолонки = ЗаголовокКолонки + Разделитель +Колонка.Имя;
					Разделитель = ", ";
					СоответствиеКолонок.Вставить(Колонка.Имя, Колонка.Имя);
				КонецЕсли;
			КонецЦикла;
			Если СтруктураОбъекта.ТипОбъекта = "Документ" Тогда
				ЗаголовокКолонки = ЗаголовокКолонки + Разделитель + "Представление";
			КонецЕсли;
		КонецЕсли;
		
		ЗаголовокКолонки = НСтр("ru = 'Введенные данные'");
		
	КонецЦикла;
	
	ДобавитьИнформациюПоКолонке(ИнформацияПоКолонкам, "Ссылки", ЗаголовокКолонки, Новый ОписаниеТипов("Строка"), Ложь, 1);
	
	Шапка = ШапкаБланкаДляЗаполненияПоИнформацииПоКолонкам(ИнформацияПоКолонкам);
	ШаблонСДанными.Очистить();
	ШаблонСДанными.Вывести(Шапка);
	
	
КонецПроцедуры

Процедура СопоставитьЗначениеКолонкиАвто(ТаблицаСопоставления, ИмяКолонки) Экспорт
	
	Типы = ТаблицаСопоставления.Колонки.ОбъектСопоставления.ТипЗначения.Типы();
	ТекстЗапроса = "";
	Для каждого Тип Из Типы Цикл
		ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип);
		Если ОбъектМетаданных <> Неопределено И ПравоДоступа("Чтение", ОбъектМетаданных) Тогда
			СтруктураОбъекта = РазложитьПолноеИмяОбъекта(ОбъектМетаданных.ПолноеИмя());
			
			МассивКолонок = Новый Массив;
			Для каждого Поле Из ОбъектМетаданных.ВводПоСтроке Цикл
				МассивКолонок.Добавить(Поле.Имя);
			КонецЦикла;
			Если СтруктураОбъекта.ТипОбъекта = "Документ" Тогда
				МассивКолонок.Добавить("Ссылка");
			КонецЕсли;
			
			ТекстЗапроса = СтрокаЗапроса(ТекстЗапроса, СтруктураОбъекта.ТипОбъекта,
			СтруктураОбъекта.НазваниеОбъекта, МассивКолонок);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого Строка Из ТаблицаСопоставления Цикл 
		Если НЕ ЗначениеЗаполнено(Строка[ИмяКолонки]) Тогда 
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекстЗапроса) Тогда
			Значение = ДокументПоПредставлению(Строка[ИмяКолонки], Типы);
			Если Значение = Неопределено Тогда
				Значение = Строка[ИмяКолонки];
			КонецЕсли;
			МассивСсылок = НайтиСсылкиПоПараметрамОтбора(ТекстЗапроса, Значение);
			Если МассивСсылок.Количество() = 1 Тогда
				Строка.ОбъектСопоставления = МассивСсылок[0];
				Строка.РезультатСопоставленияСтроки = "СтрокаСопоставлена";
			ИначеЕсли МассивСсылок.Количество() > 1 Тогда
				СписокНеоднозначностей = Новый СписокЗначений;
				Строка.СписокНеоднозначностей.ЗагрузитьЗначения(МассивСсылок);
				Строка.РезультатСопоставленияСтроки = "Неоднозначность";
			Иначе
				Строка.РезультатСопоставленияСтроки = "НеСопоставлен";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Распознает документ по представлению для режима поиска ссылок.
//
Функция ДокументПоПредставлению(Представление, Типы)
	
	Для каждого Тип Из Типы Цикл
		ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип);
		Если ОбъектМетаданных = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		СтруктураИмениОбъекта = РазложитьПолноеИмяОбъекта(ОбъектМетаданных.ПолноеИмя());
		Если СтруктураИмениОбъекта.ТипОбъекта <> "Документ" Тогда
			Продолжить;
		КонецЕсли;
		
		СтандартныеСвойства = Новый Структура("ПредставлениеОбъекта, РасширенноеПредставлениеОбъекта, ПредставлениеСписка, РасширенноеПредставлениеСписка");
		ЗаполнитьЗначенияСвойств(СтандартныеСвойства, ОбъектМетаданных);
		
		Если ЗначениеЗаполнено(СтандартныеСвойства.ПредставлениеОбъекта) Тогда
			ПредставлениеЭлемента = СтандартныеСвойства.ПредставлениеОбъекта;
		ИначеЕсли ЗначениеЗаполнено(СтандартныеСвойства.РасширенноеПредставлениеОбъекта) Тогда
			ПредставлениеЭлемента = СтандартныеСвойства.РасширенноеПредставлениеОбъекта;
		Иначе
			ПредставлениеЭлемента = ОбъектМетаданных.Представление();
		КонецЕсли;
		
		Если СтрНайти(Представление, ПредставлениеЭлемента) > 0 Тогда
			ПредставлениеНомерИДата = СокрЛП(Сред(Представление, СтрДлина(ПредставлениеЭлемента) + 1));
			ПозицияОкончанияНомера = СтрНайти(ПредставлениеНомерИДата, " ");
			Номер = Лев(ПредставлениеНомерИДата, ПозицияОкончанияНомера - 1);
			ПозицияОт = СтрНайти(НРег(ПредставлениеНомерИДата), "от");
			ПредставлениеДата = СокрЛ(Сред(ПредставлениеНомерИДата, ПозицияОт + 2));
			ПозицияОкончаниеДаты = СтрНайти(ПредставлениеДата, " ");
			ДатаОкругленнаяДоДня = Лев(ПредставлениеДата, ПозицияОкончаниеДаты - 1) + " 00:00:00";
			НомерДокумент = Номер;
			ДатаДокумента = СтроковыеФункцииКлиентСервер.СтрокаВДату(ДатаОкругленнаяДоДня);
		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Истина);
		Документ = Документы[ОбъектМетаданных.Имя].НайтиПоНомеру(НомерДокумент, ДатаДокумента);
		УстановитьПривилегированныйРежим(Ложь);
		
		Если Документ = Неопределено ИЛИ Документ = Документы[ОбъектМетаданных.Имя].ПустаяСсылка() Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Запрос = Новый Запрос; // Проверка доступности документа с учетом RLS
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ДокументДляПроверки.Ссылка
			|ИЗ
			|	Документ." + ОбъектМетаданных.Имя + " КАК ДокументДляПроверки
			|ГДЕ
			|	ДокументДляПроверки.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", Документ.Ссылка);
		РезультатЗапроса = Запрос.Выполнить().Выбрать();
		
		Если РезультатЗапроса.Следующий() Тогда
			Возврат Документ;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция СтрокаЗапроса(ТекстЗапроса, ТипОбъекта, ИмяОбъекта, МассивКолонок)
	
	Если МассивКолонок.Количество() > 0 Тогда
		ТекстГде = "";
		РазделительГде = "";
		Для Каждого Поле Из МассивКолонок Цикл 
			ТекстГде = ТекстГде + РазделительГде + ИмяОбъекта + "." + Поле + " = &ПараметрПоиска";
			РазделительГде = " ИЛИ ";
		КонецЦикла;
		
		ТекстРазрешенные = ?(ПустаяСтрока(ТекстЗапроса), "РАЗРЕШЕННЫЕ ", "");
		ТекстШаблон = "ВЫБРАТЬ " + ТекстРазрешенные + "%1.Ссылка КАК СсылкаНаОбъект ИЗ %2.%1 КАК %1 ГДЕ " + ТекстГде;
		Если ЗначениеЗаполнено(ТекстЗапроса) Тогда 
			ТекстОбъединитьВсе = Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС;
		Иначе
			ТекстОбъединитьВсе = "";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + ТекстОбъединитьВсе + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстШаблон, ИмяОбъекта, ТипОбъекта);
	КонецЕсли;
	Возврат ТекстЗапроса;
	
КонецФункции

Функция НайтиСсылкиПоПараметрамОтбора(ТекстЗапроса, Значение)
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ПараметрПоиска", Значение);
	
	ТаблицаРезультатов = Запрос.Выполнить().Выгрузить();
	МассивРезультат = ТаблицаРезультатов.ВыгрузитьКолонку("СсылкаНаОбъект");
	Возврат МассивРезультат;
КонецФункции

// Добавление информации по колонке для режима поиска ссылок.
//
Процедура ДобавитьИнформациюПоКолонке(ИнформацияПоКолонкам, Имя, Представление, Тип, ОбязательнаДляЗаполнения, Позиция, Ассоциация = "")
	СтрокаИнфоПроКолонки = ИнформацияПоКолонкам.Добавить();
	СтрокаИнфоПроКолонки.ИмяКолонки = Имя;
	СтрокаИнфоПроКолонки.ПредставлениеКолонки = Представление;
	СтрокаИнфоПроКолонки.ТипКолонки = Тип;
	СтрокаИнфоПроКолонки.ОбязательнаДляЗаполнения = ОбязательнаДляЗаполнения;
	СтрокаИнфоПроКолонки.Позиция = Позиция;
	СтрокаИнфоПроКолонки.Ассоциация = ?(ЗначениеЗаполнено(Ассоциация), Ассоциация, Имя);
	СтрокаИнфоПроКолонки.Видимость = Истина;
КонецПроцедуры

#КонецОбласти

// Заполняет таблицу значений сопоставленные данные по данным из макета.
//
Процедура ЗаполнитьТаблицуСопоставленияДаннымиИзШаблонаФон(ПараметрыВыгрузки, АдресХранилища) Экспорт
	
	ШаблонСДанными = ПараметрыВыгрузки.ШаблонСДанными;
	ТаблицаСопоставления = ПараметрыВыгрузки.ТаблицаСопоставления;
	ИнформацияПоКолонкам = ПараметрыВыгрузки.ИнформацияПоКолонкам;
	
	ТаблицаСопоставления.Очистить();
	ЗаполнитьТаблицуСопоставленияЗагружаемымиДанными(ШаблонСДанными, ИнформацияПоКолонкам, ТаблицаСопоставления, Истина);
	
	ПоместитьВоВременноеХранилище(ТаблицаСопоставления, АдресХранилища);
	
КонецПроцедуры

Процедура ЗаполнитьТаблицуСопоставленияДаннымиИзШаблона(ШаблонСДанными, ТаблицаСопоставления, ИнформацияПоКолонкам) Экспорт
	
	ОпределитьПозицииКолонокВМакете(ШаблонСДанными, ИнформацияПоКолонкам);
	ТаблицаСопоставления.Очистить();
	ЗаполнитьТаблицуСопоставленияЗагружаемымиДанными(ШаблонСДанными, ИнформацияПоКолонкам, ТаблицаСопоставления);
	
КонецПроцедуры

Процедура ЗаполнитьТаблицуСопоставленияЗагружаемымиДанными(ШаблонСДанными, ТаблицаИнформацияПоКолонкам, ТаблицаСопоставления, ФоновоеЗадание = Ложь)
	
	КорректировкаИдентификатора = 0;
	Для НомерСтроки = 2 По ШаблонСДанными.ВысотаТаблицы Цикл 
		СтрокаТаблицыПустая = Истина;
		НоваяСтрока = ТаблицаСопоставления.Добавить();
		НоваяСтрока.Идентификатор = НомерСтроки - 1 - КорректировкаИдентификатора;
		НоваяСтрока.РезультатСопоставленияСтроки = "НеСопоставлено";
		
		Для НомерКолонки = 1 По ШаблонСДанными.ШиринаТаблицы Цикл
			
			Ячейка = ШаблонСДанными.ПолучитьОбласть(НомерСтроки, НомерКолонки, НомерСтроки, НомерКолонки).ТекущаяОбласть;
			Колонка = НайтиИнформациюОКолонке(ТаблицаИнформацияПоКолонкам, "Позиция", НомерКолонки);
			
			Если Колонка <> Неопределено Тогда
				ИмяКолонки = Колонка.ИмяКолонки;
				ТипДанных = ТипЗнч(НоваяСтрока[ИмяКолонки]);
				
				Если ТипДанных <> Тип("Строка") И ТипДанных <> Тип("Булево") И ТипДанных <> Тип("Число") И ТипДанных <> Тип("Дата")  И ТипДанных <> Тип("УникальныйИдентификатор") Тогда 
					ДанныеЯчейки = ЗначениеЯчейки(Колонка, Ячейка.Текст);
				Иначе
					ДанныеЯчейки = Ячейка.Текст;
				КонецЕсли;
				Если СтрокаТаблицыПустая Тогда
					СтрокаТаблицыПустая = НЕ ЗначениеЗаполнено(ДанныеЯчейки);
				КонецЕсли;
				НоваяСтрока[ИмяКолонки] = ДанныеЯчейки;
			КонецЕсли;
		КонецЦикла;
		Если СтрокаТаблицыПустая Тогда
			ТаблицаСопоставления.Удалить(НоваяСтрока);
			КорректировкаИдентификатора = КорректировкаИдентификатора + 1;
		КонецЕсли;
		
		Если ФоновоеЗадание Тогда
			Процент = Окр(НомерСтроки *100 / ШаблонСДанными.ВысотаТаблицы);
			МодульДлительныеОперации = ОбщегоНазначения.ОбщийМодуль("ДлительныеОперации");
			МодульДлительныеОперации.СообщитьПрогресс(Процент);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЗначениеЯчейки(Колонка, ЗначениеЯчейки)
	
	ДанныеЯчейки = "";
	Для каждого ТипДанных Из Колонка.ТипКолонки.Типы() Цикл 
		Объект = Метаданные.НайтиПоТипу(ТипДанных);
		ОписаниеОбъекта = РазложитьПолноеИмяОбъекта(Объект.ПолноеИмя());
		Если ОписаниеОбъекта.ТипОбъекта = "Справочник" Тогда
			Если НЕ Объект.Автонумерация И Объект.ДлинаКода > 0 Тогда 
				ДанныеЯчейки = Справочники[ОписаниеОбъекта.НазваниеОбъекта].НайтиПоКоду(ЗначениеЯчейки, Истина);
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ДанныеЯчейки) Тогда 
				ДанныеЯчейки = Справочники[ОписаниеОбъекта.НазваниеОбъекта].НайтиПоНаименованию(ЗначениеЯчейки, Истина);
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ДанныеЯчейки) Тогда 
				ДанныеЯчейки = Справочники[ОписаниеОбъекта.НазваниеОбъекта].НайтиПоКоду(ЗначениеЯчейки, Истина);
			КонецЕсли;
		ИначеЕсли ОписаниеОбъекта.ТипОбъекта = "Перечисление" Тогда 
			Для каждого ЗначениеПеречисления Из Перечисления[ОписаниеОбъекта.НазваниеОбъекта] Цикл 
				Если Строка(ЗначениеПеречисления) = СокрЛП(ЗначениеЯчейки) Тогда 
					ДанныеЯчейки = ЗначениеПеречисления; 
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли ОписаниеОбъекта.ТипОбъекта = "ПланСчетов" Тогда
			ДанныеЯчейки = ПланыСчетов[ОписаниеОбъекта.НазваниеОбъекта].НайтиПоКоду(ЗначениеЯчейки);
			Если ДанныеЯчейки.Пустая() Тогда 
				ДанныеЯчейки = ПланыСчетов[ОписаниеОбъекта.НазваниеОбъекта].НайтиПоНаименованию(ЗначениеЯчейки, Истина);
			КонецЕсли;
		ИначеЕсли ОписаниеОбъекта.ТипОбъекта = "ПланВидовХарактеристик" Тогда
			Если НЕ Объект.Автонумерация И Объект.ДлинаКода > 0 Тогда 
				ДанныеЯчейки = ПланыВидовХарактеристик[ОписаниеОбъекта.НазваниеОбъекта].НайтиПоКоду(ЗначениеЯчейки, Истина);
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ДанныеЯчейки) Тогда 
				ДанныеЯчейки = ПланыВидовХарактеристик[ОписаниеОбъекта.НазваниеОбъекта].НайтиПоНаименованию(ЗначениеЯчейки, Истина);
			КонецЕсли;
		Иначе
			ДанныеЯчейки =  Строка(ЗначениеЯчейки);
		КонецЕсли;
		Если ЗначениеЗаполнено(ДанныеЯчейки) Тогда 
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДанныеЯчейки;
	
КонецФункции

Процедура ОпределитьПозицииКолонокВМакете(ШаблонСДанными, ИнформацияПоКолонкам)
	
	ОбластьЗаголовка = ОбластьЗаголовкаШаблонаТаблицы(ШаблонСДанными);
	
	СоответствиеКолонок = Новый Соответствие;
	Для НомерКолонки = 1 По ОбластьЗаголовка.ШиринаТаблицы Цикл 
		Ячейка=ШаблонСДанными.ПолучитьОбласть(1, НомерКолонки, 1, НомерКолонки).ТекущаяОбласть;
		ИмяКолонкиВМакете = Ячейка.Текст;
		СоответствиеКолонок.Вставить(ИмяКолонкиВМакете, НомерКолонки);
	КонецЦикла;
	
	Для каждого Колонка Из ИнформацияПоКолонкам Цикл 
		Позиция = СоответствиеКолонок.Получить(Колонка.ПредставлениеКолонки);
		Если Позиция <> Неопределено Тогда 
			Колонка.Позиция = Позиция;
		Иначе
			Колонка.Позиция = -1;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры


#Область ПодготовкаКЗагрузкеДанных

Функция ОбластьЗаголовкаШаблонаТаблицы(Шаблон)
	МетаданныеОбластьЗаголовокТаблицы = Шаблон.Области.Найти("Шапка");
	
	Если МетаданныеОбластьЗаголовокТаблицы = Неопределено Тогда 
		ОбластьЗаголовокТаблицы = Шаблон.ПолучитьОбласть("R1");
	Иначе 
		ОбластьЗаголовокТаблицы = Шаблон.ПолучитьОбласть("Шапка"); 
	КонецЕсли;
	
	Возврат ОбластьЗаголовокТаблицы;
	
КонецФункции

// Формирует макет табличного документа на основание реквизитов справочника для универсальной загрузки.
//
Процедура ИнформациюПоКолонкамИзРеквизитовСправочника(ПараметрыЗагрузки, ИнформацияПоКолонкам) Экспорт
	
	ТекстПримечания = "";
	ИнформацияПоКолонкам.Очистить();
	Позиция = 1;
	ОписаниеТиповСтрока = Новый ОписаниеТипов("Строка");
	
	МетаданныеСправочника= Метаданные.НайтиПоПолномуИмени(ПараметрыЗагрузки.ПолноеИмяОбъекта);
	
	Если НЕ МетаданныеСправочника.Автонумерация И МетаданныеСправочника.ДлинаКода > 0  Тогда
		СоздатьКолонкуСтандартныеРеквизиты(ИнформацияПоКолонкам, МетаданныеСправочника, "Код", Позиция);
		Позиция = Позиция + 1;
	КонецЕсли;
	
	Если МетаданныеСправочника.ДлинаНаименования > 0  Тогда
		СоздатьКолонкуСтандартныеРеквизиты(ИнформацияПоКолонкам, МетаданныеСправочника, "Наименование", Позиция);
		Позиция = Позиция + 1;
	КонецЕсли;
	
	Если МетаданныеСправочника.Иерархический Тогда
		 СоздатьКолонкуСтандартныеРеквизиты(ИнформацияПоКолонкам, МетаданныеСправочника, "Родитель", Позиция);
		 Позиция = Позиция + 1;
	КонецЕсли;
	 
	Если МетаданныеСправочника.Владельцы.Количество() > 0 Тогда
		 СоздатьКолонкуСтандартныеРеквизиты(ИнформацияПоКолонкам, МетаданныеСправочника, "Владелец", Позиция);
		 Позиция = Позиция + 1;
	КонецЕсли;
	
	Для каждого Реквизит Из МетаданныеСправочника.Реквизиты Цикл
		
		Если Реквизит.Тип.СодержитТип(Тип("ХранилищеЗначения")) Тогда
			Продолжить;
		КонецЕсли;
		
		ОписаниеТипаКолонки = "";
		
		Если Реквизит.Тип.СодержитТип(Тип("Булево")) Тогда 
			ОписаниеТипаКолонки = НСтр("ru = 'Флаг, Да или 1 / Нет или 0'");
		ИначеЕсли Реквизит.Тип.СодержитТип(Тип("Число")) Тогда 
			ОписаниеТипаКолонки =  СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Число, Длина: %1, Точность: %2'"),
				Строка(Реквизит.Тип.КвалификаторыЧисла.Разрядность),
				Строка(Реквизит.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти));
		ИначеЕсли Реквизит.Тип.СодержитТип(Тип("Строка")) Тогда
			Если Реквизит.Тип.КвалификаторыСтроки.Длина > 0 Тогда
				ДлинаСтроки = Строка(Реквизит.Тип.КвалификаторыСтроки.Длина);
				ОписаниеТипаКолонки =  СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Строка, макс. количество символов: %1'"), ДлинаСтроки);
			Иначе
				ОписаниеТипаКолонки = НСтр("ru = 'Строка неограниченной длины'");
			КонецЕсли;
		ИначеЕсли Реквизит.Тип.СодержитТип(Тип("Дата")) Тогда
			ОписаниеТипаКолонки = Строка(Реквизит.Тип.КвалификаторыДаты.ЧастиДаты);
		ИначеЕсли Реквизит.Тип.СодержитТип(Тип("УникальныйИдентификатор")) Тогда
			ОписаниеТипаКолонки = НСтр("ru = 'УникальныйИдентификатор'");
		КонецЕсли;
		
		ШиринаКолонки = ШиринаКолонкиПоТипу(Реквизит.Тип);
		Подсказка = ?(ЗначениеЗаполнено(Реквизит.Подсказка), Реквизит.Подсказка, Реквизит.Представление()) +  Символы.ПС + ОписаниеТипаКолонки;
		ОбязательноеПоле = ?(Реквизит.ПроверкаЗаполнения = ПроверкаЗаполнения.ВыдаватьОшибку, Истина, Ложь);
		
		СтрокаИнфоПроКолонки = ИнформацияПоКолонкам.Добавить();
		СтрокаИнфоПроКолонки.ИмяКолонки = Реквизит.Имя;
		СтрокаИнфоПроКолонки.ПредставлениеКолонки = Реквизит.Представление();
		СтрокаИнфоПроКолонки.ТипКолонки = Реквизит.Тип;
		СтрокаИнфоПроКолонки.ОбязательнаДляЗаполнения = ОбязательноеПоле;
		СтрокаИнфоПроКолонки.Позиция = Позиция;
		СтрокаИнфоПроКолонки.Видимость = Истина;
		СтрокаИнфоПроКолонки.Примечание = Подсказка;
		СтрокаИнфоПроКолонки.Ширина = ШиринаКолонки;

		Позиция = Позиция + 1;
		
	КонецЦикла;
	
КонецПроцедуры

// Добавление информации о колонке для стандартного реквизита при универсальной загрузке.
//
Процедура СоздатьКолонкуСтандартныеРеквизиты(ИнформацияПоКолонкам, МетаданныеСправочника, ИмяКолонки, Позиция)
	
	Реквизит = МетаданныеСправочника.СтандартныеРеквизиты[ИмяКолонки];
	Представление = МетаданныеСправочника.СтандартныеРеквизиты[ИмяКолонки].Представление();
	ТипДанных = МетаданныеСправочника.СтандартныеРеквизиты[ИмяКолонки].Тип.Типы()[0];
	ОписаниеТипа = МетаданныеСправочника.СтандартныеРеквизиты[ИмяКолонки].Тип;
	
	ШиринаКолонки = 11;
	
	Если ТипДанных = Тип("Строка") Тогда 
		ПредставлениеТипа = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Строка (не более %1 символов)'"), ОписаниеТипа.КвалификаторыСтроки.Длина);
		ШиринаКолонки = ?(ОписаниеТипа.КвалификаторыСтроки.Длина < 30, ОписаниеТипа.КвалификаторыСтроки.Длина + 1, 30);
	ИначеЕсли ТипДанных = Тип("Число") Тогда	
		ПредставлениеТипа = НСтр("ru = 'Число'");
	Иначе
		Если МетаданныеСправочника.СтандартныеРеквизиты[ИмяКолонки].Тип.Типы().Количество() = 1 Тогда 
			ПредставлениеТипа = Строка(ТипДанных); 
		Иначе
			ПредставлениеТипа = "";
			Разделитель = "";
			Для каждого ТипДанные Из МетаданныеСправочника.СтандартныеРеквизиты[ИмяКолонки].Тип.Типы() Цикл 
				ПредставлениеТипа = ПредставлениеТипа  + Разделитель + Строка(ТипДанные);
				Разделитель = " или ";
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	ТекстПримечания = Реквизит.Подсказка + Символы.ПС + ПредставлениеТипа;
	
	ОбязательнаДляЗаполнения = ?(Реквизит.ПроверкаЗаполнения = ПроверкаЗаполнения.ВыдаватьОшибку, Истина, Ложь);
	СтрокаИнфоПроКолонки = ИнформацияПоКолонкам.Добавить();
	СтрокаИнфоПроКолонки.ИмяКолонки = ИмяКолонки;
	СтрокаИнфоПроКолонки.ПредставлениеКолонки = Представление;
	СтрокаИнфоПроКолонки.ТипКолонки = ОписаниеТипа;
	СтрокаИнфоПроКолонки.ОбязательнаДляЗаполнения = ОбязательнаДляЗаполнения;
	СтрокаИнфоПроКолонки.Позиция = Позиция;
	СтрокаИнфоПроКолонки.Видимость = Истина;
	СтрокаИнфоПроКолонки.Примечание = ТекстПримечания;
	СтрокаИнфоПроКолонки.Ширина = ШиринаКолонки;
	
КонецПроцедуры

// Определяет состав колонок для загрузки данных.
//
Процедура ОпределитьИнформацияПоКолонкам(ПараметрыЗагрузки, ИнформацияПоКолонкам, ИменаДобавляемыхКолонок = Неопределено) Экспорт
	
	Если ПараметрыЗагрузки.ТипЗагрузки = "ПрикладнаяЗагрузка" Тогда
		Если ПараметрыЗагрузки.Свойство("Макет") Тогда
			Макет = ПараметрыЗагрузки.Макет;
		Иначе
			Макет = МенеджерОбъекта(ПараметрыЗагрузки.ПолноеИмяОбъекта).ПолучитьМакет("ЗагрузкаИзФайла");
		КонецЕсли;
		ОбластьЗаголовокТаблицы = ОбластьЗаголовкаШаблонаТаблицы(Макет);
		Если ИнформацияПоКолонкам.Количество() = 0 Тогда 
			СоздатьИнформациюПоКолонкамНаОснованиеШаблона(ОбластьЗаголовокТаблицы, ПараметрыЗагрузки, ИнформацияПоКолонкам, Неопределено);
		КонецЕсли;
	ИначеЕсли ПараметрыЗагрузки.ТипЗагрузки = "УниверсальнаяЗагрузка" Тогда
		ИнформацияПоКолонкамНаОснованиеРеквизитов = ИнформацияПоКолонкам.СкопироватьКолонки();
		Если ИнформацияПоКолонкам.Количество() = 0 Тогда
			ИнформациюПоКолонкамИзРеквизитовСправочника(ПараметрыЗагрузки, ИнформацияПоКолонкам);
		Иначе
			ИнформациюПоКолонкамИзРеквизитовСправочника(ПараметрыЗагрузки, ИнформацияПоКолонкамНаОснованиеРеквизитов);
		КонецЕсли;
	ИначеЕсли ПараметрыЗагрузки.ТипЗагрузки = "ВнешняяЗагрузка" И ИнформацияПоКолонкам.Количество() = 0 Тогда
		ОбластьЗаголовокТаблицы = ОбластьЗаголовкаШаблонаТаблицы(ПараметрыЗагрузки.Макет);
		ОбластьЗаголовокТаблицы.Защита = Истина;
		Если ИнформацияПоКолонкам.Количество() = 0 Тогда
			СоздатьИнформациюПоКолонкамНаОснованиеШаблона(ОбластьЗаголовокТаблицы, ПараметрыЗагрузки, ИнформацияПоКолонкам);
		КонецЕсли;
	ИначеЕсли ПараметрыЗагрузки.ТипЗагрузки = "ТабличнаяЧасть" И ИнформацияПоКолонкам.Количество() = 0 Тогда
		ОбластьЗаголовокТаблицы = ОбластьЗаголовкаШаблонаТаблицы(ПараметрыЗагрузки.Макет);
	КонецЕсли;
	
	ТребуетсяПересчетПозиций = Ложь;
	СписокКолонокСФункциональнымиОпциями = КолонкиЗависимыеОтФункциональныхОпций(ПараметрыЗагрузки.ПолноеИмяОбъекта);
	Для каждого ФункциональнаяОпцияКолонкиВключена Из СписокКолонокСФункциональнымиОпциями Цикл 
		СтрокаСИнформациейОКолонке = ИнформацияПоКолонкам.Найти(ФункциональнаяОпцияКолонкиВключена.Ключ, "ИмяКолонки");
		Если СтрокаСИнформациейОКолонке <> Неопределено Тогда
			Если НЕ ФункциональнаяОпцияКолонкиВключена.Значение Тогда
				ИнформацияПоКолонкам.Удалить(СтрокаСИнформациейОКолонке);
				ТребуетсяПересчетПозиций = Истина;
			КонецЕсли;
		Иначе
			Если ФункциональнаяОпцияКолонкиВключена.Значение Тогда
				Если ПараметрыЗагрузки.ТипЗагрузки = "УниверсальнаяЗагрузка" Тогда
					СтрокаСКолонкой = ИнформацияПоКолонкамНаОснованиеРеквизитов.Найти(ФункциональнаяОпцияКолонкиВключена.Ключ, "ИмяКолонки");
					НоваяСтрока = ИнформацияПоКолонкам.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСКолонкой);
				Иначе
					СоздатьИнформациюПоКолонкамНаОснованиеШаблона(ОбластьЗаголовокТаблицы, ПараметрыЗагрузки, ИнформацияПоКолонкам, ФункциональнаяОпцияКолонкиВключена.Ключ);
				КонецЕсли;
				ТребуетсяПересчетПозиций = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ТребуетсяПересчетПозиций Тогда
		ИнформацияПоКолонкам.Сортировать("Позиция");
		Позиция = 1;
		Для каждого Колонка Из ИнформацияПоКолонкам Цикл
			Колонка.Позиция = Позиция;
			Позиция = Позиция + 1;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет таблицу о колонках в макете. Информация используется для построения таблицы сопоставления.
//
// Параметры:
//  ОбластьЗаголовокТаблицы	 - ТекстовыйДокумент - Область заголовка макета.
//  ПараметрыЗагрузкиИзФайла - Структура - Параметры загрузки.
//  ИнформацияПоКолонкам	 - ТаблицаЗначений - Таблица с описание колонок.
//  ИменаДобавляемыхКолонок	 - Строка - список добавляемых колонок через запятую. Если значение не заполонено, то
//                                      добавляются все.
Процедура СоздатьИнформациюПоКолонкамНаОснованиеШаблона(ОбластьЗаголовокТаблицы, ПараметрыЗагрузкиИзФайла, ИнформацияПоКолонкам, ИменаДобавляемыхКолонок = Неопределено) Экспорт
	
	ВыборочноеДобавление = Ложь;
	Если ЗначениеЗаполнено(ИменаДобавляемыхКолонок) Тогда
		ВыборочноеДобавление = Истина;
		МассивДобавляемыхКолонок = СтрРазделить(ИменаДобавляемыхКолонок, ",", Ложь);
		Позиция = ИнформацияПоКолонкам.Количество() + 1;
	Иначе
		ИнформацияПоКолонкам.Очистить();
		Позиция = 1;
	КонецЕсли;
	
	Если ПараметрыЗагрузкиИзФайла.Свойство("ТипДанныхКолонки") Тогда
		СоответствиеТипаДанныхКолонок = ПараметрыЗагрузкиИзФайла.ТипДанныхКолонки;
	Иначе
		СоответствиеТипаДанныхКолонок = Новый Соответствие;
	КонецЕсли;
	
	СписокКолонокСФункциональнымиОпциями = КолонкиЗависимыеОтФункциональныхОпций(ПараметрыЗагрузкиИзФайла.ПолноеИмяОбъекта);
	
	Для НомерКолонки = 1 По ОбластьЗаголовокТаблицы.ШиринаТаблицы Цикл
		Ячейка = ОбластьЗаголовокТаблицы.ПолучитьОбласть(1, НомерКолонки, 1, НомерКолонки).ТекущаяОбласть;
		
		Если СтрНайти(Ячейка.Имя, "R") > 0 И СтрНайти(Ячейка.Имя, "C") > 0 Тогда
			ИмяРеквизита = ?(ЗначениеЗаполнено(Ячейка.ПараметрРасшифровки), Ячейка.ПараметрРасшифровки, Ячейка.Текст);
			ПредставлениеРеквизита = ?(ЗначениеЗаполнено(Ячейка.Текст), Ячейка.Текст, Ячейка.ПараметрРасшифровки);
			Ассоциация = ?(ЗначениеЗаполнено(Ячейка.ПараметрРасшифровки), Ячейка.ПараметрРасшифровки, Ячейка.Текст);
		Иначе	
			ИмяРеквизита = Ячейка.Имя;
			ПредставлениеРеквизита = ?(ЗначениеЗаполнено(Ячейка.Текст), Ячейка.Текст, Ячейка.Имя);
			Ассоциация = ?(ЗначениеЗаполнено(Ячейка.ПараметрРасшифровки), Ячейка.ПараметрРасшифровки, Ячейка.Имя);
		КонецЕсли;
		
		ТипДанныхКолонки = Новый ОписаниеТипов("Строка");
		Если СоответствиеТипаДанныхКолонок <> Неопределено Тогда
			ТипДанныхКолонкиПереопределенный = СоответствиеТипаДанныхКолонок.Получить(ИмяРеквизита);
			Если ТипДанныхКолонкиПереопределенный <> Неопределено Тогда
				ТипДанныхКолонки = ТипДанныхКолонкиПереопределенный;
			КонецЕсли;
		КонецЕсли;
		
		Если ВыборочноеДобавление И МассивДобавляемыхКолонок.Найти(ИмяРеквизита) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ИмяРеквизита) Тогда
			СтрокаИнфоПроКолонки = ИнформацияПоКолонкам.Добавить();
			СтрокаИнфоПроКолонки.ИмяКолонки = ИмяРеквизита;
			СтрокаИнфоПроКолонки.ПредставлениеКолонки = ПредставлениеРеквизита;
			СтрокаИнфоПроКолонки.ТипКолонки = ТипДанныхКолонки;
			СтрокаИнфоПроКолонки.ОбязательнаДляЗаполнения = Ячейка.Шрифт.Жирный;
			СтрокаИнфоПроКолонки.Позиция = Позиция;
			СтрокаИнфоПроКолонки.Ассоциация = ?(ЗначениеЗаполнено(Ассоциация), Ассоциация, ИмяРеквизита);
			СтрокаИнфоПроКолонки.Видимость = Истина;
			СтрокаИнфоПроКолонки.Примечание = Ячейка.Примечание.Текст;
			СтрокаИнфоПроКолонки.Ширина = Ячейка.ШиринаКолонки;
			Позиция = Позиция + 1;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ШиринаКолонкиПоТипу(Тип) 
	
	ШиринаКолонки = 20;
	Если Тип.СодержитТип(Тип("Булево")) Тогда 
		ШиринаКолонки = 3;
	ИначеЕсли Тип.СодержитТип(Тип("Число")) Тогда 
		ШиринаКолонки = Тип.КвалификаторыЧисла.Разрядность + 1;
	ИначеЕсли Тип.СодержитТип(Тип("Строка")) Тогда 
		Если Тип.КвалификаторыСтроки.Длина > 0 Тогда 
			ШиринаКолонки = ?(Тип.КвалификаторыСтроки.Длина > 20, 20, Тип.КвалификаторыСтроки.Длина);
		Иначе
			ШиринаКолонки = 20;
		КонецЕсли;
	ИначеЕсли Тип.СодержитТип(Тип("Дата")) Тогда 
		ШиринаКолонки = 12;
	ИначеЕсли Тип.СодержитТип(Тип("УникальныйИдентификатор")) Тогда 
		ШиринаКолонки = 20;
	Иначе
		Для каждого ТипОбъекта Из  Тип.Типы() Цикл
			МетаданныеОбъекта = Метаданные.НайтиПоТипу(ТипОбъекта);
			СтруктураОбъекта = РазложитьПолноеИмяОбъекта(МетаданныеОбъекта.ПолноеИмя());
			Если СтруктураОбъекта.ТипОбъекта = "Справочник" Тогда 
				Если НЕ МетаданныеОбъекта.Автонумерация И МетаданныеОбъекта.ДлинаКода > 0  Тогда
					ШиринаКолонки = МетаданныеОбъекта.ДлинаКода + 1;
				КонецЕсли;
				Если МетаданныеОбъекта.ДлинаНаименования > 0  Тогда
					Если МетаданныеОбъекта.ДлинаНаименования > ШиринаКолонки Тогда
						ШиринаКолонки = ?(МетаданныеОбъекта.ДлинаНаименования > 30, 30, МетаданныеОбъекта.ДлинаНаименования + 1);
					КонецЕсли;
			КонецЕсли;
		ИначеЕсли СтруктураОбъекта.ТипОбъекта = "Перечисление" Тогда
				ДлинаПредставления =  СтрДлина(МетаданныеОбъекта.Представление());
				ШиринаКолонки = ?( ДлинаПредставления > 30, 30, ДлинаПредставления + 1);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ШиринаКолонки;
	
КонецФункции

Процедура ЗаполнитьЯчейкуЗаголовкаМакета(Ячейка, Текст, Ширина, Подсказка, ОбязательноеПоле, Имя = "") Экспорт
	
	Ячейка.ТекущаяОбласть.Текст = Текст;
	Ячейка.ТекущаяОбласть.Имя = Имя;
	Ячейка.ТекущаяОбласть.ПараметрРасшифровки = Имя;
	Ячейка.ТекущаяОбласть.ЦветФона =  ЦветаСтиля.ЦветФонаШапкиОтчета;
	Ячейка.ТекущаяОбласть.ШиринаКолонки = Ширина;
	Ячейка.ТекущаяОбласть.Примечание.Текст = Подсказка;
	Если ОбязательноеПоле Тогда 
		Ячейка.ТекущаяОбласть.Шрифт = Новый Шрифт(,,Истина);
	Иначе
		Ячейка.ТекущаяОбласть.Шрифт = Новый Шрифт(,,Ложь);
	КонецЕсли;
	
КонецПроцедуры

Процедура ИнициализироватьЗагрузкуВТабличнуюЧасть(ПолноеИмяТабличнойЧасти, ИмяМакетаСШаблоном, ИнформацияПоКолонкам, ШаблонСДанными, ДополнительныеПараметры, Отказ) Экспорт
	
	СтруктураНаименованияОбъекта = РазложитьПолноеИмяОбъекта(ПолноеИмяТабличнойЧасти);
	ПараметрыЗагрузкиИзФайла = ПараметрыЗагрузкиИзФайлаВТЧ(ПолноеИмяТабличнойЧасти, ДополнительныеПараметры);
	ПараметрыЗагрузкиИзФайла.Вставить("ПолноеИмяОбъекта", ПолноеИмяТабличнойЧасти);
	
	Если СтруктураНаименованияОбъекта.ТипОбъекта = "Документ" Тогда
		МенеджерОбъекта = Документы[СтруктураНаименованияОбъекта.НазваниеОбъекта];
		
		МенеджерОбъекта.УстановитьПараметрыЗагрузкиИзФайлаВТЧ(ПараметрыЗагрузкиИзФайла);
		
		Если ПараметрыЗагрузкиИзФайла.Свойство("ИмяМакетаСШаблоном") И ЗначениеЗаполнено(ПараметрыЗагрузкиИзФайла.ИмяМакетаСШаблоном) Тогда
			ИмяМакетаСШаблоном = ПараметрыЗагрузкиИзФайла.ИмяМакетаСШаблоном;
		КонецЕсли;
		
		МакетМетаданные = Метаданные.Документы[СтруктураНаименованияОбъекта.НазваниеОбъекта].Макеты.Найти(ИмяМакетаСШаблоном);
		Если МакетМетаданные = Неопределено Тогда 
			МакетМетаданные= Метаданные.Документы[СтруктураНаименованияОбъекта.НазваниеОбъекта].Макеты.Найти("ЗагрузкаИзФайла" + СтруктураНаименованияОбъекта.ИмяТабличнойЧасти);
			Если МакетМетаданные = Неопределено Тогда 
				МакетМетаданные = Метаданные.Документы[СтруктураНаименованияОбъекта.НазваниеОбъекта].Макеты.Найти("ЗагрузкаИзФайла");
			КонецЕсли;
		КонецЕсли;
		
		Если МакетМетаданные <> Неопределено Тогда
			Макет = МенеджерОбъекта.ПолучитьМакет(МакетМетаданные.Имя);
		Иначе
			ВызватьИсключение НСтр("ru = 'Не найден макет для загрузки данных из файла'");
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		ЗаголовокТаблицы = ОбластьЗаголовкаШаблонаТаблицы(Макет);
		Если ИнформацияПоКолонкам.Количество() = 0 Тогда
			СоздатьИнформациюПоКолонкамНаОснованиеШаблона(ЗаголовокТаблицы, ПараметрыЗагрузкиИзФайла, ИнформацияПоКолонкам);
		КонецЕсли;
		
		СписокКолонокСФункциональнымиОпциями = КолонкиЗависимыеОтФункциональныхОпций(ПолноеИмяТабличнойЧасти);
		Для каждого ФункциональнаяОпцияКолонкиВключена Из СписокКолонокСФункциональнымиОпциями Цикл 
			СтрокаСИнформациейОКолонке = ИнформацияПоКолонкам.Найти(ФункциональнаяОпцияКолонкиВключена.Ключ, "ИмяКолонки");
			Если СтрокаСИнформациейОКолонке <> Неопределено Тогда
				Если НЕ ФункциональнаяОпцияКолонкиВключена.Значение Тогда
					ИнформацияПоКолонкам.Удалить(СтрокаСИнформациейОКолонке);
				КонецЕсли;
			Иначе
				Если ФункциональнаяОпцияКолонкиВключена.Значение Тогда
					СоздатьИнформациюПоКолонкамНаОснованиеШаблона(ЗаголовокТаблицы, ПараметрыЗагрузкиИзФайла, ИнформацияПоКолонкам, ФункциональнаяОпцияКолонкиВключена.Ключ);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		ИнформацияПоКолонкам.Сортировать("Позиция");
		Позиция = 1;
		Для каждого Колонка Из ИнформацияПоКолонкам Цикл
			Колонка.Позиция = Позиция;
			Позиция = Позиция + 1;
		КонецЦикла;
		
		ШаблонСДанными.Вывести(ЗаголовокТаблицы);
	КонецЕсли; 
	
КонецПроцедуры

// Создает шапку бланка по информации о колонках.
//
Функция ШапкаБланкаДляЗаполненияПоИнформацииПоКолонкам(ИнформацияПоКолонкам) Экспорт

	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ПростойШаблон = Обработки.ЗагрузкаДанныхИзФайла.ПолучитьМакет("ПростойШаблон");
	ОбластьЗаголовок = ПростойШаблон.ПолучитьОбласть("Заголовок");
	ИнформацияПоКолонкам.Сортировать("Позиция");
	
	Для Позиция = 0 По ИнформацияПоКолонкам.Количество() -1 Цикл
		Колонка = ИнформацияПоКолонкам.Получить(Позиция);
		
		Если Колонка.Видимость = Истина Тогда
			ОбластьЗаголовок.ТекущаяОбласть.Имя = Колонка.ИмяКолонки;
			ОбластьЗаголовок.ТекущаяОбласть.Расшифровка = Колонка.Ассоциация;
			ОбластьЗаголовок.ТекущаяОбласть.Примечание.Текст = Колонка.Примечание;
			Если ЗначениеЗаполнено(Колонка.Синоним) Тогда 
				ОбластьЗаголовок.Параметры.Заголовок = Колонка.Синоним;
			Иначе
				ОбластьЗаголовок.Параметры.Заголовок = Колонка.ПредставлениеКолонки;
			КонецЕсли;
			Если Колонка.ОбязательнаДляЗаполнения Тогда
				ОбластьЗаголовок.ТекущаяОбласть.Шрифт = Новый Шрифт(,, Истина);
			Иначе
				ОбластьЗаголовок.ТекущаяОбласть.Шрифт = Новый Шрифт(,, Ложь);
			КонецЕсли;
			Если Колонка.Ширина = 0 Тогда 
				ОбластьЗаголовок.ТекущаяОбласть.ШиринаКолонки = ШиринаКолонкиПоТипу(Колонка.ТипКолонки);
			Иначе
				ОбластьЗаголовок.ТекущаяОбласть.ШиринаКолонки = Колонка.Ширина; 
			КонецЕсли;
			ТабличныйДокумент.Присоединить(ОбластьЗаголовок);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
КонецФункции

#КонецОбласти

// Создает таблицу значений по данным из шаблона и сохраняет ее во временное хранилище.
//
Процедура ВыгрузитьДанныеДляТЧ(ШаблонСДанными, ИнформацияПоКолонкам, АдресЗагруженныхДанных) Экспорт
	
	ЗагружаемыеДанные = Новый ТаблицаЗначений;
	ОбластьЗаголовка = ОбластьЗаголовкаШаблонаТаблицы(ШаблонСДанными);
	
	Для каждого Колонка Из ИнформацияПоКолонкам Цикл 
		ЗагружаемыеДанные.Колонки.Добавить(Колонка.ИмяКолонки, Новый ОписаниеТипов("Строка"), Колонка.ПредставлениеКолонки);
	КонецЦикла;
	ОписаниеТипаЧисло = Новый ОписаниеТипов("Число");
	ОписаниеТипаСтрока = Новый ОписаниеТипов("Строка");
	ЗагружаемыеДанные.Колонки.Добавить("Идентификатор",ОписаниеТипаЧисло, "Идентификатор");
	ЗагружаемыеДанные.Колонки.Добавить("РезультатСопоставленияСтроки",ОписаниеТипаСтрока, "Результат");
	ЗагружаемыеДанные.Колонки.Добавить("ОписаниеОшибки",ОписаниеТипаСтрока, "Причина");
	
	КорректировкаИдентификатора = 0;
	
	Для каждого Строка Из ИнформацияПоКолонкам Цикл
		Строка.Позиция = -1;
	КонецЦикла;
	
	Для НомерКолонки = 1 По ШаблонСДанными.ШиринаТаблицы Цикл
		ЯчейкаЗаголовок = ШаблонСДанными.ПолучитьОбласть(1, НомерКолонки, 1, НомерКолонки).ТекущаяОбласть;
		Отбор = Новый Структура("ПредставлениеКолонки", ЯчейкаЗаголовок.Текст);
		НайденныеКолонки = ИнформацияПоКолонкам.НайтиСтроки(Отбор);
		Если НайденныеКолонки.Количество() > 0 Тогда
			НайденныеКолонки[0].Позиция = НомерКолонки;
		КонецЕсли;
	КонецЦикла;
	
	Для НомерСтроки = 2 По ШаблонСДанными.ВысотаТаблицы Цикл
		СтрокаТаблицыПустая = Истина;
		НоваяСтрока = ЗагружаемыеДанные.Добавить();
		НоваяСтрока.Идентификатор =  НомерСтроки - 1 - КорректировкаИдентификатора;
		Для НомерКолонки = 1 По ШаблонСДанными.ШиринаТаблицы Цикл
			Ячейка = ШаблонСДанными.ПолучитьОбласть(НомерСтроки, НомерКолонки, НомерСтроки, НомерКолонки).ТекущаяОбласть;
			
			НайденнаяКолонка = НайтиИнформациюОКолонке(ИнформацияПоКолонкам, "Позиция", НомерКолонки);
			Если НайденнаяКолонка <> Неопределено Тогда
				ИмяКолонки = НайденнаяКолонка.ИмяКолонки;
				НоваяСтрока[ИмяКолонки] = Ячейка.Текст;
				Если СтрокаТаблицыПустая Тогда
					СтрокаТаблицыПустая = Не ЗначениеЗаполнено(Ячейка.Текст);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Если СтрокаТаблицыПустая Тогда
			ЗагружаемыеДанные.Удалить(НоваяСтрока);
			КорректировкаИдентификатора = КорректировкаИдентификатора + 1;
		КонецЕсли;
	КонецЦикла;
	
	АдресЗагруженныхДанных = ПоместитьВоВременноеХранилище(ЗагружаемыеДанные);
КонецПроцедуры

Процедура ЗаполнитьТаблицуПоЗагруженнымДаннымИзФайла(ДанныеИзФайла, ШаблонСДанными, ИнформацияПоКолонкам) Экспорт 
	
	СтрокаЗаголовок= ДанныеИзФайла.Получить(0);
	СоответствиеКолонок = Новый Соответствие;
	
	Для каждого Колонка Из ДанныеИзФайла.Колонки Цикл
		НайденнаяКолонка = НайтиИнформациюОКолонке(ИнформацияПоКолонкам, "Синоним", СтрокаЗаголовок[Колонка.Имя]);
		Если НайденнаяКолонка = Неопределено Тогда
			НайденнаяКолонка = НайтиИнформациюОКолонке(ИнформацияПоКолонкам, "ПредставлениеКолонки", СтрокаЗаголовок[Колонка.Имя]);
		КонецЕсли;
		Если НайденнаяКолонка <> Неопределено Тогда
			СоответствиеКолонок.Вставить(НайденнаяКолонка.Позиция, Колонка.Имя);
		КонецЕсли;
	КонецЦикла;
	
	Для Индекс= 1 По ДанныеИзФайла.Количество() - 1 Цикл
		СтрокаТЗ = ДанныеИзФайла.Получить(Индекс);
		НоваяСтрока = Истина;
		Для НомерКолонки =1 По ШаблонСДанными.ШиринаТаблицы Цикл
			КолонкаВТаблице = СоответствиеКолонок.Получить(НомерКолонки);
			Колонка = ИнформацияПоКолонкам.Найти(НомерКолонки, "Позиция");
			Если Колонка <> Неопределено И Колонка.Видимость = Ложь Тогда
				Продолжить;
			КонецЕсли;
			Ячейка = ШаблонСДанными.ПолучитьОбласть(2, НомерКолонки, 2, НомерКолонки);
			Если КолонкаВТаблице <> Неопределено Тогда 
				Ячейка.ТекущаяОбласть.Текст = СтрокаТЗ[КолонкаВТаблице];
				Ячейка.ТекущаяОбласть.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Обрезать;
			Иначе
				Ячейка.ТекущаяОбласть.Текст = "";
			КонецЕсли;
			Если НоваяСтрока Тогда
				ШаблонСДанными.Вывести(Ячейка);
				НоваяСтрока = Ложь;
			Иначе
				ШаблонСДанными.Присоединить(Ячейка);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	
КонецПроцедуры

Функция НайтиИнформациюОКолонке(ТаблицаИнформацияПоКолонкам, ИмяКолонки, Значение)
	
	Отбор = Новый Структура(ИмяКолонки, Значение);
	НайденныеКолонки = ТаблицаИнформацияПоКолонкам.НайтиСтроки(Отбор);
	Колонка = Неопределено;
	Если НайденныеКолонки.Количество() > 0 Тогда 
		Колонка = НайденныеКолонки[0];
	КонецЕсли;
	
	Возврат Колонка;
КонецФункции

Функция ПолноеИмяОбъектаТабличнаяЧасть(ИмяОбъекта) Экспорт
	
	Результат = СтрРазделить(ИмяОбъекта, ".", Ложь);
	Если Результат.Количество() = 4 Тогда
			Объект = Метаданные.НайтиПоПолномуИмени(ИмяОбъекта);
			Если Объект <> Неопределено Тогда 
				Возврат ИмяОбъекта;
			КонецЕсли;
	ИначеЕсли Результат.Количество() = 3 Тогда
		Если Результат[2] <> "ТабличнаяЧасть" Тогда 
			ИмяОбъекта = Результат[0] + "." + Результат[1] + ".ТабличнаяЧасть." + Результат[2];
			Объект = Метаданные.НайтиПоПолномуИмени(ИмяОбъекта);
			Если Объект <> Неопределено Тогда 
				Возврат ИмяОбъекта;
			КонецЕсли;
		ИначеЕсли Результат[1] = "ТабличнаяЧасть" Тогда 
			ИмяОбъекта = "Документ." + Результат[0] + ".ТабличнаяЧасть." + Результат[2];
			Объект = Метаданные.НайтиПоПолномуИмени(ИмяОбъекта);
			Если Объект <> Неопределено Тогда 
				Возврат ИмяОбъекта;
			КонецЕсли;
			ИмяОбъекта = "Справочник." + Результат[0] + ".ТабличнаяЧасть." + Результат[2];
			Объект = Метаданные.НайтиПоПолномуИмени(ИмяОбъекта);
			Если Объект <> Неопределено Тогда 
				Возврат ИмяОбъекта;
			КонецЕсли;
			Возврат Неопределено;
		КонецЕсли;
		
		Возврат Неопределено;
	ИначеЕсли Результат.Количество() = 2 Тогда
		Если Результат[0] <> "Документ" ИЛИ Результат[0] <> "Справочник" Тогда 
			ИмяОбъекта = "Документ." + Результат[0] + ".ТабличнаяЧасть." + Результат[1];
			Объект = Метаданные.НайтиПоПолномуИмени(ИмяОбъекта);
			Если Объект <> Неопределено Тогда 
				Возврат ИмяОбъекта;
			КонецЕсли;
			ИмяОбъекта = "Справочник." + Результат[0] + ".ТабличнаяЧасть." + Результат[1];
			Объект = Метаданные.НайтиПоПолномуИмени(ИмяОбъекта);
			Если Объект <> Неопределено Тогда 
				Возврат ИмяОбъекта;
			КонецЕсли;
			Возврат Неопределено;
		КонецЕсли;
		НазваниеОбъектаМетаданных = Результат[0];
		ИмяТабличнойЧасти = Результат[1];
		ТипОбъектаМетаданных = Метаданные.Справочники.Найти(НазваниеОбъектаМетаданных);
		Если ТипОбъектаМетаданных <> Неопределено Тогда 
			ТипОбъектаМетаданных = "Справочник";
		Иначе
			ТипОбъектаМетаданных = Метаданные.Документы.Найти(НазваниеОбъектаМетаданных);
			Если ТипОбъектаМетаданных <> Неопределено Тогда 
				ТипОбъектаМетаданных = "Документ";
			Иначе 
				Возврат Неопределено;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Возвращает имя объекта в виде структуры.
//
// Параметры:
//	ПолноеИмяОбъекта - Структура - Имя объекта.
//		* ТипОбъекта - Строка - Тип объекта.
//		* НазваниеОбъекта - Строка - Название объекта.
//		* ИмяТабличнойЧасти - Строка - Имя табличной части.
Функция РазложитьПолноеИмяОбъекта(ПолноеИмяОбъекта) Экспорт
	Результат = СтрРазделить(ПолноеИмяОбъекта, ".", Ложь);
	
	ИмяОбъекта = Новый Структура;
	ИмяОбъекта.Вставить("ПолноеИмяОбъекта", ПолноеИмяОбъекта);
	ИмяОбъекта.Вставить("ТипОбъекта");
	ИмяОбъекта.Вставить("НазваниеОбъекта");
	ИмяОбъекта.Вставить("ИмяТабличнойЧасти");
	
	
	Если Результат.Количество() = 2 Тогда
		Если Результат[0] = "Документ" ИЛИ Результат[0] = "Справочник" ИЛИ Результат[0] = "БизнесПроцесс" 
			ИЛИ Результат[0] = "Перечисление" ИЛИ Результат[0] = "ПланВидовХарактеристик"
			ИЛИ Результат[0] = "ПланСчетов" Тогда
				ИмяОбъекта.ТипОбъекта = Результат[0];
				ИмяОбъекта.НазваниеОбъекта = Результат[1];
		Иначе
				ИмяОбъекта.ТипОбъекта = ОпределитьТипОбъектаМетаданныхПоИмени(Результат[0]);
				ИмяОбъекта.НазваниеОбъекта = Результат[0];
				ИмяОбъекта.ИмяТабличнойЧасти = Результат[1];
		КонецЕсли;
	ИначеЕсли Результат.Количество() = 3 Тогда
		ИмяОбъекта.ТипОбъекта = Результат[0];
		ИмяОбъекта.НазваниеОбъекта = Результат[1];
		ИмяОбъекта.ИмяТабличнойЧасти = Результат[2];
	ИначеЕсли Результат.Количество() = 4 Тогда 
		ИмяОбъекта.ТипОбъекта = Результат[0];
		ИмяОбъекта.НазваниеОбъекта = Результат[1];
		ИмяОбъекта.ИмяТабличнойЧасти = Результат[3];
	ИначеЕсли Результат.Количество() = 1 Тогда
		ИмяОбъекта.ТипОбъекта = ОпределитьТипОбъектаМетаданныхПоИмени(Результат[0]);
		ИмяОбъекта.НазваниеОбъекта = Результат[0];
	КонецЕсли;

	Возврат ИмяОбъекта;
	
КонецФункции

Функция ОпределитьТипОбъектаМетаданныхПоИмени(Имя)
	Для каждого Объект Из Метаданные.Справочники Цикл 
		Если Объект.Имя = Имя Тогда 
			Возврат "Справочник";
		КонецЕсли;
	КонецЦикла;
	
	Для каждого Объект Из Метаданные.Документы Цикл 
		Если Объект.Имя = Имя Тогда 
			Возврат "Документ";
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
КонецФункции

Функция МенеджерОбъекта(ИмяОбъектаСопоставления)
		МассивОбъекта = Обработки.ЗагрузкаДанныхИзФайла.РазложитьПолноеИмяОбъекта(ИмяОбъектаСопоставления);
		Если МассивОбъекта.ТипОбъекта = "Документ" Тогда
			МенеджерОбъекта = Документы[МассивОбъекта.НазваниеОбъекта];
		ИначеЕсли МассивОбъекта.ТипОбъекта = "Справочник" Тогда
			МенеджерОбъекта = Справочники[МассивОбъекта.НазваниеОбъекта];
		Иначе
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Объект ""%1"" не найден'"), ИмяОбъектаСопоставления);
		КонецЕсли;
		
		Возврат МенеджерОбъекта;
КонецФункции

/////////////// Загрузка данных //////////////////////////

Процедура ЗагрузитьФайлВТаблицу(ПараметрыВызоваСервера, АдресХранилища) Экспорт
	
	Расширение = ПараметрыВызоваСервера.Расширение;
	ШаблонСДанными = ПараметрыВызоваСервера.ШаблонСДанными;
	ИмяВременногоФайла = ПараметрыВызоваСервера.ИмяВременногоФайла;
	ИнформацияПоКолонкам = ПараметрыВызоваСервера.ИнформацияПоКолонкам;
	
	Если Расширение = "xlsx" Тогда 
		ЗагрузитьФайлExcel2007ВТаблицу(ИмяВременногоФайла, ШаблонСДанными, ИнформацияПоКолонкам);
	ИначеЕсли Расширение = "csv" Тогда 
		ЗагрузитьCSVФайлВТаблицу(ИмяВременногоФайла, ШаблонСДанными, ИнформацияПоКолонкам);
	Иначе
		ШаблонСДанными.Прочитать(ИмяВременногоФайла);
	КонецЕсли;
	
	АдресХранилища = ПоместитьВоВременноеХранилище(ШаблонСДанными, АдресХранилища);
	
КонецПроцедуры

#Область ЗагрузкаФайловФорматаExcel2007

Процедура ЗагрузитьФайлExcel2007ВТаблицу(ПутьКФайлу, ШаблонСДанными, ИнформацияПоКолонкам) Экспорт
	
	Файл = Новый Файл(ПутьКФайлу);
	Если НЕ Файл.Существует() Тогда
		Возврат;
	КонецЕсли;
	
	Таблица = ТаблицаИзФайлаExcel2007(ПутьКФайлу);
	Если Таблица <> Неопределено Тогда
		ЗаполнитьТаблицуПоЗагруженнымДаннымИзФайла(Таблица, ШаблонСДанными, ИнформацияПоКолонкам);
	КонецЕсли;
	
КонецПроцедуры

Функция ТаблицаИзФайлаExcel2007(ПутьКФайлу)
	
	ВременныйКаталог = КаталогВременныхФайлов() + ПолучитьРазделительПути() + "excel2007";
	УдалитьФайлы(ВременныйКаталог);
	
	РаспаковатьФайл(ПутьКФайлу, ВременныйКаталог);
	
	ФайлСтрок = ВременныйКаталог + ПолучитьРазделительПути() + "xl" + ПолучитьРазделительПути() +"sharedStrings.xml";
	СписокСтрок = ПрочитатьСписокСтрок(ФайлСтрок);
	
	ФайлФорматов = ВременныйКаталог + ПолучитьРазделительПути() + "xl" + ПолучитьРазделительПути() +"styles.xml";
	СписокФорматов = ПрочитатьСписокФорматов(ФайлФорматов);
	
	НомерЛиста = 1;
	ФайлЛиста = ВременныйКаталог + ПолучитьРазделительПути() + "xl" + ПолучитьРазделительПути() + "worksheets" + ПолучитьРазделительПути() + "sheet" + НомерЛиста + ".xml";
	Файл = Новый Файл(ФайлЛиста);
	Если НЕ Файл.Существует() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	МассивБукв = ПолучитьМассивБукв();
	ДеревоДанных = ПолучитьДеревоДанных(ФайлЛиста);
	
	Таблица = Новый ТаблицаЗначений;
	
	// Создаем колонки
	Колонки = ДеревоДанных.Строки.Найти("dimension", "Объект", Истина);
	Счетчик = 0;
	Для Каждого Строка Из Колонки.Строки Цикл
		Если Строка.Объект = "ref" Тогда
			Диапазон = Строка.Значение; 
			// Поиск максимального значения колонки.
			Счетчик = МассивБукв.Количество();
			Пока Счетчик > 0 Цикл 
				Счетчик = Счетчик - 1;
				Если СтрНайти(Диапазон, МассивБукв[Счетчик]) > 0 Тогда
					Для Индекс = 0 По Счетчик Цикл
						Таблица.Колонки.Добавить(МассивБукв[Индекс]);
					КонецЦикла;
					Счетчик = 0;
				КонецЕсли;
			КонецЦикла;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	// читаем строки
	СтрСтрок = ДеревоДанных.Строки.Найти("sheetData", "Объект", Истина);
	Для Каждого Строка Из СтрСтрок.Строки Цикл
		НоваяСтрока = Таблица.Добавить();
		
		Для Каждого Колонка Из Строка.Строки Цикл
			Если Колонка.Объект <> "c" Тогда
				Продолжить;
			КонецЕсли;
			
			ЗначениеЯчейки = Неопределено;
			
			СтрЗначение = Колонка.Строки.Найти("v", "Объект");
			Если СтрЗначение <> Неопределено Тогда
				ЗначениеЯчейки = СтрЗначение.Значение;
			КонецЕсли;
			
			ЯчейкаСодержитТекст = Ложь;
			СтрЗначение = Колонка.Строки.Найти("t", "Объект");
			Если СтрЗначение <> Неопределено И СтрЗначение.Значение = "s" И ЗначениеЯчейки <> Неопределено Тогда
				ЯчейкаСодержитТекст = Истина;
				Позиция = Число(ЗначениеЯчейки); 
				Если СписокСтрок.Количество() > Позиция Тогда
					ЗначениеЯчейки = СписокСтрок.Получить(Позиция).Значение;
				КонецЕсли;
			КонецЕсли;
			
			сОбъект = Колонка.Строки.Найти("s", "Объект");
			Если сОбъект <> Неопределено Тогда
				СтрЗначение = СтрокуВЧисло(Колонка.Строки.Найти("s", "Объект").Значение, -1);
				Если СтрЗначение >= 0 Тогда
					ИмяФормата = СписокФорматов.Получить(СтрЗначение);
					Если ИмяФормата = "Дата" ИЛИ ИмяФормата = "ДатаВремя" ИЛИ ИмяФормата = "Время" Тогда
						Если ЗначениеЗаполнено(ЗначениеЯчейки) И НЕ ЯчейкаСодержитТекст Тогда
							ПозицияРазделителя = СтрНайти(ЗначениеЯчейки, ".");
							Если ПозицияРазделителя > 0 Тогда 
								КоличествоДней = СтрокуВЧисло(Лев(ЗначениеЯчейки, ПозицияРазделителя - 1)) * 86400 - 2 * 86400;
								КоличествоСекунд = СтрокуВЧисло(Сред(ЗначениеЯчейки, ПозицияРазделителя + 1)) - 2 * 60;
							Иначе
								КоличествоДней = СтрокуВЧисло(ЗначениеЯчейки) * 86400 - 2 * 86400;
								КоличествоСекунд = 0;
							КонецЕсли;
							ПолученнаяДата = Дата(1900, 1, 1, 0, 0, 0) + КоличествоДней + КоличествоСекунд;
							Если ИмяФормата = "Дата" Тогда 
								ЗначениеЯчейки = Формат(ПолученнаяДата, "ДЛФ=D");
							ИначеЕсли ИмяФормата = "ДатаВремя" Тогда 
								ЗначениеЯчейки = Формат(ПолученнаяДата, "ДЛФ=DT");
							ИначеЕсли ИмяФормата = "Время" Тогда 
								ЗначениеЯчейки = Формат(ПолученнаяДата, "ДЛФ=T");
							КонецЕсли;
						КонецЕсли;
					Иначе
						Если ИмяФормата = "Число" Тогда
							ЗначениеЯчейкиЧисло = Формат(СтрокуВЧисло(ЗначениеЯчейки), "ЧРГ=''; ЧГ=0");
							Если НЕ ЗначениеЗаполнено(ЗначениеЯчейкиЧисло) Тогда
								ЗначениеЯчейки = Формат(ЗначениеЯчейки, "ЧРГ=''; ЧГ=0");
							Иначе
								ЗначениеЯчейки = ЗначениеЯчейкиЧисло;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			// поиск колонки
			СтрЗначение = Колонка.Строки.Найти("r", "Объект");
			Если СтрЗначение <> Неопределено Тогда
				ИмяКолонки = СтрЗначение.Значение;
			КонецЕсли;
			ИндексСтроки = Неопределено;
			Счетчик = МассивБукв.Количество();
			Пока Счетчик > 0 Цикл 
				Счетчик = Счетчик - 1;
				Если СтрНайти(ИмяКолонки, МассивБукв[Счетчик])>0 Тогда
					ИндексСтроки = Счетчик;
					Счетчик = 0;
				КонецЕсли;   
			КонецЦикла;
			
			НоваяСтрока[МассивБукв[ИндексСтроки]] = ЗначениеЯчейки;
		КонецЦикла;
	КонецЦикла;
	Возврат Таблица;
	
КонецФункции

Процедура РаспаковатьФайл(Файл, Каталог)
	Архив = Новый ЧтениеZipФайла;
	Архив.Открыть(Файл);
	Архив.ИзвлечьВсе(Каталог, РежимВосстановленияПутейФайловZIP.Восстанавливать);
КонецПроцедуры

Функция ПолучитьМассивБукв()
	МассивБукв = Новый Массив;
	МассивБукв.Добавить("A");
	МассивБукв.Добавить("B");
	МассивБукв.Добавить("C");
	МассивБукв.Добавить("D");
	МассивБукв.Добавить("E");
	МассивБукв.Добавить("F");
	МассивБукв.Добавить("G");
	МассивБукв.Добавить("H");
	МассивБукв.Добавить("I");
	МассивБукв.Добавить("J");
	МассивБукв.Добавить("K");
	МассивБукв.Добавить("L");
	МассивБукв.Добавить("M");
	МассивБукв.Добавить("N");
	МассивБукв.Добавить("O");
	МассивБукв.Добавить("P");
	МассивБукв.Добавить("Q");
	МассивБукв.Добавить("R");
	МассивБукв.Добавить("S");
	МассивБукв.Добавить("T");
	МассивБукв.Добавить("U");
	МассивБукв.Добавить("V");
	МассивБукв.Добавить("W");
	МассивБукв.Добавить("X");
	МассивБукв.Добавить("Y");
	МассивБукв.Добавить("Z");
	
	Возврат МассивБукв;
КонецФункции

Функция ПрочитатьСписокСтрок(ФайлСтрок)
	
	Строки = Новый СписокЗначений;
	ЭлементСпискаЗначений	= Неопределено;
	ПроверкаНаличияФайла	= Новый Файл(ФайлСтрок);
	
	Если ПроверкаНаличияФайла.Существует() Тогда
		
		XMLФайл = Новый ЧтениеXML;
		XMLФайл.ОткрытьФайл(ФайлСтрок);
		Пока XMLФайл.Прочитать() Цикл
			
			Если XMLФайл.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				
				Если XMLФайл.Имя = "sst" Тогда
					КоличествоЗаписей = XMLФайл.ПолучитьАтрибут("uniqueCount"); // Количество полей (не используется на текущем этапе)
				ИначеЕсли XMLФайл.Имя = "si" Тогда
					ЭлементСпискаЗначений = Строки.Добавить("");
				КонецЕсли;
				
			ИначеЕсли XMLФайл.ТипУзла = ТипУзлаXML.Текст Тогда
				ЭлементСпискаЗначений.Значение = ЭлементСпискаЗначений.Значение + ?(ЗначениеЗаполнено(ЭлементСпискаЗначений.Значение), XMLФайл.Значение, СокрЛ(XMLФайл.Значение));
			КонецЕсли;
			
		КонецЦикла;
		XMLФайл.Закрыть();
		
	КонецЕсли;
	Возврат Строки;
КонецФункции

Функция ПолучитьДеревоДанных(Файл)
	
	ДеревоДанных = Новый ДеревоЗначений;
	ДеревоДанных.Колонки.Добавить("Объект");
	ДеревоДанных.Колонки.Добавить("Значение");
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(Файл);
	
	ТекЭлемент = Неопределено;
	ТекБаза = Неопределено;
	
	Пока ЧтениеXML.Прочитать() Цикл
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			РежимЗагрузки = ЧтениеXML.Имя;
			
			Если ТекЭлемент = Неопределено Тогда
				ТекЭлемент = ДеревоДанных.Строки.Добавить();
				ТекЭлемент.Объект = РежимЗагрузки;
			Иначе
				ТекЭлемент = ТекЭлемент.Строки.Добавить();
				ТекЭлемент.Объект = РежимЗагрузки;					
			КонецЕсли;
			
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			Если ТекЭлемент = Неопределено Тогда
				ТекЭлемент = Неопределено;
			Иначе
				ТекЭлемент = ТекЭлемент.Родитель;
			КонецЕсли;
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
			ТекЭлемент.Значение = ЧтениеXML.Значение;
		КонецЕсли;
		
		Для Индекс = 0 По ЧтениеXML.КоличествоАтрибутов() - 1 Цикл
			Строка = ТекЭлемент.Строки.Добавить();
			Строка.Объект = ЧтениеXML.ИмяАтрибута(Индекс);
			Строка.Значение = ЧтениеXML.ЗначениеАтрибута(Индекс);
		КонецЦикла;
	КонецЦикла;
	
	ЧтениеXML.Закрыть();
	
	Возврат ДеревоДанных;
КонецФункции

Функция ПрочитатьСписокФорматов(ФайлФорматов)
	
	ХМЛ = Новый ЧтениеXML;
	ХМЛ.ОткрытьФайл(ФайлФорматов);
	ОписаниеФорматов = Новый Соответствие;
	
	Пока ХМЛ.Прочитать() Цикл
		Если ХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента И ХМЛ.Имя = "cellXfs" Тогда
			
			Позиция = 0;
			Пока ХМЛ.Прочитать() Цикл
				Если ХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента И ХМЛ.Имя = "xf" Тогда
					
					Если ХМЛ.ЗначениеАтрибута("numFmtId") <> Неопределено Тогда 
						ОписаниеФорматов.Вставить(Позиция, "Строка"); // Общий формат 0 берем как строку
						НомерФормата =  Число(ХМЛ.ЗначениеАтрибута("numFmtId"));
						Если НомерФормата > 0 И НомерФормата < 12 Тогда
							ОписаниеФорматов[Позиция] = "Число";
						ИначеЕсли НомерФормата > 13 И НомерФормата <= 17 Тогда
							ОписаниеФорматов[Позиция] = "Дата";
						ИначеЕсли НомерФормата >= 18 И НомерФормата <= 21 Тогда
							ОписаниеФорматов[Позиция] = "Время";
						ИначеЕсли НомерФормата = 22 Тогда
							ОписаниеФорматов[Позиция] = "ДатаВремя";
						ИначеЕсли НомерФормата >= 164 Тогда // Пользовательские форматы пока оставляем текстом, но необходимо смотреть по признакам.
							ОписаниеФорматов[Позиция] = "Строка";
						КонецЕсли;
						
					КонецЕсли;
					Позиция = Позиция + 1;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	ХМЛ.Закрыть();
	Возврат ОписаниеФорматов;
КонецФункции

// Превращает строку в число без вызова исключений. Стандартная функция преобразования.
//   Число() строго контролирует отсутствие каких либо символов кроме числовых.
//
Функция СтрокуВЧисло(Знач Значение, ЗначениеПоУмолчанию = 0)
	
	Попытка
		Если Значение = Неопределено ИЛИ Значение ="0" Тогда
			
			// Представление значения по умолчанию обрабатываем отдельно
			Результат =ЗначениеПоУмолчанию;
			
		Иначе
			
			СтепеньЧисла = 0;
			Позиция = СтрНайти(Значение, "E");
			Если Позиция > 0 Тогда
				СтепеньЧисла = Сред(Значение, Позиция + 1);
				Значение = Лев(Значение, Позиция - 1);
			КонецЕсли;
			
			ЦелевойТип = Новый ОписаниеТипов("Число");
			Результат = ЦелевойТип.ПривестиЗначение(Значение);
			
			Если СтепеньЧисла <> 0 Тогда
				Результат = Результат * Pow(10, СтепеньЧисла);
			КонецЕсли;
			
		КонецЕсли;
		
	Исключение
		
		Результат = Значение;
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область РаботаСCSVФайлами

Процедура ЗагрузитьCSVФайлВТаблицу(ИмяФайла, ШаблонСДанными, ИнформацияПоКолонкам) Экспорт
	
	Файл = Новый Файл(ИмяФайла);
	Если НЕ Файл.Существует() Тогда 
		Возврат;
	КонецЕсли;
	
	ЧтениеТекста = Новый ЧтениеТекста(ИмяФайла);
	Строка = ЧтениеТекста.ПрочитатьСтроку();
	Если Строка = Неопределено Тогда 
		ТекстСообщения = НСтр("ru = 'Не получилось загрузить данные из этого файла. Убедитесь в корректности данных в файле.'");
		Возврат;
	КонецЕсли;
	
	КолонкиШапки = СтрРазделить(Строка, ";", Ложь);
	Источник = Новый ТаблицаЗначений;
	ПозицияКолонкиВФайле = Новый Соответствие();
	
	Позиция = 1;
	Для каждого Колонка Из КолонкиШапки Цикл
		
		НайденнаяКолонка = НайтиИнформациюОКолонке(ИнформацияПоКолонкам, "Синоним", Колонка);
		Если НайденнаяКолонка = Неопределено Тогда
			НайденнаяКолонка = НайтиИнформациюОКолонке(ИнформацияПоКолонкам, "ПредставлениеКолонки", Колонка);
		КонецЕсли;
		
		Если НайденнаяКолонка <> Неопределено Тогда
			НоваяКолонка = Источник.Колонки.Добавить();
			НоваяКолонка.Имя = НайденнаяКолонка.ИмяКолонки;
			НоваяКолонка.Заголовок = Колонка;
			ПозицияКолонкиВФайле.Вставить(Позиция, НоваяКолонка.Имя);
			Позиция = Позиция + 1;
		КонецЕсли;
	КонецЦикла;
	
	Если Источник.Колонки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Пока Строка <> Неопределено Цикл
		НоваяСтрока = Источник.Добавить();
		Позиция = СтрНайти(Строка, ";");
		Индекс = 0;
		Пока Позиция > 0 Цикл
			Если Источник.Колонки.Количество() < Индекс + 1 Тогда
				Прервать;
			КонецЕсли;
			ИмяКолонки = ПозицияКолонкиВФайле.Получить(Индекс + 1);
			Если ИмяКолонки <> Неопределено Тогда
				НоваяСтрока[ИмяКолонки] = Лев(Строка, Позиция - 1);
			КонецЕсли;
			Строка = Сред(Строка, Позиция + 1);
			Позиция = СтрНайти(Строка, ";");
			Индекс = Индекс + 1;
		КонецЦикла;
		Если Источник.Колонки.Количество() = Индекс + 1  Тогда
			НоваяСтрока[Индекс] = Строка;
		КонецЕсли;

		Строка = ЧтениеТекста.ПрочитатьСтроку();
	КонецЦикла;
	
	ЗаполнитьТаблицуПоЗагруженнымДаннымИзФайла(Источник, ШаблонСДанными, ИнформацияПоКолонкам);
	
КонецПроцедуры

Процедура СохранитьТаблицуВCSVФайл(ПутьКФайлу, ИнформацияПоКолонкам) Экспорт
	
	ФорматЗаголовкаДляCSV = "";
	
	Для каждого Колонка Из ИнформацияПоКолонкам Цикл 
		ФорматЗаголовкаДляCSV = ФорматЗаголовкаДляCSV + Колонка.ПредставлениеКолонки + ";";
	КонецЦикла;
	
	Если СтрДлина(ФорматЗаголовкаДляCSV) > 0 Тогда
		ФорматЗаголовкаДляCSV = Лев(ФорматЗаголовкаДляCSV, СтрДлина(ФорматЗаголовкаДляCSV)-1);
	КонецЕсли;
	
	Файл = Новый ЗаписьТекста(ПутьКФайлу);
	Файл.ЗаписатьСтроку(ФорматЗаголовкаДляCSV);
	Файл.Закрыть();
	
КонецПроцедуры

#КонецОбласти

#Область ДлительныеОперации

Процедура ЗаписатьСопоставленныеДанные(ПараметрыВыгрузки, АдресХранилища) Экспорт
	
	СопоставленныеДанные = ПараметрыВыгрузки.СопоставленныеДанные;
	ИмяОбъектаСопоставления =ПараметрыВыгрузки.ИмяОбъектаСопоставления;
	ПараметрыЗагрузки = ПараметрыВыгрузки.ПараметрыЗагрузки;
	ИнформацияПоКолонкам = ПараметрыВыгрузки.ИнформацияПоКолонкам;
	
	СоздаватьЕслиНеСопоставлено = ПараметрыЗагрузки.СоздаватьЕслиНеСопоставлено;
	ОбновлятьСуществующие = ПараметрыЗагрузки.ОбновлятьСуществующие;
	
	ТипСтрока = Новый ОписаниеТипов("Строка");
	
	ИмяСправочника = РазложитьПолноеИмяОбъекта(ИмяОбъектаСопоставления).НазваниеОбъекта;
	МенеджерСправочника = Справочники[ИмяСправочника];
	
	НомерСтроки = 0;
	ВсегоСтрок = СопоставленныеДанные.Количество();
	Для каждого СтрокаТаблицы Из СопоставленныеДанные Цикл 
		НомерСтроки = НомерСтроки + 1;
		Попытка
			НачатьТранзакцию();
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ОбъектСопоставления) Тогда 
				Если СоздаватьЕслиНеСопоставлено Тогда 
					ЭлементСправочника = МенеджерСправочника.СоздатьЭлемент();
					СтрокаТаблицы.ОбъектСопоставления = ЭлементСправочника;
					СтрокаТаблицы.РезультатСопоставленияСтроки = "Создан";
				Иначе
					СтрокаТаблицы.РезультатСопоставленияСтроки = "Пропущен";
					УстановитьПроцентПрогресса(ВсегоСтрок, НомерСтроки);
					Продолжить;
				КонецЕсли;
			Иначе
				Если НЕ ОбновлятьСуществующие Тогда 
					СтрокаТаблицы.РезультатСопоставленияСтроки = "Пропущен";
					УстановитьПроцентПрогресса(ВсегоСтрок, НомерСтроки);
					Продолжить;
				КонецЕсли;
				
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить("Справочник." + ИмяСправочника);
				ЭлементБлокировки.УстановитьЗначение("Ссылка", СтрокаТаблицы.ОбъектСопоставления);
				
				ЭлементСправочника = СтрокаТаблицы.ОбъектСопоставления.ПолучитьОбъект();
				СтрокаТаблицы.РезультатСопоставленияСтроки = "Обновлен";
				Если ЭлементСправочника = Неопределено Тогда
					ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Номенклатура с артикулом %1 не существует.'"),
						СтрокаТаблицы.Артикул);
				КонецЕсли;
			КонецЕсли;
			
			Для каждого Колонка Из ИнформацияПоКолонкам Цикл 
				Если Колонка.Видимость Тогда
					ЭлементСправочника[Колонка.ИмяКолонки] = СтрокаТаблицы[Колонка.ИмяКолонки];
				КонецЕсли;
			КонецЦикла;
			
			Если ЭлементСправочника.ПроверитьЗаполнение() Тогда 
				ЭлементСправочника.Записать();
				ЗафиксироватьТранзакцию();
			Иначе
				СтрокаТаблицы.РезультатСопоставленияСтроки = "Пропущен";
				СообщенияПользователю = ПолучитьСообщенияПользователю(Истина);
				
				Если СообщенияПользователю.Количество() > 0 Тогда 
					ТекстСообщений = "";
					Для каждого СообщениеПользователю Из СообщенияПользователю Цикл
						ТекстСообщений = текстСообщений + СообщениеПользователю.Текст + Символы.ПС;
					КонецЦикла;
					СтрокаТаблицы.ОписаниеОшибки = ТекстСообщений;
				КонецЕсли;
			
				ОтменитьТранзакцию();

			КонецЕсли;
			
			УстановитьПроцентПрогресса(ВсегоСтрок, НомерСтроки);
		Исключение
			ОтменитьТранзакцию();
			СтрокаТаблицы.РезультатСопоставленияСтроки = "Пропущен";
			СтрокаТаблицы.ОписаниеОшибки = НСтр("ru = 'Невозможна запись из-за некорректности данных'");
		КонецПопытки;
	
	КонецЦикла;
	
	АдресХранилища = ПоместитьВоВременноеХранилище(СопоставленныеДанные, АдресХранилища);
	
КонецПроцедуры

Процедура УстановитьПроцентПрогресса(Всего, НомерСтроки)
	Процент = НомерСтроки * 50 / Всего;
	МодульДлительныеОперации = ОбщегоНазначения.ОбщийМодуль("ДлительныеОперации");
	МодульДлительныеОперации.СообщитьПрогресс(Процент);
КонецПроцедуры

Процедура СформироватьОтчетОЗагрузкеФон(ПараметрыВыгрузки, АдресХранилища) Экспорт
	
	ТаблицаОтчет = ПараметрыВыгрузки.ТаблицаОтчет;
	СопоставленныеДанные  = ПараметрыВыгрузки.СопоставленныеДанные;
	ИнформацияПоКолонкам  = ПараметрыВыгрузки.ИнформацияПоКолонкам;
	ШаблонСДанными = ПараметрыВыгрузки.ШаблонСДанными;
	ТипОтчета = ПараметрыВыгрузки.ТипОтчета;
	РассчитыватьПроцентПрогресса = ПараметрыВыгрузки.РассчитыватьПроцентПрогресса;
	
	Если Не ЗначениеЗаполнено(ТипОтчета) Тогда
		ТипОтчета = "ВсеЭлементы";
	КонецЕсли;
	
	СформироватьМакетОтчета(ТаблицаОтчет, ШаблонСДанными);
	
	ОбластьЗаголовка = ОбластьЗаголовкаШаблонаТаблицы(ТаблицаОтчет);
	
	КоличествоСозданных = 0;
	КоличествоОбновленных = 0;
	КоличествоПропущенных = 0;
	КоличествоПропущенныхСОшибкой = 0;
	Для НомерСтроки = 1 По СопоставленныеДанные.Количество() Цикл
		Строка = СопоставленныеДанные.Получить(НомерСтроки - 1);
		
		Ячейка = ТаблицаОтчет.ПолучитьОбласть(НомерСтроки + 1, 1, НомерСтроки + 1, 1);
		Ячейка.ТекущаяОбласть.Текст = Строка.РезультатСопоставленияСтроки;
		Ячейка.ТекущаяОбласть.Расшифровка = Строка.ОбъектСопоставления;
		Ячейка.ТекущаяОбласть.Примечание.Текст = Строка.ОписаниеОшибки;
		Если Строка.РезультатСопоставленияСтроки = "Создан" Тогда 
			Ячейка.ТекущаяОбласть.ЦветТекста = ЦветаСтиля.РезультатУспехЦвет;
			КоличествоСозданных = КоличествоСозданных + 1;
		ИначеЕсли Строка.РезультатСопоставленияСтроки = "Обновлен" Тогда
			Ячейка.ТекущаяОбласть.ЦветТекста = ЦветаСтиля.ПоясняющийТекст;
			КоличествоОбновленных = КоличествоОбновленных + 1;
		Иначе
			Ячейка.ТекущаяОбласть.ЦветТекста = ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет;
			КоличествоПропущенных = КоличествоПропущенных + 1;
			Если ЗначениеЗаполнено(Строка.ОписаниеОшибки) Тогда
				КоличествоПропущенныхСОшибкой = КоличествоПропущенныхСОшибкой + 1;
			КонецЕсли;
		КонецЕсли;
		
		Если ТипОтчета = "Новые" И Строка.РезультатСопоставленияСтроки <> "Создан" Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипОтчета = "Обновленные" И Строка.РезультатСопоставленияСтроки <> "Обновлен" Тогда 
			Продолжить;
		КонецЕсли;
		
		Если ТипОтчета = "Пропущенные" И Строка.РезультатСопоставленияСтроки <> "Пропущен" Тогда 
			Продолжить;
		КонецЕсли;
		
		ТаблицаОтчет.Вывести(Ячейка);
		Для Индекс = 1 По ИнформацияПоКолонкам.Количество() Цикл 
			Ячейка = ТаблицаОтчет.ПолучитьОбласть(НомерСтроки + 1, Индекс + 1, НомерСтроки + 1, Индекс + 1);
			
			Отбор = Новый Структура("Позиция", Индекс);
			НайденныеКолонки = ИнформацияПоКолонкам.НайтиСтроки(Отбор);
			Если НайденныеКолонки.Количество() > 0 Тогда 
				ИмяКолонки = НайденныеКолонки[0].ИмяКолонки;
				Ячейка.ТекущаяОбласть.Расшифровка = Строка.ОбъектСопоставления;
				Ячейка.ТекущаяОбласть.Текст = Строка[ИмяКолонки];
				Ячейка.ТекущаяОбласть.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Обрезать;
			КонецЕсли;
			ТаблицаОтчет.Присоединить(Ячейка);
			
		КонецЦикла;
		
		Если РассчитыватьПроцентПрогресса Тогда 
			Процент = Окр(НомерСтроки * 50 / СопоставленныеДанные.Количество()) + 50;
			МодульДлительныеОперации = ОбщегоНазначения.ОбщийМодуль("ДлительныеОперации");
			МодульДлительныеОперации.СообщитьПрогресс(Процент);
		КонецЕсли;
		
	КонецЦикла;
	
	Результат = Новый Структура;
	Результат.Вставить("ТипОтчета", ТипОтчета);
	Результат.Вставить("Всего", СопоставленныеДанные.Количество());
	Результат.Вставить("Создано", КоличествоСозданных);
	Результат.Вставить("Обновлено", КоличествоОбновленных);
	Результат.Вставить("Пропущено", КоличествоПропущенных);
	Результат.Вставить("Некорректных", КоличествоПропущенныхСОшибкой);
	Результат.Вставить("ТаблицаОтчет", ТаблицаОтчет);
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Результат, АдресХранилища); 
	
КонецПроцедуры

Процедура СформироватьМакетОтчета(ТаблицаОтчет, ШаблонСДанными)
	
	ТаблицаОтчет.Очистить();
	Ячейка = ШаблонСДанными.ПолучитьОбласть(1, 1, 1, 1);
	
	ШапкаТаблицы = ШаблонСДанными.ПолучитьОбласть("R1");
	ЗаполнитьЯчейкуЗаголовкаМакета(Ячейка, НСтр("ru ='Результат'"), 12, НСтр("ru ='Результат загрузки данных'"), Истина);
	ТаблицаОтчет.Присоединить(ШапкаТаблицы); 
	ТаблицаОтчет.ВставитьОбласть(Ячейка.ТекущаяОбласть, ТаблицаОтчет.Область("C1"), ТипСмещенияТабличногоДокумента.ПоГоризонтали);
	
	ТаблицаОтчет.ФиксацияСверху = 1;
КонецПроцедуры

#КонецОбласти

//////////////////// Функциональные опции ///////////////////////////////////////

// Возвращает колонки зависимые от функциональных опций.
//
// Параметры:
//  ПолноеИмяОбъекта - Строка - Полное наименование объекта.
// Возвращаемое значение:
//   -  Соответствие - 
Функция КолонкиЗависимыеОтФункциональныхОпций(ПолноеИмяОбъекта)
	
	ФункциональныеОпцииКолонок = ДоступностьОбъектовПоОпциям(ПолноеИмяОбъекта);
	СписокРеквизитов = Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъекта).Реквизиты;
	
	ИнформацияОФункциональныхОпциях = Новый Соответствие;
	
	Для каждого Реквизит Из СписокРеквизитов Цикл
		СтатусФункциональнойОпции = ФункциональныеОпцииКолонок.Получить(Реквизит);
		Если СтатусФункциональнойОпции <> Неопределено Тогда
				ИнформацияОФункциональныхОпциях.Вставить(Реквизит.Имя, СтатусФункциональнойОпции);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ИнформацияОФункциональныхОпциях;
	
КонецФункции

// Доступность объектов метаданных по функциональным опциям.
//
Функция ДоступностьОбъектовПоОпциям(ИмяОбъекта) Экспорт
	Параметры = ОбщегоНазначенияПовтИсп.ОпцииИнтерфейса();
	Если ТипЗнч(Параметры) = Тип("ФиксированнаяСтруктура") Тогда
		Параметры = Новый Структура(Параметры);
	КонецЕсли;
	
	ДоступностьОбъектов = Новый Соответствие;
	Для Каждого ФункциональнаяОпция Из Метаданные.ФункциональныеОпции Цикл
		Для Каждого Элемент Из ФункциональнаяОпция.Состав Цикл
			Если Элемент.Объект <> Неопределено Тогда
				Если СтрНайти(Элемент.Объект.ПолноеИмя(), ИмяОбъекта) > 0 Тогда
					Значение = ПолучитьФункциональнуюОпцию(ФункциональнаяОпция.Имя, Параметры);
					Если Значение = Истина Тогда
						ДоступностьОбъектов.Вставить(Элемент.Объект, Истина);
					Иначе
						Если ДоступностьОбъектов[Элемент.Объект] = Неопределено Тогда
							ДоступностьОбъектов.Вставить(Элемент.Объект, Ложь);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	Возврат ДоступностьОбъектов;
КонецФункции


#КонецОбласти

#КонецЕсли
