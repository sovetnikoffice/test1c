&НаКлиенте
Перем ОбновитьИнтерфейс;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Значения реквизитов формы
	РежимРаботы = ОбщегоНазначенияПовтИсп.РежимРаботыПрограммы();
	РежимРаботы = Новый ФиксированнаяСтруктура(РежимРаботы);
	
	// СтандартныеПодсистемы.УдалениеПомеченныхОбъектов
	Если Не РежимРаботы.МодельСервиса И РежимРаботы.ЭтоАдминистраторСистемы Тогда
		РегламентноеЗадание = РегламентныеЗаданияНайтиПредопределенное("УдалениеПомеченных");
		Если РегламентноеЗадание <> Неопределено Тогда
			УдалениеПомеченныхИдентификатор = РегламентноеЗадание.УникальныйИдентификатор;
			УдалениеПомеченныхИспользование = РегламентноеЗадание.Использование;
			УдалениеПомеченныхРасписание    = РегламентноеЗадание.Расписание;
		Иначе
			Элементы.ГруппаУдалениеПомеченныхОбъектовПоРасписанию.Видимость = Ложь;
		КонецЕсли;
	Иначе
		Элементы.ГруппаУдалениеПомеченныхОбъектовПоРасписанию.Видимость = Ложь;
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УдалениеПомеченныхОбъектов
	
	// СтандартныеПодсистемы.РегламентныеЗадания
	Элементы.ГруппаОбработкаРегламентныеИФоновыеЗадания.Видимость = РежимРаботы.ЭтоАдминистраторСистемы;
	// Конец СтандартныеПодсистемы.РегламентныеЗадания
	
	// СтандартныеПодсистемы.УправлениеИтогамиИАгрегатами
	Элементы.ГруппаОбработкаУправлениеИтогамиИАгрегатамиОткрыть.Видимость = РежимРаботы.ЭтоАдминистраторПрограммы;
	// Конец СтандартныеПодсистемы.УправлениеИтогамиИАгрегатами
	
	// СтандартныеПодсистемы.ПолнотекстовыйПоиск
	Элементы.ГруппаУправлениеПолнотекстовымПоискомИИзвлечениемТекстов.Видимость = РежимРаботы.ЭтоАдминистраторСистемы;
	// Конец СтандартныеПодсистемы.ПолнотекстовыйПоиск
	
	// СтандартныеПодсистемы.РезервноеКопированиеИБ
	ПоддержкаРезервногоКопированияВМоделиСервиса = Истина;
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.РезервноеКопированиеОбластейДанных
	ПоддержкаРезервногоКопированияВМоделиСервиса = РезервноеКопированиеОбластейДанных.РезервноеКопированиеИспользуется();
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.РезервноеКопированиеОбластейДанных
	Элементы.ГруппаРезервноеКопированиеИВосстановление.Видимость        = ((РежимРаботы.Локальный Или РежимРаботы.Автономный) И РежимРаботы.ЭтоАдминистраторСистемы
		И Не РежимРаботы.ЭтоВебКлиент) ИЛИ (РежимРаботы.МодельСервиса И РежимРаботы.ЭтоАдминистраторПрограммы И ПоддержкаРезервногоКопированияВМоделиСервиса);
	ОбновитьНастройкиРезервногоКопирования();
	Элементы.ГруппаВосстановлениеРезервнойКопии.Видимость               = (РежимРаботы.Локальный Или РежимРаботы.Автономный) И РежимРаботы.ЭтоАдминистраторСистемы;
	Элементы.ГруппаВосстановлениеРезервнойКопииВМоделиСервиса.Видимость = РежимРаботы.МодельСервиса И РежимРаботы.ЭтоАдминистраторПрограммы 
		И ПоддержкаРезервногоКопированияВМоделиСервиса;
	// Конец СтандартныеПодсистемы.РезервноеКопированиеИБ
	
	Элементы.ГруппаКлассификаторы.Видимость = РежимРаботы.Локальный Или РежимРаботы.Автономный;
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	ОценкаПроизводительностиСуществует = ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОценкаПроизводительности");
	Элементы.ГруппаОценкаПроизводительности.Видимость = (РежимРаботы.ЭтоАдминистраторСистемы И ОценкаПроизводительностиСуществует);
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности
	
	// СтандартныеПодсистемы.Валюты
	Элементы.ГруппаОбработкаЗагрузкаКурсовВалют.Видимость = РежимРаботы.Локальный;
	// Конец СтандартныеПодсистемы.Валюты
	
	// СтандартныеПодсистемы.Банки
	Элементы.ГруппаЗагрузитьКлассификаторБанков.Видимость = РежимРаботы.Локальный И РежимРаботы.ЭтоАдминистраторСистемы;
	// Конец СтандартныеПодсистемы.Банки
	
	// СтандартныеПодсистемы.ЗащитаПерсональныхДанных
	Элементы.ГруппаОткрытьНастройкиРегистрацииСобытийДоступаКПерсональнымДанным.Видимость = РежимРаботы.ЭтоАдминистраторСистемы;
	// Конец СтандартныеПодсистемы.ЗащитаПерсональныхДанных
	
	// СтандартныеПодсистемы.ГрупповоеИзменениеОбъектов
	Элементы.ГруппаОбработкаГрупповоеИзменениеОбъектов.Видимость = РежимРаботы.ЭтоАдминистраторПрограммы;
	// Конец СтандартныеПодсистемы.ГрупповоеИзменениеОбъектов
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	Элементы.ГруппаДополнительныеОтчетыПоАдминистрированию.Видимость = НаборКонстант.ИспользоватьДополнительныеОтчетыИОбработки;
	Элементы.ГруппаДополнительныеОбработкиПоАдминистрированию.Видимость = НаборКонстант.ИспользоватьДополнительныеОтчетыИОбработки;
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.АдресныйКлассификатор
	ВидимостьГруппы = РежимРаботы.Локальный Или РежимРаботы.Автономный;
	Элементы.ГруппаАдресныйКлассификаторНастройки.Видимость = ВидимостьГруппы;
	Элементы.ГруппаАдресныйКлассификаторКоманды.Видимость   = ВидимостьГруппы;
	// Конец СтандартныеПодсистемы.АдресныйКлассификатор
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	Элементы.ГруппаПроверкаКонтрагентов.Видимость = РежимРаботы.ЭтоАдминистраторСистемы;
	Если РежимРаботы.ЭтоАдминистраторСистемы Тогда
		
		ПроверкаКонтрагентов.УстановитьВидимостьИЗаголовокПредупрежденияПроТестовыйРежим(
			Элементы.ПредупреждениеПроТестовыйРежимПроверкиКонтрагента);
		ОпределитьНастройкиРегламентногоЗаданияПроверкиКонтрагентов();
	
	КонецЕсли;
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	// СтандартныеПодсистемы.ЦентрМониторинга
	ЦентрМониторингаСуществует = ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЦентрМониторинга");
	Элементы.ГруппаЦентрМониторинга.Видимость = (РежимРаботы.ЭтоАдминистраторСистемы И ЦентрМониторингаСуществует);
	
	Если (РежимРаботы.ЭтоАдминистраторСистемы И ЦентрМониторингаСуществует) Тогда
		ПараметрыЦентраМониторинга = ПолучитьПараметрыЦентраМониторинга();
		ЦентрМониторингаРазрешитьОтправлятьДанные = ПолучитьПереключательОтправкиДанных(ПараметрыЦентраМониторинга.ВключитьЦентрМониторинга, ПараметрыЦентраМониторинга.ЦентрОбработкиИнформацииОПрограмме);
		
		ПараметрыСервиса = Новый Структура("Сервер, АдресРесурса, Порт");
		Если ЦентрМониторингаРазрешитьОтправлятьДанные = 0 Тогда
			ПараметрыСервиса.Сервер = ПараметрыЦентраМониторинга.СерверПоУмолчанию;
			ПараметрыСервиса.АдресРесурса = ПараметрыЦентраМониторинга.АдресРесурсаПоУмолчанию;
			ПараметрыСервиса.Порт = ПараметрыЦентраМониторинга.ПортПоУмолчанию;
		ИначеЕсли ЦентрМониторингаРазрешитьОтправлятьДанные = 1 Тогда
			ПараметрыСервиса.Сервер = ПараметрыЦентраМониторинга.Сервер;
			ПараметрыСервиса.АдресРесурса = ПараметрыЦентраМониторинга.АдресРесурса;
			ПараметрыСервиса.Порт = ПараметрыЦентраМониторинга.Порт;
		ИначеЕсли ЦентрМониторингаРазрешитьОтправлятьДанные = 2 Тогда
			ПараметрыСервиса = Неопределено;	
		КонецЕсли;
		
		Если ПараметрыСервиса <> Неопределено Тогда
			Если ПараметрыСервиса.Порт = 80 Тогда
				Схема = "http://";
				Порт = "";
			ИначеЕсли ПараметрыСервиса.Порт = 443 Тогда
				Схема = "https://";
				Порт = "";
			Иначе
				Схема = "http://";
				Порт = ":" + Формат(ПараметрыСервиса.Порт, "ЧН=0; ЧГ=");
			КонецЕсли;
			
			ЦентрМониторингаАдресСервиса = Схема + ПараметрыСервиса.Сервер + Порт + "/" + ПараметрыСервиса.АдресРесурса;
		Иначе
			ЦентрМониторингаАдресСервиса = "";
		КонецЕсли;
		
		УстановитьДоступностьЦентрМониторингаНаСервере(ЦентрМониторингаРазрешитьОтправлятьДанные);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ЦентрМониторинга
	
	// Обновление состояния элементов.
	УстановитьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.РезервноеКопированиеИБ
	Если ИмяСобытия = "ЗакрытаФормаНастройкиРезервногоКопирования" Тогда
		ОбновитьНастройкиРезервногоКопирования();
	КонецЕсли;
	// Конец СтандартныеПодсистемы.РезервноеКопированиеИБ
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	ОбновитьИнтерфейсПрограммы();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// СтандартныеПодсистемы.УдалениеПомеченныхОбъектов
&НаКлиенте
Процедура УдалениеПомеченныхИспользованиеПриИзменении(Элемент)
	РегламентныеЗаданияИспользованиеПриИзменении("УдалениеПомеченных");
КонецПроцедуры
// Конец СтандартныеПодсистемы.УдалениеПомеченныхОбъектов

// СтандартныеПодсистемы.ВерсионированиеОбъектов
&НаКлиенте
Процедура ИспользоватьВерсионированиеОбъектовПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.РезервноеКопированиеИБ
&НаКлиенте
Процедура РезервноеКопированиеПрограммыНажатие(Элемент)
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.РезервноеКопированиеОбластейДанных
	Если РежимРаботы.МодельСервиса Тогда
		ОткрытьФорму("ОбщаяФорма.СозданиеРезервнойКопии", , ЭтотОбъект);
		Возврат;
	КонецЕсли;
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.РезервноеКопированиеОбластейДанных
	
	ОткрытьФорму("Обработка.РезервноеКопированиеИБ.Форма", , ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаРезервногоКопированияНажатие(Элемент)
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.РезервноеКопированиеОбластейДанных
	Если РежимРаботы.МодельСервиса Тогда
		ОткрытьФорму("Обработка.НастройкаРезервногоКопированияПриложения.Форма", , ЭтотОбъект);
		Возврат;
	КонецЕсли;
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.РезервноеКопированиеОбластейДанных
	
	ОткрытьФорму(РезервноеКопированиеИБКлиент.ИмяФормыНастроекРезервногоКопирования(),, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВосстановлениеИзРезервнойКопииНажатие(Элемент)
	
	ОткрытьФорму("Обработка.РезервноеКопированиеИБ.Форма.ВосстановлениеДанныхИзРезервнойКопии", , ЭтотОбъект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.РезервноеКопированиеИБ

// СтандартныеПодсистемы.ОценкаПроизводительности
&НаКлиенте
Процедура ВыполнятьЗамерыПроизводительностиПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ОценкаПроизводительности

// СтандартныеПодсистемы.ОбновлениеВерсииИБ
&НаКлиенте
Процедура ДетализироватьОбновлениеИБВЖурналеРегистрацииПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ОбновлениеВерсииИБ

// СтандартныеПодсистемы.АдресныйКлассификатор
&НаКлиенте
Процедура АдресныйКлассификаторПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент, Ложь);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.АдресныйКлассификатор

// СтандартныеПодсистемы.РаботаСКонтрагентами
&НаКлиенте
Процедура АвтоматическаяПроверкаИспользованиеПриИзменении(Элемент)
	РегламентныеЗаданияИспользованиеПриИзменении("АвтоматическиПроверятьКонтрагентов");
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСКонтрагентами

// СтандартныеПодсистемы.РаботаСКонтрагентами
&НаКлиенте
Процедура ИспользоватьПроверкуКонтрагентовПриИзменении(Элемент)
	
	ИспользоватьПроверкуКонтрагентовПриИзмененииСервер(Элемент.Имя);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСКонтрагентами

// СтандартныеПодсистемы.ЦентрМониторинга
&НаКлиенте
Процедура РазрешитьОтправлятьДанныеПриИзменении(Элемент)
	УстановитьДоступностьЦентрМониторингаНаКлиенте(ЦентрМониторингаРазрешитьОтправлятьДанные);
	Если ЦентрМониторингаРазрешитьОтправлятьДанные = 2 Тогда
		ПараметрыЦентраМониторингаЗапись = Новый Структура("ВключитьЦентрМониторинга, ЦентрОбработкиИнформацииОПрограмме", Ложь, Ложь);
	ИначеЕсли ЦентрМониторингаРазрешитьОтправлятьДанные = 1 Тогда
		ПараметрыЦентраМониторингаЗапись = Новый Структура("ВключитьЦентрМониторинга, ЦентрОбработкиИнформацииОПрограмме", Ложь, Истина);
	ИначеЕсли ЦентрМониторингаРазрешитьОтправлятьДанные = 0 Тогда
		ПараметрыЦентраМониторингаЗапись = Новый Структура("ВключитьЦентрМониторинга, ЦентрОбработкиИнформацииОПрограмме", Истина, Ложь);
	КонецЕсли;
	ЦентрМониторингаАдресСервиса = ПолучитьАдресСервиса();
	РазрешитьОтправлятьДанныеПриИзмененииНаСервере(ПараметрыЦентраМониторингаЗапись);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ЦентрМониторинга

// СтандартныеПодсистемы.ЦентрМониторинга
&НаКлиенте
Процедура ЦентрМониторингаАдресСервисаПриИзменении(Элемент)
	Попытка
		СтруктураАдреса = ОбщегоНазначенияКлиентСервер.СтруктураURI(ЦентрМониторингаАдресСервиса);
		
		Если СтруктураАдреса.Схема = "http" Тогда
			СтруктураАдреса.Вставить("ЗащищенноеСоединение", Ложь);
		ИначеЕсли СтруктураАдреса.Схема = "https" Тогда
			СтруктураАдреса.Вставить("ЗащищенноеСоединение", Истина);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтруктураАдреса.Порт) Тогда
			Если СтруктураАдреса.Схема = "http" Тогда
				СтруктураАдреса.Порт = 80;
			ИначеЕсли СтруктураАдреса.Схема = "https" Тогда
				СтруктураАдреса.Порт = 443;
			КонецЕсли;
		КонецЕсли;
	Исключение
		// Внимание, формат адреса должен соответствовать RFC 3986 
		// см. описание функции ОбщегоНазначенияКлиентСервер.СтруктураURI
		ОписаниеОшибки = НСтр("ru = 'Адрес сервиса'") + " "
			+ ЦентрМониторингаАдресСервиса + " "
			+ НСтр("ru = 'не является допустимым адресом веб-сервиса для отправки отчетов об использовании программы.'"); 
		ВызватьИсключение(ОписаниеОшибки);
	КонецПопытки;
	
	ЦентрМониторингаАдресСервисаПриИзмененииНаСервере(СтруктураАдреса);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ЦентрМониторинга
#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.УдалениеПомеченныхОбъектов
&НаКлиенте
Процедура УдалениеПомеченныхНастроитьРасписание(Команда)
	РегламентныеЗаданияГиперссылкаНажатие("УдалениеПомеченных");
КонецПроцедуры
// Конец СтандартныеПодсистемы.УдалениеПомеченныхОбъектов

// СтандартныеПодсистемы.БазоваяФункциональность
&НаКлиенте
Процедура ПоискИУдалениеДублей(Команда)
	
	ОткрытьФорму("Обработка.ПоискИУдалениеДублей.Форма.ПоискДублей");
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.БазоваяФункциональность

// СтандартныеПодсистемы.ВерсионированиеОбъектов
&НаКлиенте
Процедура РегистрСведенийНастройкиВерсионированияОбъектов(Команда)
	
	ОткрытьФорму("РегистрСведений.НастройкиВерсионированияОбъектов.ФормаСписка", , ЭтотОбъект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.Валюты
&НаКлиенте
Процедура ОбработкаЗагрузкаКурсовВалют(Команда)
	
	ОткрытьФорму("Обработка.ЗагрузкаКурсовВалют.Форма");
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Валюты

// СтандартныеПодсистемы.Банки
&НаКлиенте
Процедура ЗагрузитьКлассификаторБанков(Команда)
	
	ОткрытьФорму("Справочник.КлассификаторБанковРФ.Форма.ЗагрузкаКлассификатора");
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Банки

// СтандартныеПодсистемы.ПолнотекстовыйПоиск
&НаКлиенте
Процедура ОбработкаУправлениеПолнотекстовымПоиском(Команда)
	
	ОткрытьФорму("Обработка.ПанельАдминистрированияБСП.Форма.УправлениеПолнотекстовымПоискомИИзвлечениемТекстов", , ЭтотОбъект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПолнотекстовыйПоиск

// СтандартныеПодсистемы.РаботаСКонтрагентами
&НаКлиенте
Процедура ПроверитьДоступКСервису(Команда)
	
	ПроверкаКонтрагентовКлиент.ПроверитьДоступКСервису();
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСКонтрагентами

// СтандартныеПодсистемы.РаботаСКонтрагентами
&НаКлиенте
Процедура НастроитьРасписаниеПроверкиКонтрагентов(Команда)
	
	РегламентныеЗаданияГиперссылкаНажатие("АвтоматическиПроверятьКонтрагентов");
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСКонтрагентами

// СтандартныеПодсистемы.ОбновлениеВерсииИБ
&НаКлиенте
Процедура ОтложеннаяОбработкаДанных(Команда)
	ПараметрыФормы = Новый Структура("ОткрытиеИзПанелиАдминистрирования", Истина);
	ОткрытьФорму("Обработка.РезультатыОбновленияПрограммы.Форма.ИндикацияХодаОтложенногоОбновленияИБ", ПараметрыФормы);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ОбновлениеВерсииИБ

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Клиент

&НаКлиенте
Процедура Подключаемый_ПриИзмененииРеквизита(Элемент, НеобходимоОбновлятьИнтерфейс = Истина)
	
	Результат = ПриИзмененииРеквизитаСервер(Элемент.Имя);
	
	Если НеобходимоОбновлятьИнтерфейс Тогда
		ОбновитьИнтерфейс = Истина;
		ПодключитьОбработчикОжидания("ОбновитьИнтерфейсПрограммы", 2, Истина);
	КонецЕсли;
	
	СтандартныеПодсистемыКлиент.ПоказатьРезультатВыполнения(ЭтотОбъект, Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнтерфейсПрограммы()
	
	Если ОбновитьИнтерфейс = Истина Тогда
		ОбновитьИнтерфейс = Ложь;
		ОбщегоНазначенияКлиент.ОбновитьИнтерфейсПрограммы();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РегламентныеЗаданияИспользованиеПриИзменении(ПрефиксРеквизитов)
	ИмяРеквизитаИспользование = ПрефиксРеквизитов + "Использование";
	Идентификатор = ЭтотОбъект[ПрефиксРеквизитов + "Идентификатор"];
	Если ЭтотОбъект[ИмяРеквизитаИспользование] Тогда
		ПараметрыВыполнения = Новый Структура;
		ПараметрыВыполнения.Вставить("Идентификатор", Идентификатор);
		ПараметрыВыполнения.Вставить("ИмяРеквизитаРасписание", ПрефиксРеквизитов + "Расписание");
		ПараметрыВыполнения.Вставить("ИмяРеквизитаИспользование", ИмяРеквизитаИспользование);
		
		РегламентныеЗаданияИзменитьРасписание(ПараметрыВыполнения);
	Иначе
		Изменения = Новый Структура("Использование", Ложь);
		РегламентныеЗаданияСохранить(Идентификатор, Изменения, ИмяРеквизитаИспользование);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РегламентныеЗаданияГиперссылкаНажатие(ПрефиксРеквизитов)
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("Идентификатор", ЭтотОбъект[ПрефиксРеквизитов + "Идентификатор"]);
	ПараметрыВыполнения.Вставить("ИмяРеквизитаРасписание", ПрефиксРеквизитов + "Расписание");
	
	РегламентныеЗаданияИзменитьРасписание(ПараметрыВыполнения);
КонецПроцедуры

&НаКлиенте
Процедура РегламентныеЗаданияИзменитьРасписание(ПараметрыВыполнения)
	Обработчик = Новый ОписаниеОповещения("РегламентныеЗаданияПослеИзмененияРасписания", ЭтотОбъект, ПараметрыВыполнения);
	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(ЭтотОбъект[ПараметрыВыполнения.ИмяРеквизитаРасписание]);
	Диалог.Показать(Обработчик);
КонецПроцедуры

&НаКлиенте
Процедура РегламентныеЗаданияПослеИзмененияРасписания(Расписание, ПараметрыВыполнения) Экспорт
	Если Расписание = Неопределено Тогда
		Если ПараметрыВыполнения.Свойство("ИмяРеквизитаИспользование") Тогда
			ЭтотОбъект[ПараметрыВыполнения.ИмяРеквизитаИспользование] = Ложь;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ЭтотОбъект[ПараметрыВыполнения.ИмяРеквизитаРасписание] = Расписание;
	
	Изменения = Новый Структура("Расписание", Расписание);
	Если ПараметрыВыполнения.Свойство("ИмяРеквизитаИспользование") Тогда
		ЭтотОбъект[ПараметрыВыполнения.ИмяРеквизитаИспользование] = Истина;
		Изменения.Вставить("Использование", Истина);
	КонецЕсли;
	РегламентныеЗаданияСохранить(ПараметрыВыполнения.Идентификатор, Изменения, ПараметрыВыполнения.ИмяРеквизитаРасписание);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Вызов сервера

&НаСервере
Функция ПриИзмененииРеквизитаСервер(ИмяЭлемента)
	
	Результат = Новый Структура;
	РеквизитПутьКДанным = Элементы[ИмяЭлемента].ПутьКДанным;
	
	СохранитьЗначениеРеквизита(РеквизитПутьКДанным, Результат);
	
	УстановитьДоступность(РеквизитПутьКДанным);
	ОбновитьПовторноИспользуемыеЗначения();
	
	Возврат Результат;
КонецФункции

&НаСервере
Процедура РегламентныеЗаданияСохранить(УникальныйИдентификатор, Изменения, РеквизитПутьКДанным)
	РегламентноеЗадание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(УникальныйИдентификатор);
	ЗаполнитьЗначенияСвойств(РегламентноеЗадание, Изменения);
	РегламентноеЗадание.Записать();
	
	Если РеквизитПутьКДанным <> Неопределено Тогда
		УстановитьДоступность(РеквизитПутьКДанным);
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Сервер

&НаСервере
Процедура СохранитьЗначениеРеквизита(РеквизитПутьКДанным, Результат)
	
	// Сохранение значений реквизитов, не связанных с константами напрямую.
	Если РеквизитПутьКДанным = "" Тогда
		Возврат;
	КонецЕсли;
	
	// Определение имени и запись значения реквизита в соответствующей константе из "НаборКонстант".
	// Используется для тех реквизитов формы, которые связаны с константами напрямую.
	
	Если НРег(Лев(РеквизитПутьКДанным, 14)) = НРег("НаборКонстант.") Тогда
		КонстантаИмя = Сред(РеквизитПутьКДанным, 15);
		КонстантаМенеджер = Константы[КонстантаИмя];
		КонстантаЗначение = НаборКонстант[КонстантаИмя];
		
		Если КонстантаМенеджер.Получить() <> КонстантаЗначение Тогда
			КонстантаМенеджер.Установить(КонстантаЗначение);
		КонецЕсли;
		
		СтандартныеПодсистемыКлиентСервер.ОповеститьОткрытыеФормы(Результат, "Запись_НаборКонстант", Новый Структура, КонстантаИмя);
		
		// СтандартныеПодсистемы.ВариантыОтчетов
		ВариантыОтчетов.ДобавитьОповещениеПриИзмененииЗначенияКонстанты(Результат, КонстантаМенеджер);
		// Конец СтандартныеПодсистемы.ВариантыОтчетов
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступность(РеквизитПутьКДанным = "")
	
	Если Не РежимРаботы.ЭтоАдминистраторСистемы Тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	Если РеквизитПутьКДанным = "НаборКонстант.ИспользоватьДатыЗапретаИзменения"
	 Или РеквизитПутьКДанным = "" Тогда
		
		Элементы.ГруппаДатыЗапретаИзмененияНастройка.Доступность =
			НаборКонстант.ИспользоватьДатыЗапретаИзменения;
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	Если РеквизитПутьКДанным = "НаборКонстант.ВыполнятьЗамерыПроизводительности"
		Или РеквизитПутьКДанным = "" Тогда
			ЭлементОбработкаОценкаПроизводительности = Элементы.Найти("ОбработкаОценкаПроизводительности");
			ЭлементОбработкаНастройкиОценкиПроизводительности = Элементы.Найти("ОбработкаНастройкиОценкиПроизводительности");
			Если (ЭлементОбработкаОценкаПроизводительности <> Неопределено И ЭлементОбработкаНастройкиОценкиПроизводительности <> Неопределено И НаборКонстант.Свойство("ВыполнятьЗамерыПроизводительности")) Тогда
				ЭлементОбработкаОценкаПроизводительности.Доступность = НаборКонстант.ВыполнятьЗамерыПроизводительности;
				ЭлементОбработкаНастройкиОценкиПроизводительности.Доступность = НаборКонстант.ВыполнятьЗамерыПроизводительности;
			КонецЕсли;
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности
	
	// СтандартныеПодсистемы.УдалениеПомеченныхОбъектов
	Если Элементы.ГруппаУдалениеПомеченныхОбъектовПоРасписанию.Видимость
		И (РеквизитПутьКДанным = "УдалениеПомеченныхРасписание"
			Или РеквизитПутьКДанным = "УдалениеПомеченныхИспользование"
			Или РеквизитПутьКДанным = "") Тогда
		Элементы.УдалениеПомеченныхНастроитьРасписание.Доступность         = УдалениеПомеченныхИспользование;
		Элементы.ПояснениеУдалениеПомеченныхОбъектовПоРасписанию.Видимость = УдалениеПомеченныхИспользование;
		Если УдалениеПомеченныхИспользование Тогда
			РасписаниеПредставление = Строка(УдалениеПомеченныхРасписание);
			Представление = ВРег(Лев(РасписаниеПредставление, 1)) + Сред(РасписаниеПредставление, 2);
		Иначе
			Представление = НСтр("ru = '<Отключено>'");
		КонецЕсли;
		Элементы.ПояснениеУдалениеПомеченныхОбъектовПоРасписанию.Заголовок = Представление;
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УдалениеПомеченныхОбъектов
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	Если РеквизитПутьКДанным = "НаборКонстант.ИспользоватьВерсионированиеОбъектов"
	 Или РеквизитПутьКДанным = "" Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"РегистрСведенийНастройкиВерсионированияОбъектов",
			"Доступность",
			НаборКонстант.ИспользоватьВерсионированиеОбъектов);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
		
	// СтандартныеПодсистемы.АдресныйКлассификатор
	Если РеквизитПутьКДанным = "НаборКонстант.ИсточникДанныхАдресногоКлассификатора"
	 Или РеквизитПутьКДанным = "" Тогда
	 
		Элементы.ГруппаАдресныйКлассификаторКоманды.Доступность = ПустаяСтрока(НаборКонстант.ИсточникДанныхАдресногоКлассификатора);
		
	КонецЕсли; 
	// Конец СтандартныеПодсистемы.АдресныйКлассификатор
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	Если РежимРаботы.МодельСервиса	Тогда
		Элементы.АвтоматическиПроверятьКонтрагентовИспользование.Видимость 	= Ложь;
		Элементы.АвтоматическиПроверятьКонтрагентовПояснение.Видимость 		= Ложь;
		Элементы.НастроитьРасписаниеПроверкиКонтрагентов.Видимость 			= Ложь;
	Иначе
		Если РеквизитПутьКДанным = "АвтоматическиПроверятьКонтрагентовРасписание"
			Или РеквизитПутьКДанным = "АвтоматическиПроверятьКонтрагентовИспользование"
			Или РеквизитПутьКДанным = "НаборКонстант.ИспользоватьПроверкуКонтрагентов"
			Или РеквизитПутьКДанным = "" Тогда
			
			// Настройка регламентного задания
			ИспользоватьСервисПроверкиКонтрагентов = ПроверкаКонтрагентов.ПроверкаКонтрагентовВключена();
			
			Элементы.АвтоматическиПроверятьКонтрагентовИспользование.Доступность 	= ИспользоватьСервисПроверкиКонтрагентов;
			Элементы.АвтоматическиПроверятьКонтрагентовПояснение.Видимость 			= ИспользоватьСервисПроверкиКонтрагентов;
			Элементы.НастроитьРасписаниеПроверкиКонтрагентов.Доступность 			= ИспользоватьСервисПроверкиКонтрагентов
				И АвтоматическиПроверятьКонтрагентовИспользование;
				
			Если ИспользоватьСервисПроверкиКонтрагентов Тогда
				РасписаниеПредставление = Строка(АвтоматическиПроверятьКонтрагентовРасписание);
				Представление = ВРег(Лев(РасписаниеПредставление, 1)) + Сред(РасписаниеПредставление, 2);
			Иначе
				Представление = НСтр("ru = '<Отключено>'");
			КонецЕсли;
			
			Элементы.АвтоматическиПроверятьКонтрагентовПояснение.Заголовок = Представление;
			
		КонецЕсли;
	КонецЕсли;
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
КонецПроцедуры

// СтандартныеПодсистемы.РезервноеКопированиеИБ
&НаСервере
Процедура ОбновитьНастройкиРезервногоКопирования()
	
	Если (РежимРаботы.Локальный Или РежимРаботы.Автономный) И РежимРаботы.ЭтоАдминистраторСистемы Тогда
		Элементы.ПояснениеНастройкаРезервногоКопирования.Заголовок = РезервноеКопированиеИБСервер.ТекущаяНастройкаРезервногоКопирования();
	КонецЕсли;
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.РезервноеКопированиеИБ

&НаСервере
Функция РегламентныеЗаданияНайтиПредопределенное(ИмяПредопределенного)
	МетаданныеПредопределенного = Метаданные.РегламентныеЗадания.Найти(ИмяПредопределенного);
	Если МетаданныеПредопределенного = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Возврат РегламентныеЗадания.НайтиПредопределенное(МетаданныеПредопределенного);
	КонецЕсли;
КонецФункции

// СтандартныеПодсистемы.РаботаСКонтрагентами
&НаСервере
Процедура ИспользоватьПроверкуКонтрагентовПриИзмененииСервер(ИмяЭлемента)
	
	Результат = Новый Структура;
	РеквизитПутьКДанным = Элементы[ИмяЭлемента].ПутьКДанным;
	
	СохранитьЗначениеРеквизита(РеквизитПутьКДанным, Результат);
	
	ОпределитьНастройкиРегламентногоЗаданияПроверкиКонтрагентов();
	
	УстановитьДоступность(РеквизитПутьКДанным);
	ОбновитьПовторноИспользуемыеЗначения();
	
	ПроверкаКонтрагентов.ЗапуститьФоновуюПроверкуКонтрагентовПослеИзмененияНастройкиПриНеобходимости();
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСКонтрагентами

// СтандартныеПодсистемы.РаботаСКонтрагентами
&НаСервере
Процедура ОпределитьНастройкиРегламентногоЗаданияПроверкиКонтрагентов()
	
	РегламентноеЗадание = РегламентныеЗаданияНайтиПредопределенное("ПроверкаКонтрагентов");
	Если РегламентноеЗадание <> Неопределено Тогда
		АвтоматическиПроверятьКонтрагентовИдентификатор	= РегламентноеЗадание.УникальныйИдентификатор;
		АвтоматическиПроверятьКонтрагентовИспользование = РегламентноеЗадание.Использование;
		АвтоматическиПроверятьКонтрагентовРасписание 	= РегламентноеЗадание.Расписание;
	КонецЕсли;
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСКонтрагентами

// СтандартныеПодсистемы.ЦентрМониторинга
&НаСервереБезКонтекста
Функция ПолучитьПереключательОтправкиДанных(ВключитьЦентрМониторинга, ЦентрОбработкиИнформацииОПрограмме)
	Состояние = ?(ВключитьЦентрМониторинга, "1", "0") + ?(ЦентрОбработкиИнформацииОПрограмме, "1", "0");
	
	Если Состояние = "00" Тогда
		Результат = 2;
	ИначеЕсли Состояние = "01" Тогда
		Результат = 1;
	ИначеЕсли Состояние = "10" Тогда
		Результат = 0;
	ИначеЕсли Состояние = "11" Тогда
		// А такого быть не может...
	КонецЕсли;
	
	Возврат Результат;
КонецФункции
// Конец СтандартныеПодсистемы.ЦентрМониторинга

// СтандартныеПодсистемы.ЦентрМониторинга
&НаСервере
Процедура УстановитьДоступностьЦентрМониторингаНаСервере(Параметр)
	Если Параметр = 0 Тогда
		ЭтаФорма.Элементы.ЦентрМониторингаАдресСервиса.Доступность = Ложь;
	ИначеЕсли Параметр = 1 Тогда
		ЭтаФорма.Элементы.ЦентрМониторингаАдресСервиса.Доступность = Истина;
	ИначеЕсли Параметр = 2 Тогда
		ЭтаФорма.Элементы.ЦентрМониторингаАдресСервиса.Доступность = Ложь;
	КонецЕсли;
КонецПроцедуры
// Конец СтандартныеПодсистемы.ЦентрМониторинга

// СтандартныеПодсистемы.ЦентрМониторинга
&НаКлиенте
Процедура УстановитьДоступностьЦентрМониторингаНаКлиенте(Параметр)
	Если Параметр = 0 Тогда
		ЭтаФорма.Элементы.ЦентрМониторингаАдресСервиса.Доступность = Ложь;
	ИначеЕсли Параметр = 1 Тогда
		ЭтаФорма.Элементы.ЦентрМониторингаАдресСервиса.Доступность = Истина;
	ИначеЕсли Параметр = 2 Тогда
		ЭтаФорма.Элементы.ЦентрМониторингаАдресСервиса.Доступность = Ложь;
	КонецЕсли;
КонецПроцедуры
// Конец СтандартныеПодсистемы.ЦентрМониторинга

// СтандартныеПодсистемы.ЦентрМониторинга
&НаКлиенте
Функция ПолучитьАдресСервиса()
	
	ПараметрыЦентраМониторинга = ПолучитьПараметрыЦентраМониторинга();
			
	ПараметрыСервиса = Новый Структура("Сервер, АдресРесурса, Порт");
	
	Если ЦентрМониторингаРазрешитьОтправлятьДанные = 0 Тогда
		ПараметрыСервиса.Сервер = ПараметрыЦентраМониторинга.СерверПоУмолчанию;
		ПараметрыСервиса.АдресРесурса = ПараметрыЦентраМониторинга.АдресРесурсаПоУмолчанию;
		ПараметрыСервиса.Порт = ПараметрыЦентраМониторинга.ПортПоУмолчанию;
	ИначеЕсли ЦентрМониторингаРазрешитьОтправлятьДанные = 1 Тогда
		ПараметрыСервиса.Сервер = ПараметрыЦентраМониторинга.Сервер;
		ПараметрыСервиса.АдресРесурса = ПараметрыЦентраМониторинга.АдресРесурса;
		ПараметрыСервиса.Порт = ПараметрыЦентраМониторинга.Порт;
	ИначеЕсли ЦентрМониторингаРазрешитьОтправлятьДанные = 2 Тогда
		ПараметрыСервиса = Неопределено;	
	КонецЕсли;
	
	Если ПараметрыСервиса <> Неопределено Тогда
		Если ПараметрыСервиса.Порт = 80 Тогда
			Схема = "http://";
			Порт = "";
		ИначеЕсли ПараметрыСервиса.Порт = 443 Тогда
			Схема = "https://";
			Порт = "";
		Иначе
			Схема = "http://";
			Порт = ":" + Формат(ПараметрыСервиса.Порт, "ЧН=0; ЧГ=");
		КонецЕсли;
		
		АдресСервиса = Схема + ПараметрыСервиса.Сервер + Порт + "/" + ПараметрыСервиса.АдресРесурса;
	Иначе
		АдресСервиса = "";
	КонецЕсли;
	
	Возврат АдресСервиса;
КонецФункции
// Конец СтандартныеПодсистемы.ЦентрМониторинга

// СтандартныеПодсистемы.ЦентрМониторинга
&НаСервереБезКонтекста
Функция ПолучитьПараметрыЦентраМониторинга()
	МодульЦентрМониторингаСлужебный = ОбщегоНазначения.ОбщийМодуль("ЦентрМониторингаСлужебный");
	ПараметрыЦентраМониторинга = МодульЦентрМониторингаСлужебный.ПолучитьПараметрыЦентраМониторингаВнешнийВызов();
	
	ПараметрыСервисаПоУмолчанию = МодульЦентрМониторингаСлужебный.ПолучитьПараметрыПоУмолчаниюВнешнийВызов();
	ПараметрыЦентраМониторинга.Вставить("СерверПоУмолчанию", ПараметрыСервисаПоУмолчанию.Сервер);
	ПараметрыЦентраМониторинга.Вставить("АдресРесурсаПоУмолчанию", ПараметрыСервисаПоУмолчанию.АдресРесурса);
	ПараметрыЦентраМониторинга.Вставить("ПортПоУмолчанию", ПараметрыСервисаПоУмолчанию.Порт);
	
	Возврат ПараметрыЦентраМониторинга;
КонецФункции
// Конец СтандартныеПодсистемы.ЦентрМониторинга

// СтандартныеПодсистемы.ЦентрМониторинга
&НаСервереБезКонтекста
Процедура РазрешитьОтправлятьДанныеПриИзмененииНаСервере(ПараметрыЦентраМониторинга)
	МодульЦентрМониторингаСлужебный = ОбщегоНазначения.ОбщийМодуль("ЦентрМониторингаСлужебный");
	МодульЦентрМониторингаСлужебный.УстановитьПараметрыЦентраМониторингаВнешнийВызов(ПараметрыЦентраМониторинга);
	
	ВключитьЦентрМониторинга = ПараметрыЦентраМониторинга.ВключитьЦентрМониторинга;
	ЦентрОбработкиИнформацииОПрограмме = ПараметрыЦентраМониторинга.ЦентрОбработкиИнформацииОПрограмме;
	
	Результат = ПолучитьПереключательОтправкиДанных(ВключитьЦентрМониторинга, ЦентрОбработкиИнформацииОПрограмме);
	
	Если Результат = 0 Тогда
		РегЗадание = МодульЦентрМониторингаСлужебный.ПолучитьРегламентноеЗаданиеВнешнийВызов("СборИОтправкаСтатистики", Истина);
		МодульЦентрМониторингаСлужебный.УстановитьРасписаниеПоУмолчаниюВнешнийВызов(РегЗадание);
	ИначеЕсли Результат = 1 Тогда
		РегЗадание = МодульЦентрМониторингаСлужебный.ПолучитьРегламентноеЗаданиеВнешнийВызов("СборИОтправкаСтатистики", Истина);
		МодульЦентрМониторингаСлужебный.УстановитьРасписаниеПоУмолчаниюВнешнийВызов(РегЗадание);
	ИначеЕсли Результат = 2 Тогда
		МодульЦентрМониторингаСлужебный.УдалитьРегламентноеЗаданиеВнешнийВызов("СборИОтправкаСтатистики");
	КонецЕсли;
КонецПроцедуры
// Конец СтандартныеПодсистемы.ЦентрМониторинга

// СтандартныеПодсистемы.ЦентрМониторинга
&НаСервереБезКонтекста
Процедура ЦентрМониторингаАдресСервисаПриИзмененииНаСервере(СтруктураАдреса)
	ПараметрыЦентраМониторинга = Новый Структура();
	ПараметрыЦентраМониторинга.Вставить("Сервер", СтруктураАдреса.Хост);
	ПараметрыЦентраМониторинга.Вставить("АдресРесурса", СтруктураАдреса.ПутьНаСервере);
	ПараметрыЦентраМониторинга.Вставить("Порт", СтруктураАдреса.Порт);
	ПараметрыЦентраМониторинга.Вставить("ЗащищенноеСоединение", СтруктураАдреса.ЗащищенноеСоединение);
	
	МодульЦентрМониторингаСлужебный = ОбщегоНазначения.ОбщийМодуль("ЦентрМониторингаСлужебный");
	МодульЦентрМониторингаСлужебный.УстановитьПараметрыЦентраМониторингаВнешнийВызов(ПараметрыЦентраМониторинга);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ЦентрМониторинга
#КонецОбласти
